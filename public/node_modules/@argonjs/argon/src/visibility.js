var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { inject } from 'aurelia-dependency-injection';
import { SessionService } from './session';
import { Event } from './utils';
/**
 * Access visibility state
 */
var VisibilityService = (function () {
    function VisibilityService(sessionService) {
        var _this = this;
        /**
         * An event that is raised when the app becomes visible
         */
        this.showEvent = new Event();
        /**
         * An event that is raised when the app becomes hidden
         */
        this.hideEvent = new Event();
        this._isVisible = false;
        sessionService.manager.on['ar.visibility.state'] = function (_a) {
            var state = _a.state;
            if (_this._isVisible !== state) {
                _this._isVisible = state;
                if (state)
                    _this.showEvent.raiseEvent(undefined);
                else
                    _this.hideEvent.raiseEvent(undefined);
            }
        };
        sessionService.manager.closeEvent.addEventListener(function () {
            if (_this._isVisible) {
                _this._isVisible = false;
                _this.hideEvent.raiseEvent(undefined);
            }
        });
        // if running in an old manager, assume we are visible
        sessionService.manager.connectEvent.addEventListener(function () {
            if (sessionService.manager.version[0] === 0) {
                _this._isVisible = true;
                _this.showEvent.raiseEvent(undefined);
            }
        });
    }
    Object.defineProperty(VisibilityService.prototype, "isVisible", {
        /**
         * True if this app has focus
         */
        get: function () { return this._isVisible; },
        enumerable: true,
        configurable: true
    });
    VisibilityService = __decorate([
        inject(SessionService),
        __metadata("design:paramtypes", [SessionService])
    ], VisibilityService);
    return VisibilityService;
}());
export { VisibilityService };
/**
 * Manage visibility state
 */
var VisibilityServiceProvider = (function () {
    function VisibilityServiceProvider(sessionService) {
        var _this = this;
        this.visibleSessions = new Set();
        this.sessionChangeEvent = new Event();
        sessionService.ensureIsRealityManager();
        this.sessionChangeEvent.addEventListener(function (session) {
            session.send('ar.visibility.state', { state: _this.visibleSessions.has(session) });
        });
        sessionService.manager.connectEvent.addEventListener(function () {
            _this.set(sessionService.manager, true);
        });
    }
    VisibilityServiceProvider.prototype.set = function (session, visibility) {
        if (visibility) {
            if (!this.visibleSessions.has(session)) {
                this.visibleSessions.add(session);
                this.sessionChangeEvent.raiseEvent(session);
            }
        }
        else {
            if (this.visibleSessions.has(session)) {
                this.visibleSessions.delete(session);
                this.sessionChangeEvent.raiseEvent(session);
            }
        }
    };
    VisibilityServiceProvider = __decorate([
        inject(SessionService, VisibilityService),
        __metadata("design:paramtypes", [SessionService])
    ], VisibilityServiceProvider);
    return VisibilityServiceProvider;
}());
export { VisibilityServiceProvider };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmlzaWJpbGl0eS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInZpc2liaWxpdHkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUEsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBQ3RELE9BQU8sRUFBRSxjQUFjLEVBQWUsTUFBTSxXQUFXLENBQUM7QUFDeEQsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUVoQzs7R0FFRztBQUVIO0lBa0JJLDJCQUFZLGNBQThCO1FBQTFDLGlCQXVCQztRQXZDRDs7V0FFRztRQUNJLGNBQVMsR0FBRyxJQUFJLEtBQUssRUFBUSxDQUFDO1FBRXJDOztXQUVHO1FBQ0ksY0FBUyxHQUFHLElBQUksS0FBSyxFQUFRLENBQUM7UUFNN0IsZUFBVSxHQUFHLEtBQUssQ0FBQztRQUd2QixjQUFjLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxxQkFBcUIsQ0FBQyxHQUFHLFVBQUMsRUFBMkI7Z0JBQTFCLGdCQUFLO1lBQ3RELEVBQUUsQ0FBQyxDQUFDLEtBQUksQ0FBQyxVQUFVLEtBQUssS0FBSyxDQUFDLENBQUMsQ0FBQztnQkFDNUIsS0FBSSxDQUFDLFVBQVUsR0FBRyxLQUFLLENBQUM7Z0JBQ3hCLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQztvQkFBQyxLQUFJLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsQ0FBQztnQkFDaEQsSUFBSTtvQkFBQyxLQUFJLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsQ0FBQTtZQUM3QyxDQUFDO1FBQ0wsQ0FBQyxDQUFBO1FBRUQsY0FBYyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsZ0JBQWdCLENBQUM7WUFDL0MsRUFBRSxDQUFDLENBQUMsS0FBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7Z0JBQ2xCLEtBQUksQ0FBQyxVQUFVLEdBQUcsS0FBSyxDQUFDO2dCQUN4QixLQUFJLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsQ0FBQztZQUN6QyxDQUFDO1FBQ0wsQ0FBQyxDQUFDLENBQUE7UUFFRixzREFBc0Q7UUFDdEQsY0FBYyxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsZ0JBQWdCLENBQUM7WUFDakQsRUFBRSxDQUFDLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDMUMsS0FBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUM7Z0JBQ3ZCLEtBQUksQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1lBQ3pDLENBQUM7UUFDTCxDQUFDLENBQUMsQ0FBQTtJQUNOLENBQUM7SUExQkQsc0JBQVcsd0NBQVM7UUFIcEI7O1dBRUc7YUFDSCxjQUF5QixNQUFNLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQSxDQUFDLENBQUM7OztPQUFBO0lBZnhDLGlCQUFpQjtRQUQ3QixNQUFNLENBQUMsY0FBYyxDQUFDO3lDQW1CUyxjQUFjO09BbEJqQyxpQkFBaUIsQ0EyQzdCO0lBQUQsd0JBQUM7Q0FBQSxBQTNDRCxJQTJDQztTQTNDWSxpQkFBaUI7QUE4QzlCOztHQUVHO0FBRUg7SUFLSSxtQ0FBWSxjQUE4QjtRQUExQyxpQkFVQztRQWJNLG9CQUFlLEdBQUcsSUFBSSxHQUFHLEVBQWUsQ0FBQztRQUN6Qyx1QkFBa0IsR0FBRyxJQUFJLEtBQUssRUFBZSxDQUFDO1FBR2pELGNBQWMsQ0FBQyxzQkFBc0IsRUFBRSxDQUFDO1FBRXhDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxnQkFBZ0IsQ0FBQyxVQUFDLE9BQU87WUFDN0MsT0FBTyxDQUFDLElBQUksQ0FBQyxxQkFBcUIsRUFBRSxFQUFDLEtBQUssRUFBRSxLQUFJLENBQUMsZUFBZSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsRUFBQyxDQUFDLENBQUM7UUFDcEYsQ0FBQyxDQUFDLENBQUM7UUFFSCxjQUFjLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxnQkFBZ0IsQ0FBQztZQUNqRCxLQUFJLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDM0MsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDO0lBRUQsdUNBQUcsR0FBSCxVQUFJLE9BQW1CLEVBQUUsVUFBa0I7UUFDdkMsRUFBRSxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQztZQUNiLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUNyQyxJQUFJLENBQUMsZUFBZSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQztnQkFDbEMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUNoRCxDQUFDO1FBQ0wsQ0FBQztRQUFDLElBQUksQ0FBQyxDQUFDO1lBQ0osRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUNwQyxJQUFJLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztnQkFDckMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUNoRCxDQUFDO1FBQ0wsQ0FBQztJQUNMLENBQUM7SUE3QlEseUJBQXlCO1FBRHJDLE1BQU0sQ0FBQyxjQUFjLEVBQUUsaUJBQWlCLENBQUM7eUNBTVYsY0FBYztPQUxqQyx5QkFBeUIsQ0ErQnJDO0lBQUQsZ0NBQUM7Q0FBQSxBQS9CRCxJQStCQztTQS9CWSx5QkFBeUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpbmplY3QgfSBmcm9tICdhdXJlbGlhLWRlcGVuZGVuY3ktaW5qZWN0aW9uJztcbmltcG9ydCB7IFNlc3Npb25TZXJ2aWNlLCBTZXNzaW9uUG9ydCB9IGZyb20gJy4vc2Vzc2lvbic7XG5pbXBvcnQgeyBFdmVudCB9IGZyb20gJy4vdXRpbHMnO1xuXG4vKipcbiAqIEFjY2VzcyB2aXNpYmlsaXR5IHN0YXRlXG4gKi9cbkBpbmplY3QoU2Vzc2lvblNlcnZpY2UpXG5leHBvcnQgY2xhc3MgVmlzaWJpbGl0eVNlcnZpY2Uge1xuXG4gICAgLyoqXG4gICAgICogQW4gZXZlbnQgdGhhdCBpcyByYWlzZWQgd2hlbiB0aGUgYXBwIGJlY29tZXMgdmlzaWJsZVxuICAgICAqL1xuICAgIHB1YmxpYyBzaG93RXZlbnQgPSBuZXcgRXZlbnQ8dm9pZD4oKTtcblxuICAgIC8qKlxuICAgICAqIEFuIGV2ZW50IHRoYXQgaXMgcmFpc2VkIHdoZW4gdGhlIGFwcCBiZWNvbWVzIGhpZGRlblxuICAgICAqL1xuICAgIHB1YmxpYyBoaWRlRXZlbnQgPSBuZXcgRXZlbnQ8dm9pZD4oKTtcblxuICAgIC8qKlxuICAgICAqIFRydWUgaWYgdGhpcyBhcHAgaGFzIGZvY3VzXG4gICAgICovXG4gICAgcHVibGljIGdldCBpc1Zpc2libGUoKSB7IHJldHVybiB0aGlzLl9pc1Zpc2libGUgfVxuICAgIHByaXZhdGUgX2lzVmlzaWJsZSA9IGZhbHNlO1xuXG4gICAgY29uc3RydWN0b3Ioc2Vzc2lvblNlcnZpY2U6IFNlc3Npb25TZXJ2aWNlKSB7XG4gICAgICAgIHNlc3Npb25TZXJ2aWNlLm1hbmFnZXIub25bJ2FyLnZpc2liaWxpdHkuc3RhdGUnXSA9ICh7c3RhdGV9OiB7IHN0YXRlOiBib29sZWFuIH0pID0+IHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9pc1Zpc2libGUgIT09IHN0YXRlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5faXNWaXNpYmxlID0gc3RhdGU7XG4gICAgICAgICAgICAgICAgaWYgKHN0YXRlKSB0aGlzLnNob3dFdmVudC5yYWlzZUV2ZW50KHVuZGVmaW5lZCk7XG4gICAgICAgICAgICAgICAgZWxzZSB0aGlzLmhpZGVFdmVudC5yYWlzZUV2ZW50KHVuZGVmaW5lZClcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHNlc3Npb25TZXJ2aWNlLm1hbmFnZXIuY2xvc2VFdmVudC5hZGRFdmVudExpc3RlbmVyKCgpPT57XG4gICAgICAgICAgICBpZiAodGhpcy5faXNWaXNpYmxlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5faXNWaXNpYmxlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgdGhpcy5oaWRlRXZlbnQucmFpc2VFdmVudCh1bmRlZmluZWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgICBcbiAgICAgICAgLy8gaWYgcnVubmluZyBpbiBhbiBvbGQgbWFuYWdlciwgYXNzdW1lIHdlIGFyZSB2aXNpYmxlXG4gICAgICAgIHNlc3Npb25TZXJ2aWNlLm1hbmFnZXIuY29ubmVjdEV2ZW50LmFkZEV2ZW50TGlzdGVuZXIoKCk9PntcbiAgICAgICAgICAgIGlmIChzZXNzaW9uU2VydmljZS5tYW5hZ2VyLnZlcnNpb25bMF0gPT09IDApIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9pc1Zpc2libGUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHRoaXMuc2hvd0V2ZW50LnJhaXNlRXZlbnQodW5kZWZpbmVkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICB9XG5cbn1cblxuXG4vKipcbiAqIE1hbmFnZSB2aXNpYmlsaXR5IHN0YXRlXG4gKi9cbkBpbmplY3QoU2Vzc2lvblNlcnZpY2UsIFZpc2liaWxpdHlTZXJ2aWNlKVxuZXhwb3J0IGNsYXNzIFZpc2liaWxpdHlTZXJ2aWNlUHJvdmlkZXIge1xuICAgIFxuICAgIHB1YmxpYyB2aXNpYmxlU2Vzc2lvbnMgPSBuZXcgU2V0PFNlc3Npb25Qb3J0PigpO1xuICAgIHB1YmxpYyBzZXNzaW9uQ2hhbmdlRXZlbnQgPSBuZXcgRXZlbnQ8U2Vzc2lvblBvcnQ+KCk7XG5cbiAgICBjb25zdHJ1Y3RvcihzZXNzaW9uU2VydmljZTogU2Vzc2lvblNlcnZpY2UpIHtcbiAgICAgICAgc2Vzc2lvblNlcnZpY2UuZW5zdXJlSXNSZWFsaXR5TWFuYWdlcigpO1xuICAgICAgICBcbiAgICAgICAgdGhpcy5zZXNzaW9uQ2hhbmdlRXZlbnQuYWRkRXZlbnRMaXN0ZW5lcigoc2Vzc2lvbik9PntcbiAgICAgICAgICAgIHNlc3Npb24uc2VuZCgnYXIudmlzaWJpbGl0eS5zdGF0ZScsIHtzdGF0ZTogdGhpcy52aXNpYmxlU2Vzc2lvbnMuaGFzKHNlc3Npb24pfSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHNlc3Npb25TZXJ2aWNlLm1hbmFnZXIuY29ubmVjdEV2ZW50LmFkZEV2ZW50TGlzdGVuZXIoKCk9PntcbiAgICAgICAgICAgIHRoaXMuc2V0KHNlc3Npb25TZXJ2aWNlLm1hbmFnZXIsIHRydWUpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBzZXQoc2Vzc2lvbjpTZXNzaW9uUG9ydCwgdmlzaWJpbGl0eTpib29sZWFuKSB7XG4gICAgICAgIGlmICh2aXNpYmlsaXR5KSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMudmlzaWJsZVNlc3Npb25zLmhhcyhzZXNzaW9uKSkge1xuICAgICAgICAgICAgICAgIHRoaXMudmlzaWJsZVNlc3Npb25zLmFkZChzZXNzaW9uKTtcbiAgICAgICAgICAgICAgICB0aGlzLnNlc3Npb25DaGFuZ2VFdmVudC5yYWlzZUV2ZW50KHNlc3Npb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKHRoaXMudmlzaWJsZVNlc3Npb25zLmhhcyhzZXNzaW9uKSkge1xuICAgICAgICAgICAgICAgIHRoaXMudmlzaWJsZVNlc3Npb25zLmRlbGV0ZShzZXNzaW9uKTtcbiAgICAgICAgICAgICAgICB0aGlzLnNlc3Npb25DaGFuZ2VFdmVudC5yYWlzZUV2ZW50KHNlc3Npb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG59Il19