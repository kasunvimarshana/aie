import CesiumEvent from 'cesium/Source/Core/Event';
/**
 * Provides the ability raise and subscribe to an event.
 */
var Event = (function () {
    function Event() {
        this._event = new CesiumEvent();
        /**
          * Add an event listener.
          * @param The function to be executed when the event is raised.
          * @return A convenience function which removes this event listener when called
          */
        this.addEventListener = this._event.addEventListener.bind(this._event);
        /**
         * Remove an event listener.
         * @param The function to be unregistered.
         * @return True if the listener was removed;
         * false if the listener and scope are not registered with the event.
         */
        this.removeEventListener = this._event.removeEventListener.bind(this._event);
        /**
         * Raises the event by calling each registered listener with all supplied arguments.
         * @param This method takes any number of parameters and passes them through to the listener functions.
         */
        this.raiseEvent = this._event.raiseEvent.bind(this._event);
        /**
         * Alias for addEventListener;
         */
        this.on = this.addEventListener;
        /**
         * Alias for removeEventListener;
         */
        this.off = this.removeEventListener;
    }
    Object.defineProperty(Event.prototype, "numberOfListeners", {
        /**
         * Get the number of listeners currently subscribed to the event.
         * @return Number of listeners currently subscribed to the event.
         */
        get: function () {
            return this._event.numberOfListeners;
        },
        enumerable: true,
        configurable: true
    });
    /**
      * Add an event listener that is removed after the next event is raised.
      * @param The function to be executed when the event is raised.
      * @return A convenience function which removes this event listener when called
      */
    Event.prototype.onNext = function (listener, scope) {
        var remove = this.addEventListener(function (data) {
            Promise.resolve().then(function () { return remove(); }); // temporary workaround for https://github.com/AnalyticalGraphicsInc/cesium/issues/5827
            listener.apply(scope, data);
        });
    };
    return Event;
}());
export { Event };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXZlbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJldmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLFdBQVcsTUFBTSwwQkFBMEIsQ0FBQztBQU9uRDs7R0FFRztBQUNIO0lBQUE7UUFFWSxXQUFNLEdBQUcsSUFBSSxXQUFXLEVBQUUsQ0FBQztRQVNuQzs7OztZQUlJO1FBQ0oscUJBQWdCLEdBQ1osSUFBSSxDQUFDLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBY25EOzs7OztXQUtHO1FBQ0gsd0JBQW1CLEdBQ2YsSUFBSSxDQUFDLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBRXREOzs7V0FHRztRQUNILGVBQVUsR0FDTixJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBRTdDOztXQUVHO1FBQ0gsT0FBRSxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQztRQUUzQjs7V0FFRztRQUNILFFBQUcsR0FBRyxJQUFJLENBQUMsbUJBQW1CLENBQUM7SUFFbkMsQ0FBQztJQWxERyxzQkFBSSxvQ0FBaUI7UUFKckI7OztXQUdHO2FBQ0g7WUFDSSxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQztRQUN6QyxDQUFDOzs7T0FBQTtJQVVEOzs7O1FBSUk7SUFDSixzQkFBTSxHQUFOLFVBQU8sUUFBMkIsRUFBRSxLQUFVO1FBQzFDLElBQUksTUFBTSxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxVQUFDLElBQUk7WUFDcEMsT0FBTyxDQUFDLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxjQUFJLE9BQUEsTUFBTSxFQUFFLEVBQVIsQ0FBUSxDQUFDLENBQUMsQ0FBQyx1RkFBdUY7WUFDN0gsUUFBUSxDQUFDLEtBQUssQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDaEMsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDO0lBNEJMLFlBQUM7QUFBRCxDQUFDLEFBekRELElBeURDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IENlc2l1bUV2ZW50IGZyb20gJ2Nlc2l1bS9Tb3VyY2UvQ29yZS9FdmVudCc7XG5cbi8qKlxuICogQSBjYWxsYmFjayBmb3IgcmVtb3ZpbmcgdGhlIGV2ZW50IGxpc3RlbmVyLlxuICovXG5leHBvcnQgdHlwZSBSZW1vdmVDYWxsYmFjayA9ICgpID0+IHZvaWQ7XG5cbi8qKlxuICogUHJvdmlkZXMgdGhlIGFiaWxpdHkgcmFpc2UgYW5kIHN1YnNjcmliZSB0byBhbiBldmVudC5cbiAqL1xuZXhwb3J0IGNsYXNzIEV2ZW50PFQ+IHtcblxuICAgIHByaXZhdGUgX2V2ZW50ID0gbmV3IENlc2l1bUV2ZW50KCk7XG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBudW1iZXIgb2YgbGlzdGVuZXJzIGN1cnJlbnRseSBzdWJzY3JpYmVkIHRvIHRoZSBldmVudC5cbiAgICAgKiBAcmV0dXJuIE51bWJlciBvZiBsaXN0ZW5lcnMgY3VycmVudGx5IHN1YnNjcmliZWQgdG8gdGhlIGV2ZW50LlxuICAgICAqL1xuICAgIGdldCBudW1iZXJPZkxpc3RlbmVycygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2V2ZW50Lm51bWJlck9mTGlzdGVuZXJzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAgKiBBZGQgYW4gZXZlbnQgbGlzdGVuZXIuXG4gICAgICAqIEBwYXJhbSBUaGUgZnVuY3Rpb24gdG8gYmUgZXhlY3V0ZWQgd2hlbiB0aGUgZXZlbnQgaXMgcmFpc2VkLlxuICAgICAgKiBAcmV0dXJuIEEgY29udmVuaWVuY2UgZnVuY3Rpb24gd2hpY2ggcmVtb3ZlcyB0aGlzIGV2ZW50IGxpc3RlbmVyIHdoZW4gY2FsbGVkXG4gICAgICAqL1xuICAgIGFkZEV2ZW50TGlzdGVuZXI6IChsaXN0ZW5lcjogKGRhdGE6IFQpID0+IHZvaWQsIHNjb3BlPzphbnkpID0+IFJlbW92ZUNhbGxiYWNrID1cbiAgICAgICAgdGhpcy5fZXZlbnQuYWRkRXZlbnRMaXN0ZW5lci5iaW5kKHRoaXMuX2V2ZW50KTtcblxuICAgIC8qKlxuICAgICAgKiBBZGQgYW4gZXZlbnQgbGlzdGVuZXIgdGhhdCBpcyByZW1vdmVkIGFmdGVyIHRoZSBuZXh0IGV2ZW50IGlzIHJhaXNlZC5cbiAgICAgICogQHBhcmFtIFRoZSBmdW5jdGlvbiB0byBiZSBleGVjdXRlZCB3aGVuIHRoZSBldmVudCBpcyByYWlzZWQuXG4gICAgICAqIEByZXR1cm4gQSBjb252ZW5pZW5jZSBmdW5jdGlvbiB3aGljaCByZW1vdmVzIHRoaXMgZXZlbnQgbGlzdGVuZXIgd2hlbiBjYWxsZWRcbiAgICAgICovXG4gICAgb25OZXh0KGxpc3RlbmVyOiAoZGF0YTogVCkgPT4gdm9pZCwgc2NvcGU/OmFueSkgOiB2b2lkIHtcbiAgICAgICAgbGV0IHJlbW92ZSA9IHRoaXMuYWRkRXZlbnRMaXN0ZW5lcigoZGF0YSk9PntcbiAgICAgICAgICAgIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCk9PnJlbW92ZSgpKTsgLy8gdGVtcG9yYXJ5IHdvcmthcm91bmQgZm9yIGh0dHBzOi8vZ2l0aHViLmNvbS9BbmFseXRpY2FsR3JhcGhpY3NJbmMvY2VzaXVtL2lzc3Vlcy81ODI3XG4gICAgICAgICAgICBsaXN0ZW5lci5hcHBseShzY29wZSwgZGF0YSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZSBhbiBldmVudCBsaXN0ZW5lci5cbiAgICAgKiBAcGFyYW0gVGhlIGZ1bmN0aW9uIHRvIGJlIHVucmVnaXN0ZXJlZC5cbiAgICAgKiBAcmV0dXJuIFRydWUgaWYgdGhlIGxpc3RlbmVyIHdhcyByZW1vdmVkOyBcbiAgICAgKiBmYWxzZSBpZiB0aGUgbGlzdGVuZXIgYW5kIHNjb3BlIGFyZSBub3QgcmVnaXN0ZXJlZCB3aXRoIHRoZSBldmVudC5cbiAgICAgKi9cbiAgICByZW1vdmVFdmVudExpc3RlbmVyOiAobGlzdGVuZXI6IChkYXRhOiBUKSA9PiB2b2lkKSA9PiBib29sZWFuID0gXG4gICAgICAgIHRoaXMuX2V2ZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIuYmluZCh0aGlzLl9ldmVudCk7XG5cbiAgICAvKipcbiAgICAgKiBSYWlzZXMgdGhlIGV2ZW50IGJ5IGNhbGxpbmcgZWFjaCByZWdpc3RlcmVkIGxpc3RlbmVyIHdpdGggYWxsIHN1cHBsaWVkIGFyZ3VtZW50cy5cbiAgICAgKiBAcGFyYW0gVGhpcyBtZXRob2QgdGFrZXMgYW55IG51bWJlciBvZiBwYXJhbWV0ZXJzIGFuZCBwYXNzZXMgdGhlbSB0aHJvdWdoIHRvIHRoZSBsaXN0ZW5lciBmdW5jdGlvbnMuXG4gICAgICovXG4gICAgcmFpc2VFdmVudDogKGRhdGE6IFQpID0+IHZvaWQgPSBcbiAgICAgICAgdGhpcy5fZXZlbnQucmFpc2VFdmVudC5iaW5kKHRoaXMuX2V2ZW50KTtcblxuICAgIC8qKlxuICAgICAqIEFsaWFzIGZvciBhZGRFdmVudExpc3RlbmVyO1xuICAgICAqL1xuICAgIG9uID0gdGhpcy5hZGRFdmVudExpc3RlbmVyO1xuXG4gICAgLyoqXG4gICAgICogQWxpYXMgZm9yIHJlbW92ZUV2ZW50TGlzdGVuZXI7XG4gICAgICovXG4gICAgb2ZmID0gdGhpcy5yZW1vdmVFdmVudExpc3RlbmVyO1xuXG59Il19