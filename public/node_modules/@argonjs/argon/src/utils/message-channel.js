/**
 * A MessageChannel pollyfill.
 */
var MessageChannelLike = (function () {
    /**
     * Create a MessageChannelLike instance.
     */
    function MessageChannelLike() {
        var messageChannel = this;
        var _portsOpen = true;
        var _port1ready;
        var _port2ready;
        var _port1onmessage;
        _port1ready = new Promise(function (resolve) {
            messageChannel.port1 = {
                set onmessage(func) {
                    _port1onmessage = func;
                    resolve();
                },
                get onmessage() {
                    return _port1onmessage;
                },
                postMessage: function (data) {
                    if (_portsOpen) {
                        _port2ready.then(function () {
                            if (messageChannel.port2.onmessage)
                                messageChannel.port2.onmessage({ data: data });
                        });
                    }
                },
                close: function () {
                    _portsOpen = false;
                }
            };
        });
        var _port2onmessage;
        _port2ready = new Promise(function (resolve) {
            messageChannel.port2 = {
                set onmessage(func) {
                    _port2onmessage = func;
                    resolve();
                },
                get onmessage() {
                    return _port2onmessage;
                },
                postMessage: function (data) {
                    if (_portsOpen) {
                        _port1ready.then(function () {
                            if (messageChannel.port1.onmessage)
                                messageChannel.port1.onmessage({ data: data });
                        });
                    }
                },
                close: function () {
                    _portsOpen = false;
                }
            };
        });
    }
    return MessageChannelLike;
}());
export { MessageChannelLike };
/**
 * A synchronous MessageChannel.
 */
var SynchronousMessageChannel = (function () {
    /**
     * Create a MessageChannelLike instance.
     */
    function SynchronousMessageChannel() {
        var messageChannel = this;
        var pendingMessagesToPort2 = [];
        var onmessage1 = undefined;
        var port1Event = { data: null };
        var port1Closed = false;
        var tryPendingMessagesToPort2 = function () {
            for (var i = 0; i < pendingMessagesToPort2.length; i++) {
                messageChannel.port2.onmessage(pendingMessagesToPort2[i]);
            }
            pendingMessagesToPort2.length = 0;
        };
        var tryPendingMessagesToPort1 = function () {
            for (var i = 0; i < pendingMessagesToPort1.length; i++) {
                messageChannel.port1.onmessage(pendingMessagesToPort1[i]);
            }
            pendingMessagesToPort1.length = 0;
        };
        messageChannel.port1 = {
            get onmessage() { return onmessage1; },
            set onmessage(func) {
                onmessage1 = func;
                tryPendingMessagesToPort1();
            },
            postMessage: function (data) {
                if (messageChannel.port2.onmessage) {
                    port1Event.data = data;
                    // port1Event.data = typeof data === 'string' ? data : JSON.stringify(data);
                    // console.log(JSON.stringify(port1Event.data));
                    messageChannel.port2.onmessage(port1Event);
                }
                else if (!port1Closed) {
                    pendingMessagesToPort2.push({ data: data });
                }
            },
            close: function () {
                port1Closed = true;
                messageChannel.port1.onmessage = undefined;
            }
        };
        var pendingMessagesToPort1 = [];
        var onmessage2 = undefined;
        var port2Event = { data: null };
        var port2Closed = false;
        messageChannel.port2 = {
            get onmessage() { return onmessage2; },
            set onmessage(func) {
                onmessage2 = func;
                tryPendingMessagesToPort2();
            },
            postMessage: function (data) {
                if (messageChannel.port1.onmessage) {
                    // port2Event.data = typeof data === 'string' ? data : JSON.stringify(data);
                    port2Event.data = data;
                    // console.log(JSON.stringify(data));
                    messageChannel.port1.onmessage(port2Event);
                }
                else if (!port2Closed) {
                    pendingMessagesToPort1.push({ data: data });
                }
            },
            close: function () {
                port2Closed = true;
                messageChannel.port2.onmessage = undefined;
            }
        };
    }
    return SynchronousMessageChannel;
}());
export { SynchronousMessageChannel };
/**
 * A factory which creates MessageChannel or MessageChannelLike instances, depending on
 * wheter or not MessageChannel is avaialble in the execution context.
 */
var MessageChannelFactory = (function () {
    function MessageChannelFactory() {
    }
    /**
     * Create a MessageChannel (or MessageChannelLike) instance.
     */
    MessageChannelFactory.prototype.create = function () {
        if (typeof MessageChannel !== 'undefined')
            return new MessageChannel();
        else
            return new MessageChannelLike();
    };
    /**
     * Create a SynchronousMessageChannel instance.
     */
    MessageChannelFactory.prototype.createSynchronous = function () {
        return new SynchronousMessageChannel();
    };
    return MessageChannelFactory;
}());
export { MessageChannelFactory };
//# sourceMappingURL=data:application/json;base64,