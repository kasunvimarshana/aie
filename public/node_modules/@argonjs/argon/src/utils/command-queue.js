import { Event } from './event';
/**
* TODO.
*/
var CommandQueue = (function () {
    /**
     * If errorEvent has 1 listener, outputs the error message to the web console.
     */
    function CommandQueue() {
        var _this = this;
        this._queue = [];
        this._paused = true;
        /**
         * An error event.
         */
        this.errorEvent = new Event();
        this.errorEvent.addEventListener(function (error) {
            if (_this.errorEvent.numberOfListeners === 1)
                console.error(error);
        });
    }
    /**
     * Push a command to the command queue.
     * @param command Any command ready to be pushed into the command queue.
     */
    CommandQueue.prototype.push = function (command, execute) {
        var _this = this;
        var result = new Promise(function (resolve, reject) {
            _this._queue.push({
                command: command,
                reject: reject,
                execute: function () {
                    // console.log('CommandQueue: Executing command ' + command.toString());
                    var result = Promise.resolve().then(command);
                    // result.then(() => { console.log('CommandQueue: DONE ' + command.toString()) });
                    resolve(result);
                    return result;
                }
            });
        });
        if (execute || !this._paused)
            this.execute();
        return result;
    };
    /**
     * Execute the command queue
     */
    CommandQueue.prototype.execute = function () {
        var _this = this;
        this._paused = false;
        Promise.resolve().then(function () {
            if (_this._queue.length > 0 && !_this._currentCommandPending) {
                _this._executeNextCommand();
            }
        });
    };
    /**
     * Puase the command queue (currently executing commands will still complete)
     */
    CommandQueue.prototype.pause = function () {
        this._paused = true;
    };
    /**
     * Clear commandQueue.
     */
    CommandQueue.prototype.clear = function () {
        this._queue.forEach(function (item) {
            item.reject("Unable to execute.");
        });
        this._queue = [];
    };
    CommandQueue.prototype._executeNextCommand = function () {
        var _this = this;
        this._currentCommand = undefined;
        this._currentCommandPending = undefined;
        if (this._paused)
            return;
        var item = this._queue.shift();
        if (!item)
            return;
        this._currentCommand = item.command;
        this._currentCommandPending = item.execute()
            .then(this._executeNextCommand.bind(this))
            .catch(function (e) {
            _this.errorEvent.raiseEvent(e);
            _this._executeNextCommand();
        });
    };
    return CommandQueue;
}());
export { CommandQueue };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbWFuZC1xdWV1ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImNvbW1hbmQtcXVldWUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLEtBQUssRUFBQyxNQUFNLFNBQVMsQ0FBQTtBQUU3Qjs7RUFFRTtBQUNGO0lBV0k7O09BRUc7SUFDSDtRQUFBLGlCQUlDO1FBakJPLFdBQU0sR0FBbUYsRUFBRSxDQUFDO1FBRzVGLFlBQU8sR0FBRyxJQUFJLENBQUM7UUFFdkI7O1dBRUc7UUFDSSxlQUFVLEdBQUcsSUFBSSxLQUFLLEVBQVMsQ0FBQztRQU1uQyxJQUFJLENBQUMsVUFBVSxDQUFDLGdCQUFnQixDQUFDLFVBQUMsS0FBSztZQUNuQyxFQUFFLENBQUMsQ0FBQyxLQUFJLENBQUMsVUFBVSxDQUFDLGlCQUFpQixLQUFLLENBQUMsQ0FBQztnQkFBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3RFLENBQUMsQ0FBQyxDQUFBO0lBQ04sQ0FBQztJQUVEOzs7T0FHRztJQUNJLDJCQUFJLEdBQVgsVUFBcUIsT0FBdUMsRUFBRSxPQUFpQjtRQUEvRSxpQkFnQkM7UUFmRyxJQUFNLE1BQU0sR0FBRyxJQUFJLE9BQU8sQ0FBVSxVQUFDLE9BQU8sRUFBRSxNQUFNO1lBQ2hELEtBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDO2dCQUNiLE9BQU8sU0FBQTtnQkFDUCxNQUFNLFFBQUE7Z0JBQ04sT0FBTyxFQUFFO29CQUNMLHdFQUF3RTtvQkFDeEUsSUFBTSxNQUFNLEdBQUcsT0FBTyxDQUFDLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztvQkFDL0Msa0ZBQWtGO29CQUNsRixPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7b0JBQ2hCLE1BQU0sQ0FBQyxNQUFNLENBQUM7Z0JBQ2xCLENBQUM7YUFDSixDQUFDLENBQUM7UUFDUCxDQUFDLENBQUMsQ0FBQztRQUNILEVBQUUsQ0FBQyxDQUFDLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUM7WUFBQyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDN0MsTUFBTSxDQUFDLE1BQU0sQ0FBQztJQUNsQixDQUFDO0lBRUQ7O09BRUc7SUFDSSw4QkFBTyxHQUFkO1FBQUEsaUJBT0M7UUFORyxJQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQztRQUNyQixPQUFPLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDO1lBQ25CLEVBQUUsQ0FBQyxDQUFDLEtBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUksQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDLENBQUM7Z0JBQ3pELEtBQUksQ0FBQyxtQkFBbUIsRUFBRSxDQUFDO1lBQy9CLENBQUM7UUFDTCxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7SUFFRDs7T0FFRztJQUNJLDRCQUFLLEdBQVo7UUFDSSxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQztJQUN4QixDQUFDO0lBRUQ7O09BRUc7SUFDSSw0QkFBSyxHQUFaO1FBQ0ksSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsVUFBQyxJQUFJO1lBQ3JCLElBQUksQ0FBQyxNQUFNLENBQUMsb0JBQW9CLENBQUMsQ0FBQTtRQUNyQyxDQUFDLENBQUMsQ0FBQTtRQUNGLElBQUksQ0FBQyxNQUFNLEdBQUcsRUFBRSxDQUFDO0lBQ3JCLENBQUM7SUFFTywwQ0FBbUIsR0FBM0I7UUFBQSxpQkFhQztRQVpHLElBQUksQ0FBQyxlQUFlLEdBQUcsU0FBUyxDQUFDO1FBQ2pDLElBQUksQ0FBQyxzQkFBc0IsR0FBRyxTQUFTLENBQUM7UUFDeEMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQztZQUFDLE1BQU0sQ0FBQztRQUN6QixJQUFNLElBQUksR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQ2pDLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO1lBQUMsTUFBTSxDQUFDO1FBQ2xCLElBQUksQ0FBQyxlQUFlLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQztRQUNwQyxJQUFJLENBQUMsc0JBQXNCLEdBQUcsSUFBSSxDQUFDLE9BQU8sRUFBRTthQUN2QyxJQUFJLENBQUMsSUFBSSxDQUFDLG1CQUFtQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQzthQUN6QyxLQUFLLENBQUMsVUFBQyxDQUFDO1lBQ0wsS0FBSSxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDOUIsS0FBSSxDQUFDLG1CQUFtQixFQUFFLENBQUM7UUFDL0IsQ0FBQyxDQUFDLENBQUM7SUFDWCxDQUFDO0lBQ0wsbUJBQUM7QUFBRCxDQUFDLEFBckZELElBcUZDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtFdmVudH0gZnJvbSAnLi9ldmVudCdcblxuLyoqXG4qIFRPRE8uXG4qL1xuZXhwb3J0IGNsYXNzIENvbW1hbmRRdWV1ZSB7XG4gICAgcHJpdmF0ZSBfcXVldWU6IEFycmF5PHsgY29tbWFuZDogRnVuY3Rpb24sIGV4ZWN1dGU6IEZ1bmN0aW9uLCByZWplY3Q6IChyZWFzb246IGFueSkgPT4gdm9pZCB9PiA9IFtdO1xuICAgIHByaXZhdGUgX2N1cnJlbnRDb21tYW5kOiBGdW5jdGlvbiB8IHVuZGVmaW5lZDtcbiAgICBwcml2YXRlIF9jdXJyZW50Q29tbWFuZFBlbmRpbmc6IFByb21pc2U8YW55PiB8IHVuZGVmaW5lZDtcbiAgICBwcml2YXRlIF9wYXVzZWQgPSB0cnVlO1xuXG4gICAgLyoqXG4gICAgICogQW4gZXJyb3IgZXZlbnQuXG4gICAgICovXG4gICAgcHVibGljIGVycm9yRXZlbnQgPSBuZXcgRXZlbnQ8RXJyb3I+KCk7XG5cbiAgICAvKipcbiAgICAgKiBJZiBlcnJvckV2ZW50IGhhcyAxIGxpc3RlbmVyLCBvdXRwdXRzIHRoZSBlcnJvciBtZXNzYWdlIHRvIHRoZSB3ZWIgY29uc29sZS5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5lcnJvckV2ZW50LmFkZEV2ZW50TGlzdGVuZXIoKGVycm9yKSA9PiB7XG4gICAgICAgICAgICBpZiAodGhpcy5lcnJvckV2ZW50Lm51bWJlck9mTGlzdGVuZXJzID09PSAxKSBjb25zb2xlLmVycm9yKGVycm9yKTtcbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQdXNoIGEgY29tbWFuZCB0byB0aGUgY29tbWFuZCBxdWV1ZS5cbiAgICAgKiBAcGFyYW0gY29tbWFuZCBBbnkgY29tbWFuZCByZWFkeSB0byBiZSBwdXNoZWQgaW50byB0aGUgY29tbWFuZCBxdWV1ZS5cbiAgICAgKi9cbiAgICBwdWJsaWMgcHVzaDxUUmVzdWx0Pihjb21tYW5kOiAoKSA9PiBQcm9taXNlPFRSZXN1bHQ+fFRSZXN1bHQsIGV4ZWN1dGU/OiBib29sZWFuKTogUHJvbWlzZTxUUmVzdWx0PiB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IG5ldyBQcm9taXNlPFRSZXN1bHQ+KChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIHRoaXMuX3F1ZXVlLnB1c2goe1xuICAgICAgICAgICAgICAgIGNvbW1hbmQsXG4gICAgICAgICAgICAgICAgcmVqZWN0LFxuICAgICAgICAgICAgICAgIGV4ZWN1dGU6ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ0NvbW1hbmRRdWV1ZTogRXhlY3V0aW5nIGNvbW1hbmQgJyArIGNvbW1hbmQudG9TdHJpbmcoKSk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IFByb21pc2UucmVzb2x2ZSgpLnRoZW4oY29tbWFuZCk7XG4gICAgICAgICAgICAgICAgICAgIC8vIHJlc3VsdC50aGVuKCgpID0+IHsgY29uc29sZS5sb2coJ0NvbW1hbmRRdWV1ZTogRE9ORSAnICsgY29tbWFuZC50b1N0cmluZygpKSB9KTtcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgaWYgKGV4ZWN1dGUgfHwgIXRoaXMuX3BhdXNlZCkgdGhpcy5leGVjdXRlKCk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRXhlY3V0ZSB0aGUgY29tbWFuZCBxdWV1ZVxuICAgICAqL1xuICAgIHB1YmxpYyBleGVjdXRlKCkge1xuICAgICAgICB0aGlzLl9wYXVzZWQgPSBmYWxzZTtcbiAgICAgICAgUHJvbWlzZS5yZXNvbHZlKCkudGhlbigoKSA9PiB7XG4gICAgICAgICAgICBpZiAodGhpcy5fcXVldWUubGVuZ3RoID4gMCAmJiAhdGhpcy5fY3VycmVudENvbW1hbmRQZW5kaW5nKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZXhlY3V0ZU5leHRDb21tYW5kKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFB1YXNlIHRoZSBjb21tYW5kIHF1ZXVlIChjdXJyZW50bHkgZXhlY3V0aW5nIGNvbW1hbmRzIHdpbGwgc3RpbGwgY29tcGxldGUpXG4gICAgICovXG4gICAgcHVibGljIHBhdXNlKCkge1xuICAgICAgICB0aGlzLl9wYXVzZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENsZWFyIGNvbW1hbmRRdWV1ZS5cbiAgICAgKi9cbiAgICBwdWJsaWMgY2xlYXIoKSB7XG4gICAgICAgIHRoaXMuX3F1ZXVlLmZvckVhY2goKGl0ZW0pID0+IHtcbiAgICAgICAgICAgIGl0ZW0ucmVqZWN0KFwiVW5hYmxlIHRvIGV4ZWN1dGUuXCIpXG4gICAgICAgIH0pXG4gICAgICAgIHRoaXMuX3F1ZXVlID0gW107XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBfZXhlY3V0ZU5leHRDb21tYW5kKCkge1xuICAgICAgICB0aGlzLl9jdXJyZW50Q29tbWFuZCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5fY3VycmVudENvbW1hbmRQZW5kaW5nID0gdW5kZWZpbmVkO1xuICAgICAgICBpZiAodGhpcy5fcGF1c2VkKSByZXR1cm47XG4gICAgICAgIGNvbnN0IGl0ZW0gPSB0aGlzLl9xdWV1ZS5zaGlmdCgpO1xuICAgICAgICBpZiAoIWl0ZW0pIHJldHVybjtcbiAgICAgICAgdGhpcy5fY3VycmVudENvbW1hbmQgPSBpdGVtLmNvbW1hbmQ7XG4gICAgICAgIHRoaXMuX2N1cnJlbnRDb21tYW5kUGVuZGluZyA9IGl0ZW0uZXhlY3V0ZSgpXG4gICAgICAgICAgICAudGhlbih0aGlzLl9leGVjdXRlTmV4dENvbW1hbmQuYmluZCh0aGlzKSlcbiAgICAgICAgICAgIC5jYXRjaCgoZSkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuZXJyb3JFdmVudC5yYWlzZUV2ZW50KGUpO1xuICAgICAgICAgICAgICAgIHRoaXMuX2V4ZWN1dGVOZXh0Q29tbWFuZCgpO1xuICAgICAgICAgICAgfSk7XG4gICAgfVxufVxuIl19