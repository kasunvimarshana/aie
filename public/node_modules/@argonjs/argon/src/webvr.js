import CardboardUI from 'googlevr/webvr-polyfill/src/cardboard-ui';
import 'googlevr/webvr-polyfill/src/main';
// fix cardboard ui to listen for touch or mouse events.
// see https://github.com/googlevr/webvr-polyfill/issues/174
var kButtonWidthDp = 28;
var kTouchSlopFactor = 1.5;
CardboardUI.prototype.listen = function (optionsCallback, backCallback) {
    var canvas = this.gl.canvas;
    var hasTouchEventClass = typeof TouchEvent !== 'undefined';
    this.listener = function (event) {
        var midline = canvas.clientWidth / 2;
        var buttonSize = kButtonWidthDp * kTouchSlopFactor;
        var e = hasTouchEventClass && event instanceof TouchEvent ?
            event.changedTouches[0] :
            event;
        // Check to see if the user clicked on (or around) the gear icon
        if (e.clientX > midline - buttonSize &&
            e.clientX < midline + buttonSize &&
            e.clientY > canvas.clientHeight - buttonSize) {
            event.preventDefault();
            event.stopImmediatePropagation();
            optionsCallback(event);
        }
        else if (e.clientX < buttonSize && e.clientY < buttonSize) {
            event.preventDefault();
            event.stopImmediatePropagation();
            backCallback(event);
        }
    };
    canvas.addEventListener('click', this.listener, false);
    canvas.addEventListener('touchstart', this.listener, false); // for some reason, using `touchend` here breaks touch events in parent DOM elements, whereas touchstart works fine.... seems like a bug in WebKit
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2VidnIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ3ZWJ2ci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLFdBQVcsTUFBTSwwQ0FBMEMsQ0FBQztBQUNuRSxPQUFPLGtDQUFrQyxDQUFDO0FBRTFDLHdEQUF3RDtBQUN4RCw0REFBNEQ7QUFDNUQsSUFBSSxjQUFjLEdBQUcsRUFBRSxDQUFDO0FBQ3hCLElBQUksZ0JBQWdCLEdBQUcsR0FBRyxDQUFDO0FBQzNCLFdBQVcsQ0FBQyxTQUFTLENBQUMsTUFBTSxHQUFHLFVBQVMsZUFBZSxFQUFFLFlBQVk7SUFDbkUsSUFBSSxNQUFNLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUM7SUFDNUIsSUFBSSxrQkFBa0IsR0FBRyxPQUFPLFVBQVUsS0FBSyxXQUFXLENBQUM7SUFDM0QsSUFBSSxDQUFDLFFBQVEsR0FBRyxVQUFTLEtBQTJCO1FBQ2xELElBQUksT0FBTyxHQUFHLE1BQU0sQ0FBQyxXQUFXLEdBQUcsQ0FBQyxDQUFDO1FBQ3JDLElBQUksVUFBVSxHQUFHLGNBQWMsR0FBRyxnQkFBZ0IsQ0FBQztRQUNuRCxJQUFJLENBQUMsR0FBb0Isa0JBQWtCLElBQUksS0FBSyxZQUFZLFVBQVU7WUFDeEUsS0FBSyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUM7WUFDWCxLQUFLLENBQUM7UUFDcEIsZ0VBQWdFO1FBQ2hFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLEdBQUcsT0FBTyxHQUFHLFVBQVU7WUFDaEMsQ0FBQyxDQUFDLE9BQU8sR0FBRyxPQUFPLEdBQUcsVUFBVTtZQUNoQyxDQUFDLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQyxZQUFZLEdBQUcsVUFBVSxDQUFDLENBQUMsQ0FBQztZQUNqRCxLQUFLLENBQUMsY0FBYyxFQUFFLENBQUM7WUFDdkIsS0FBSyxDQUFDLHdCQUF3QixFQUFFLENBQUM7WUFDakMsZUFBZSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3pCLENBQUM7UUFFRCxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sR0FBRyxVQUFVLElBQUksQ0FBQyxDQUFDLE9BQU8sR0FBRyxVQUFVLENBQUMsQ0FBQyxDQUFDO1lBQzFELEtBQUssQ0FBQyxjQUFjLEVBQUUsQ0FBQztZQUN2QixLQUFLLENBQUMsd0JBQXdCLEVBQUUsQ0FBQztZQUNqQyxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDdEIsQ0FBQztJQUNILENBQUMsQ0FBQztJQUNGLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLFFBQVEsRUFBRSxLQUFLLENBQUMsQ0FBQztJQUN2RCxNQUFNLENBQUMsZ0JBQWdCLENBQUMsWUFBWSxFQUFFLElBQUksQ0FBQyxRQUFRLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQyxrSkFBa0o7QUFDak4sQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IENhcmRib2FyZFVJIGZyb20gJ2dvb2dsZXZyL3dlYnZyLXBvbHlmaWxsL3NyYy9jYXJkYm9hcmQtdWknO1xuaW1wb3J0ICdnb29nbGV2ci93ZWJ2ci1wb2x5ZmlsbC9zcmMvbWFpbic7XG5cbi8vIGZpeCBjYXJkYm9hcmQgdWkgdG8gbGlzdGVuIGZvciB0b3VjaCBvciBtb3VzZSBldmVudHMuXG4vLyBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2dvb2dsZXZyL3dlYnZyLXBvbHlmaWxsL2lzc3Vlcy8xNzRcbnZhciBrQnV0dG9uV2lkdGhEcCA9IDI4O1xudmFyIGtUb3VjaFNsb3BGYWN0b3IgPSAxLjU7XG5DYXJkYm9hcmRVSS5wcm90b3R5cGUubGlzdGVuID0gZnVuY3Rpb24ob3B0aW9uc0NhbGxiYWNrLCBiYWNrQ2FsbGJhY2spIHtcbiAgdmFyIGNhbnZhcyA9IHRoaXMuZ2wuY2FudmFzO1xuICB2YXIgaGFzVG91Y2hFdmVudENsYXNzID0gdHlwZW9mIFRvdWNoRXZlbnQgIT09ICd1bmRlZmluZWQnO1xuICB0aGlzLmxpc3RlbmVyID0gZnVuY3Rpb24oZXZlbnQ6TW91c2VFdmVudHxUb3VjaEV2ZW50KSB7XG4gICAgdmFyIG1pZGxpbmUgPSBjYW52YXMuY2xpZW50V2lkdGggLyAyO1xuICAgIHZhciBidXR0b25TaXplID0ga0J1dHRvbldpZHRoRHAgKiBrVG91Y2hTbG9wRmFjdG9yO1xuICAgIHZhciBlOk1vdXNlRXZlbnR8VG91Y2ggPSBoYXNUb3VjaEV2ZW50Q2xhc3MgJiYgZXZlbnQgaW5zdGFuY2VvZiBUb3VjaEV2ZW50ID8gXG4gICAgICBldmVudC5jaGFuZ2VkVG91Y2hlc1swXSA6IFxuICAgICAgPE1vdXNlRXZlbnQ+ZXZlbnQ7XG4gICAgLy8gQ2hlY2sgdG8gc2VlIGlmIHRoZSB1c2VyIGNsaWNrZWQgb24gKG9yIGFyb3VuZCkgdGhlIGdlYXIgaWNvblxuICAgIGlmIChlLmNsaWVudFggPiBtaWRsaW5lIC0gYnV0dG9uU2l6ZSAmJlxuICAgICAgICBlLmNsaWVudFggPCBtaWRsaW5lICsgYnV0dG9uU2l6ZSAmJlxuICAgICAgICBlLmNsaWVudFkgPiBjYW52YXMuY2xpZW50SGVpZ2h0IC0gYnV0dG9uU2l6ZSkge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIGV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuICAgICAgb3B0aW9uc0NhbGxiYWNrKGV2ZW50KTtcbiAgICB9XG4gICAgLy8gQ2hlY2sgdG8gc2VlIGlmIHRoZSB1c2VyIGNsaWNrZWQgb24gKG9yIGFyb3VuZCkgdGhlIGJhY2sgaWNvblxuICAgIGVsc2UgaWYgKGUuY2xpZW50WCA8IGJ1dHRvblNpemUgJiYgZS5jbGllbnRZIDwgYnV0dG9uU2l6ZSkge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIGV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuICAgICAgYmFja0NhbGxiYWNrKGV2ZW50KTtcbiAgICB9XG4gIH07XG4gIGNhbnZhcy5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMubGlzdGVuZXIsIGZhbHNlKTtcbiAgY2FudmFzLmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCB0aGlzLmxpc3RlbmVyLCBmYWxzZSk7IC8vIGZvciBzb21lIHJlYXNvbiwgdXNpbmcgYHRvdWNoZW5kYCBoZXJlIGJyZWFrcyB0b3VjaCBldmVudHMgaW4gcGFyZW50IERPTSBlbGVtZW50cywgd2hlcmVhcyB0b3VjaHN0YXJ0IHdvcmtzIGZpbmUuLi4uIHNlZW1zIGxpa2UgYSBidWcgaW4gV2ViS2l0XG59OyJdfQ==