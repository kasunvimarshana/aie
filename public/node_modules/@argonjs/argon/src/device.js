var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Entity, DynamicPositionProperty, DynamicProperty, ReferenceFrame, Cartesian3, Matrix3, Matrix4, CesiumMath, Quaternion, JulianDate, PerspectiveFrustum, defined, Cartographic } from './cesium/cesium-imports';
import { autoinject, singleton } from 'aurelia-dependency-injection';
import { EntityService, EntityServiceProvider, PoseStatus } from './entity';
import { SessionService } from './session';
import { ArgonSystem } from './argon';
import { AVERAGE_EYE_HEIGHT, DEFAULT_NEAR_PLANE, DEFAULT_FAR_PLANE, CanvasViewport, Viewport, SerializedSubviewList, SubviewType, SerializedSubview } from './common';
import { deprecated, eastUpSouthToFixedFrame, requestAnimationFrame, cancelAnimationFrame, updateHeightFromTerrain, jsonEquals, Event } from './utils';
import { ViewService, ViewItems } from './view';
import { VisibilityServiceProvider } from './visibility';
import { isAndroid, isIOS } from './utils';
var DeviceStableState = (function () {
    function DeviceStableState() {
        this.suggestedGeolocationSubscription = undefined;
        this.userTracking = 'none';
        this.displayMode = 'other';
        this.isPresentingHMD = false;
        this.isPresentingRealityHMD = false;
        this.strict = false;
    }
    return DeviceStableState;
}());
export { DeviceStableState };
var DeviceFrameState = (function () {
    function DeviceFrameState() {
        this._scratchFrustum = new PerspectiveFrustum();
        this.time = JulianDate.now();
        this.viewport = new CanvasViewport;
        this.subviews = [{
                type: SubviewType.SINGULAR,
                viewport: new Viewport,
                projectionMatrix: (this._scratchFrustum.near = DEFAULT_NEAR_PLANE,
                    this._scratchFrustum.far = DEFAULT_FAR_PLANE,
                    this._scratchFrustum.fov = CesiumMath.PI_OVER_THREE,
                    this._scratchFrustum.aspectRatio = 1,
                    Matrix4.clone(this._scratchFrustum.projectionMatrix))
            }];
        this.userTracking = 'none';
    }
    return DeviceFrameState;
}());
export { DeviceFrameState };
;
var Device = (function () {
    function Device(owner, entityService, viewItems) {
        var _this = this;
        this.owner = owner;
        this.entityService = entityService;
        this.viewItems = viewItems;
        this.userTracking = 'none';
        this.displayMode = isIOS || isAndroid ? 'hand' : 'other';
        this.screenOrientation = 0;
        this.frameState = new DeviceFrameState;
        this.frameStateEvent = new Event();
        this.vrDisplaysUpdatedEvent = new Event();
        this.vrDisplayChangeEvent = new Event();
        this.userTrackingChangeEvent = new Event();
        this.displayModeChangeEvent = new Event();
        this.screenOrientationChangeEvent = new Event();
        this.suggestedGeolocationSubscriptionChangeEvent = new Event();
        this.deviceGeolocation = new Entity({
            id: 'ar.device-geolocation',
            position: new DynamicPositionProperty(undefined, ReferenceFrame.FIXED),
            orientation: new DynamicProperty(undefined)
        });
        this.deviceOrientation = new Entity({
            id: 'ar.device-orientation',
            position: new DynamicPositionProperty(Cartesian3.ZERO, this.deviceGeolocation),
            orientation: new DynamicProperty(undefined)
        });
        this.origin = new Entity({
            id: 'ar.device.origin',
            name: 'Device Origin',
            position: new DynamicPositionProperty(undefined, this.deviceGeolocation),
            orientation: new DynamicProperty(undefined)
        });
        this.stage = new Entity({
            id: 'ar.device.stage',
            name: 'Device Stage',
            position: new DynamicPositionProperty(undefined, this.deviceGeolocation),
            orientation: new DynamicProperty(undefined)
        });
        this.user = new Entity({
            id: 'ar.device.user',
            name: 'Device User',
            position: new DynamicPositionProperty(undefined, this.origin),
            orientation: new DynamicProperty(undefined)
        });
        // for now, only use webvr when not in argon-app
        this._useWebVR = (typeof navigator !== 'undefined' &&
            navigator.getVRDisplays &&
            navigator.userAgent.indexOf('Argon') > 0 === false);
        this._scratchCartesian = new Cartesian3;
        this._scratchFrustum = new PerspectiveFrustum();
        this.naturalUserHeight = AVERAGE_EYE_HEIGHT;
        this._running = false;
        this._previousNumListeners = 0;
        this._handleScreenOrientationChange = function () {
            var end = function (dispatchEvent) {
                clearInterval(interval);
                clearTimeout(timeout);
                _this.screenOrientationChangeEvent.raiseEvent(undefined);
            };
            var lastInnerWidth;
            var lastInnerHeight;
            var noChangeCount;
            var interval = setInterval(function () {
                if (window.innerWidth === lastInnerWidth && window.innerHeight === lastInnerHeight) {
                    noChangeCount++;
                    if (noChangeCount === 100) {
                        end(true);
                    }
                }
                else {
                    lastInnerWidth = window.innerWidth;
                    lastInnerHeight = window.innerHeight;
                    noChangeCount = 0;
                }
            });
            var timeout = setTimeout(function () {
                end(true);
            }, 1000);
        };
        this._handleVRDisplayPresentChange = function (e) {
            var display = e.display || e.detail.vrdisplay || e.detail.display;
            if (display && display === _this.vrDisplay) {
                var newDisplayMode = display.isPresenting ? 'head' :
                    display.capabilities.hasOrientation ? 'hand' : 'other';
                if (newDisplayMode !== _this.displayMode) {
                    _this.displayMode = newDisplayMode;
                    _this.displayModeChangeEvent.raiseEvent(undefined);
                }
            }
        };
        this._onUpdateFrameState = function () {
            var state = _this.frameState;
            JulianDate.now(state.time);
            state['strict'] = _this.strict; // backwards-compat
            try {
                _this.onUpdateFrameState();
                _this.frameStateEvent.raiseEvent(state);
            }
            catch (e) {
                _this.owner.manager.sendError(e);
                _this.owner.errorEvent.raiseEvent(e);
            }
            if (_this.frameStateEvent.numberOfListeners > 0) {
                _this.requestAnimationFrame(_this._onUpdateFrameState);
            }
            else {
                _this._running = false;
                return;
            }
        };
        this._scratchQuaternion = new Quaternion;
        this._scratchQuaternion2 = new Quaternion;
        this._scratchMatrix3 = new Matrix3;
        this._scratchMatrix4 = new Matrix4;
        this._defaultLeftBounds = [0.0, 0.0, 0.5, 1.0];
        this._defaultRightBounds = [0.5, 0.0, 0.5, 1.0];
        this._sittingSpace = new Entity({
            position: new DynamicPositionProperty,
            orientation: new DynamicProperty
        });
        this._negX90 = Quaternion.fromAxisAngle(Cartesian3.UNIT_X, -CesiumMath.PI_OVER_TWO);
        /**
         * Request an animation frame callback
         */
        this.requestAnimationFrame = function (callback) {
            if (_this.vrDisplay && _this.vrDisplay.isPresenting) {
                return _this.vrDisplay.requestAnimationFrame(callback);
            }
            else {
                return requestAnimationFrame(callback);
            }
        };
        /**
         * Cancel an animation frame callback
         */
        this.cancelAnimationFrame = function (id) {
            if (_this.vrDisplay) {
                _this.vrDisplay.cancelAnimationFrame(id);
            }
            else {
                cancelAnimationFrame(id);
            }
        };
        this._scratchGeolocationCartesian = new Cartesian3;
        this._scratchGeolocationMatrix4 = new Matrix4;
        this._srcatchGeolocationMatrix3 = new Matrix3;
        this._scratchGeolocationQuaternion = new Quaternion;
        this._eastUpSouthToFixedFrame = eastUpSouthToFixedFrame;
        this._scratchCartographic = new Cartographic;
        var addEventListener = this.frameStateEvent.addEventListener.bind(this.frameStateEvent);
        this.frameStateEvent.addEventListener = function (callback) {
            var result = addEventListener(callback);
            _this._checkFrameStateListeners();
            return result;
        };
        var removeEventListener = this.frameStateEvent.removeEventListener.bind(this.frameStateEvent);
        this.frameStateEvent.removeEventListener = function (callback) {
            var result = removeEventListener(callback);
            _this._checkFrameStateListeners();
            return result;
        };
        if (owner.isRealityManager) {
            this.entityService.subscribedEvent.addEventListener(function (evt) {
                if (evt.id === 'ar.origin' || evt.id === 'ar.stage') {
                    _this.suggestedGeolocationSubscription = evt.options || {};
                    _this.suggestedGeolocationSubscriptionChangeEvent.raiseEvent(undefined);
                }
            });
            this.entityService.unsubscribedEvent.addEventListener(function (evt) {
                if (evt.id === 'ar.origin' || evt.id === 'ar.stage') {
                    _this.suggestedGeolocationSubscription = undefined;
                    _this.suggestedGeolocationSubscriptionChangeEvent.raiseEvent(undefined);
                }
            });
        }
    }
    Device.prototype.getSubviewEntity = function (index) {
        var subviewEntity = this.entityService.collection.getOrCreateEntity('ar.device.view_' + index);
        if (!subviewEntity.position) {
            subviewEntity.position = new DynamicPositionProperty(Cartesian3.ZERO, this.user);
        }
        if (!subviewEntity.orientation) {
            subviewEntity.orientation = new DynamicProperty(Quaternion.IDENTITY);
        }
        return subviewEntity;
    };
    Object.defineProperty(Device.prototype, "strict", {
        get: function () {
            return !!(this._overrideState && this._overrideState.strict) ||
                this.displayMode === 'head' && !this._hasPolyfillWebVRDisplay();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Device.prototype, "suggestedUserHeight", {
        /**
         * @private
         * deprecated
         * */
        get: function () {
            return this.displayMode === 'head' ? this.naturalUserHeight : this.naturalUserHeight * 0.75;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Device.prototype, "hasSeparateRealityLayer", {
        // The device is able to render reality into a separate layer in the primary display
        get: function () {
            return (this.vrDisplay && !!this.vrDisplay.displayName.match(/polyfill/g)) || this.vrDisplay === undefined;
        },
        enumerable: true,
        configurable: true
    });
    Device.prototype._checkFrameStateListeners = function () {
        // if we have listeners, subscribe to device state, otherwise, unsubscribe
        var numListeners = this.frameStateEvent.numberOfListeners;
        var previousNumListeners = this._previousNumListeners;
        this._previousNumListeners = numListeners;
        if (typeof window === 'undefined' || !window.addEventListener) {
            if (previousNumListeners === 0 && numListeners === 1 && !this._running) {
                this._running = true;
                this.requestAnimationFrame(this._onUpdateFrameState);
            }
            return;
        }
        if (previousNumListeners === 0 && numListeners === 1) {
            if (this._useWebVR) {
                this._selectVRDisplay();
            }
            else {
                this.userTracking = isIOS || isAndroid ? '3DOF' : 'none';
                this.userTrackingChangeEvent.raiseEvent(undefined);
            }
            window.addEventListener('orientationchange', this._handleScreenOrientationChange);
            window.addEventListener('vrdisplaypresentchange', this._handleVRDisplayPresentChange);
            this.requestAnimationFrame(this._onUpdateFrameState);
        }
        else if (previousNumListeners === 1 && numListeners === 0) {
            var vrDisplay = this.vrDisplay;
            if (vrDisplay) {
                if (vrDisplay.isPresenting)
                    vrDisplay.exitPresent();
                this.vrDisplay = undefined;
                this.vrDisplayChangeEvent.raiseEvent(undefined);
                this.userTracking = 'none';
                this.userTrackingChangeEvent.raiseEvent(undefined);
            }
            window.removeEventListener('orientationchange', this._handleScreenOrientationChange);
            window.removeEventListener('vrdisplaypresentchange', this._handleVRDisplayPresentChange);
        }
    };
    Device.prototype._selectVRDisplay = function () {
        var _this = this;
        navigator.getVRDisplays().then(function (displays) {
            _this.vrDisplays = displays;
            var display = _this.vrDisplay = displays[0];
            if (!display)
                return;
            _this.userTracking =
                display.capabilities.hasPosition && display.capabilities.hasOrientation ?
                    "6DOF" : "3DOF";
            _this.vrDisplaysUpdatedEvent.raiseEvent(undefined);
            _this.vrDisplayChangeEvent.raiseEvent(undefined);
            _this.userTrackingChangeEvent.raiseEvent(undefined);
        });
    };
    Device.prototype.onUpdateFrameState = function () {
        this._updateViewport();
        // use webvr if the current display is not an external display and can't present, 
        // or if it is currently presenting
        var vrDisp = this.vrDisplay;
        if (vrDisp && vrDisp.isPresenting ||
            vrDisp && !vrDisp.capabilities.hasExternalDisplay &&
                !vrDisp.capabilities.canPresent && vrDisp.displayName.indexOf('polyfill') === -1) {
            this._updateForWebVR();
        }
        else {
            this._updateDefault();
        }
    };
    Device.prototype._updateViewport = function () {
        var overrideState = this._overrideState;
        var state = this.frameState;
        var viewport = state.viewport;
        if (overrideState && overrideState.viewport) {
            CanvasViewport.clone(overrideState.viewport, viewport);
        }
        else {
            var element = this.viewItems.element;
            viewport.x = 0;
            viewport.y = 0;
            viewport.width = element && element.clientWidth || 0;
            viewport.height = element && element.clientHeight || 0;
            var vrDisplay = this.vrDisplay;
            if (vrDisplay && vrDisplay.isPresenting) {
                var leftEye = vrDisplay.getEyeParameters("left");
                var rightEye = vrDisplay.getEyeParameters("right");
                var viewport_1 = state.viewport;
                viewport_1.renderWidthScaleFactor = 2 * Math.max(leftEye.renderWidth, rightEye.renderWidth) / viewport_1.width;
                viewport_1.renderHeightScaleFactor = Math.max(leftEye.renderHeight, rightEye.renderHeight) / viewport_1.height;
            }
            else {
                viewport.renderHeightScaleFactor = 1;
                viewport.renderWidthScaleFactor = 1;
            }
        }
    };
    Device.prototype._updateDefault = function () {
        this._updateDefaultStage();
        this._updateDefaultUser();
        this._updateDefaultOrigin();
        var overrideState = this._overrideState;
        var frameState = this.frameState;
        var viewport = frameState.viewport;
        if (overrideState && overrideState.viewport) {
            CanvasViewport.clone(overrideState.viewport, viewport);
        }
        var subviews = frameState.subviews;
        if (overrideState && overrideState.subviews) {
            SerializedSubviewList.clone(overrideState.subviews, subviews);
        }
        else {
            subviews.length = 1;
            var subview = subviews[0] || {};
            subview.type = SubviewType.SINGULAR;
            subview.viewport.x = 0;
            subview.viewport.y = 0;
            subview.viewport.width = viewport.width;
            subview.viewport.height = viewport.height;
            var aspect = viewport.width / viewport.height;
            var frustum = this._scratchFrustum;
            frustum.near = DEFAULT_NEAR_PLANE;
            frustum.far = DEFAULT_FAR_PLANE;
            frustum.fov = CesiumMath.PI_OVER_THREE;
            frustum.aspectRatio = isFinite(aspect) && aspect !== 0 ? aspect : 1;
            subview.projectionMatrix = Matrix4.clone(frustum.projectionMatrix, subview.projectionMatrix);
            var subviewEntity = this.getSubviewEntity(0);
            subviewEntity.position.setValue(Cartesian3.ZERO, this.user);
            subviewEntity.orientation.setValue(Quaternion.IDENTITY);
        }
    };
    Device.prototype._updateDefaultStage = function () {
        var stage = this.stage;
        // if manager is updating the device stage state, don't update it here
        var contextFrameState = this._contextFrameState;
        if (contextFrameState && stage.id in contextFrameState.entities)
            return;
        stage.position.setValue(Cartesian3.fromElements(0, -this.suggestedUserHeight, 0, this._scratchCartesian), this.deviceGeolocation);
        stage.orientation.setValue(Quaternion.IDENTITY);
    };
    Device.prototype._updateDefaultUser = function () {
        var user = this.user;
        this._tryOrientationUpdates();
        // if manager is updating the device user state, don't update it here
        var contextFrameState = this._contextFrameState;
        if (contextFrameState && user.id in contextFrameState.entities)
            return;
        var screenOrientation = Quaternion.fromAxisAngle(Cartesian3.UNIT_Z, this.screenOrientationDegrees * CesiumMath.RADIANS_PER_DEGREE, this._scratchQuaternion);
        user.position.setValue(Cartesian3.ZERO, this.deviceOrientation);
        user.orientation.setValue(screenOrientation);
        // const deviceOrientationValue = 
        //     (this.deviceOrientation.orientation as DynamicProperty).getValue(this.frameState.time);
        // (user.orientation as DynamicProperty).setValue(
        //     Quaternion.multiply(
        //         deviceOrientationValue,
        //         screenOrientation,
        //         this._scratchQuaternion
        //     )
        // );
        // stage['meta'] = stage['meta'] || {};
        // stage['meta'].geoHeadingAccuracy = this._deviceOrientationHeadingAccuracy;
    };
    Device.prototype._updateDefaultOrigin = function () {
        var origin = this.origin;
        var deviceGeolocation = this.deviceGeolocation;
        // if manager is updating the device origin state, don't update it here
        var contextFrameState = this._contextFrameState;
        if (contextFrameState && origin.id in contextFrameState.entities)
            return;
        var time = this.frameState.time;
        var originPose = this.entityService.getEntityPose(origin, deviceGeolocation, time);
        var deviceGeolocationPose = this.entityService.getEntityPose(deviceGeolocation, ReferenceFrame.FIXED, time);
        if ((originPose.status & PoseStatus.KNOWN) === 0 && deviceGeolocationPose.status & PoseStatus.KNOWN ||
            origin.position.referenceFrame !== ReferenceFrame.FIXED && deviceGeolocationPose.status & PoseStatus.KNOWN ||
            originPose.status & PoseStatus.KNOWN && deviceGeolocationPose.status & PoseStatus.KNOWN &&
                Cartesian3.magnitudeSquared(originPose.position) > 10000) {
            origin.position.setValue(deviceGeolocationPose.position, ReferenceFrame.FIXED);
            origin.orientation.setValue(deviceGeolocationPose.orientation);
            console.log('Updated device origin to ' + JSON.stringify(deviceGeolocationPose.position) + " at FIXED");
            return;
        }
        if ((deviceGeolocationPose.status & PoseStatus.KNOWN) === 0) {
            origin.position.setValue(Cartesian3.ZERO, deviceGeolocation);
            origin.orientation.setValue(Quaternion.IDENTITY);
        }
    };
    Device.prototype._updateForWebVR = function () {
        var vrDisplay = this.vrDisplay;
        if (!vrDisplay)
            throw new Error('No vr display!');
        var frameState = this.frameState;
        var vrFrameData = this._vrFrameData =
            this._vrFrameData || new VRFrameData();
        vrDisplay.getFrameData(vrFrameData);
        var layer = vrDisplay.getLayers()[0];
        var leftBounds = layer && layer.leftBounds;
        var rightBounds = layer && layer.rightBounds;
        if (layer) {
            leftBounds = layer.leftBounds && layer.leftBounds.length === 4 ? layer.leftBounds : this._defaultLeftBounds;
            rightBounds = layer.rightBounds && layer.rightBounds.length === 4 ? layer.rightBounds : this._defaultRightBounds;
        }
        else {
            leftBounds = this._defaultLeftBounds;
            rightBounds = this._defaultRightBounds;
        }
        var viewport = frameState.viewport;
        var subviews = frameState.subviews = frameState.subviews || [];
        subviews.length = 2;
        var leftSubview = subviews[0] = subviews[0] || {};
        var rightSubview = subviews[1] = subviews[1] || {};
        leftSubview.type = SubviewType.LEFTEYE;
        rightSubview.type = SubviewType.RIGHTEYE;
        var leftViewport = leftSubview.viewport = leftSubview.viewport || {};
        leftViewport.x = leftBounds[0] * viewport.width;
        leftViewport.y = leftBounds[1] * viewport.height;
        leftViewport.width = leftBounds[2] * viewport.width;
        leftViewport.height = leftBounds[3] * viewport.height;
        var rightViewport = rightSubview.viewport = rightSubview.viewport || {};
        rightViewport.x = rightBounds[0] * viewport.width;
        rightViewport.y = rightBounds[1] * viewport.height;
        rightViewport.width = rightBounds[2] * viewport.width;
        rightViewport.height = rightBounds[3] * viewport.height;
        leftSubview.projectionMatrix = Matrix4.clone(vrFrameData.leftProjectionMatrix, leftSubview.projectionMatrix);
        rightSubview.projectionMatrix = Matrix4.clone(vrFrameData.rightProjectionMatrix, rightSubview.projectionMatrix);
        var user = this.user;
        // Define "sitting space", positioned at device geolocation
        this._sittingSpace.position.setValue(Cartesian3.ZERO, this.deviceGeolocation);
        this._sittingSpace.orientation.setValue(Quaternion.IDENTITY);
        // let stage be equivalent to "standing space"
        var sittingToStandingTransform = vrDisplay.stageParameters ?
            vrDisplay.stageParameters.sittingToStandingTransform :
            Matrix4.IDENTITY;
        var standingToSittingTransform = Matrix4.inverseTransformation(sittingToStandingTransform, this._scratchMatrix4);
        var standingToSittingPosition = Matrix4.getTranslation(standingToSittingTransform, this._scratchCartesian);
        var standingToSittingRotation = Matrix4.getRotation(standingToSittingTransform, this._scratchMatrix3);
        var standingToSittingOrientation = Quaternion.fromRotationMatrix(standingToSittingRotation, this._scratchQuaternion);
        this.stage.position.setValue(standingToSittingPosition, this._sittingSpace);
        this.stage.orientation.setValue(standingToSittingOrientation);
        // let origin also be at "standing space"
        this.origin.position.setValue(Cartesian3.ZERO, this.stage);
        this.origin.orientation.setValue(Quaternion.IDENTITY);
        // user pose is given in "sitting space"
        var hasPosition = vrDisplay.capabilities.hasPosition;
        var userPosition = !hasPosition ?
            Cartesian3.ZERO : vrFrameData.pose.position ?
            Cartesian3.unpack(vrFrameData.pose.position, 0, this._scratchCartesian) : undefined;
        var userOrientation = vrFrameData.pose.orientation ?
            Quaternion.unpack(vrFrameData.pose.orientation, 0, this._scratchQuaternion2) : undefined;
        user.position.setValue(userPosition, this._sittingSpace);
        user.orientation.setValue(userOrientation);
        // left eye transform is given relative to sitting space
        var leftEyeTransform = Matrix4.inverseTransformation(vrFrameData.leftViewMatrix, this._scratchMatrix4);
        var leftEye = this.getSubviewEntity(0);
        var leftEyePosition = Matrix4.getTranslation(leftEyeTransform, this._scratchCartesian);
        var leftEyeRotation = Matrix4.getRotation(leftEyeTransform, this._scratchMatrix3);
        var leftEyeOrientation = Quaternion.fromRotationMatrix(leftEyeRotation, this._scratchQuaternion);
        leftEye.position.setValue(leftEyePosition, this._sittingSpace);
        leftEye.orientation.setValue(leftEyeOrientation);
        // right eye transform is given relative to sitting space
        var rightEyeTransform = Matrix4.inverseTransformation(vrFrameData.rightViewMatrix, this._scratchMatrix4);
        var rightEye = this.getSubviewEntity(1);
        var rightEyePosition = Matrix4.getTranslation(rightEyeTransform, this._scratchCartesian);
        var rightEyeRotation = Matrix4.getRotation(rightEyeTransform, this._scratchMatrix3);
        var rightEyeOrientation = Quaternion.fromRotationMatrix(rightEyeRotation, this._scratchQuaternion);
        rightEye.position.setValue(rightEyePosition, this._sittingSpace);
        rightEye.orientation.setValue(rightEyeOrientation);
        // the polyfill does not support reporting an absolute orientation (yet), 
        // so fall back to the default origin/stage/user pose in this case
        if (vrDisplay.displayName.includes('polyfill')) {
            // change left/right eye pose to be relative to user, 
            // which is necessary since we are redefining the user pose to use absolute orientation
            var leftEyeRelativeToUser = this.entityService.getEntityPose(leftEye, user, frameState.time);
            var rightEyeRelativeToUser = this.entityService.getEntityPose(rightEye, user, frameState.time);
            leftEye.position.setValue(leftEyeRelativeToUser.position, user);
            rightEye.position.setValue(rightEyeRelativeToUser.position, user);
            leftEye.orientation.setValue(leftEyeRelativeToUser.orientation);
            rightEye.orientation.setValue(rightEyeRelativeToUser.orientation);
            this._updateDefaultStage();
            this._updateDefaultUser();
            return;
        }
    };
    Device.prototype._tryOrientationUpdates = function () {
        var _this = this;
        if (typeof window == 'undefined' || !window.addEventListener)
            return;
        if (defined(this._deviceOrientationListener))
            return;
        var headingDrift = 0;
        var alphaOffset = undefined;
        this._deviceOrientationListener = function (e) {
            var alphaDegrees = e.alpha;
            var webkitCompassHeading = e['webkitCompassHeading'];
            var webkitCompassAccuracy = +e['webkitCompassAccuracy'];
            if (!defined(alphaDegrees)) {
                return;
            }
            if (e.absolute) {
                alphaOffset = 0;
            }
            // when the phone is almost updside down, webkit flips the compass heading 
            // (not documented anywhere, annoyingly)
            // if (e.beta >= 130 || e.beta <= -130) webkitCompassHeading = undefined;
            _this._deviceOrientationHeadingAccuracy = webkitCompassAccuracy > 0 ? webkitCompassAccuracy : undefined;
            if ((!defined(alphaOffset) || Math.abs(headingDrift) > 5) &&
                defined(webkitCompassHeading) &&
                webkitCompassAccuracy >= 0 &&
                webkitCompassAccuracy < 80 &&
                webkitCompassHeading >= 0) {
                if (!defined(alphaOffset)) {
                    alphaOffset = -webkitCompassHeading;
                }
                else {
                    alphaOffset -= headingDrift;
                }
            }
            if (!defined(alphaOffset) ||
                !defined(e.alpha) ||
                !defined(e.beta) ||
                !defined(e.gamma))
                return;
            var alpha = CesiumMath.RADIANS_PER_DEGREE * (e.alpha + alphaOffset || -webkitCompassHeading || 0);
            var beta = CesiumMath.RADIANS_PER_DEGREE * e.beta;
            var gamma = CesiumMath.RADIANS_PER_DEGREE * e.gamma;
            var alphaQuat = Quaternion.fromAxisAngle(Cartesian3.UNIT_Z, alpha, _this._scratchQuaternion);
            var betaQuat = Quaternion.fromAxisAngle(Cartesian3.UNIT_X, beta, _this._scratchQuaternion2);
            var alphaBetaQuat = Quaternion.multiply(alphaQuat, betaQuat, _this._scratchQuaternion);
            var gammaQuat = Quaternion.fromAxisAngle(Cartesian3.UNIT_Y, gamma, _this._scratchQuaternion2);
            var alphaBetaGammaQuat = Quaternion.multiply(alphaBetaQuat, gammaQuat, _this._scratchQuaternion);
            // finally, convert from ENU to EUS
            var deviceOrientationValue = Quaternion.multiply(_this._negX90, alphaBetaGammaQuat, _this._scratchQuaternion2); // rotate from ENU to EUS
            _this.deviceOrientation.orientation.setValue(deviceOrientationValue);
            _this.deviceOrientation['meta'] = _this.deviceOrientation['meta'] || {};
            _this.deviceOrientation['meta'].geoHeadingAccuracy = webkitCompassAccuracy || undefined;
            // TODO: fix heading drift calculation (heading should match webkitCompassHeading)
            // if (defined(webkitCompassHeading)) {
            //     const q = alphaBetaGammaQuat//utils.getEntityOrientationInReferenceFrame(this.interfaceEntity, JulianDate.now(), this.locationEntity, this._scratchQuaternion1);
            //     var heading = -Math.atan2(2*(q.w*q.z + q.x*q.y), 1 - 2*(q.y*q.y + q.z*q.z));
            //     if (heading < 0) heading += 2*Math.PI;
            //     const {swing,twist} = swingTwistDecomposition(alphaBetaGammaQuat, Cartesian3.UNIT_Z);
            //     const twistAngle = 2 * Math.acos(twist.w);
            //     console.log(twist.w + ' ' + twistAngle * CesiumMath.DEGREES_PER_RADIAN + '\n' + webkitCompassHeading);
            //     // this._headingDrift = webkitCompassHeading - heading * CesiumMath.DEGREES_PER_RADIAN;
            // }
        };
        if ('ondeviceorientationabsolute' in window) {
            window.addEventListener('deviceorientationabsolute', this._deviceOrientationListener);
        }
        else if ('ondeviceorientation' in window) {
            window.addEventListener('deviceorientation', this._deviceOrientationListener);
        }
    };
    Device.prototype._hasPolyfillWebVRDisplay = function () {
        return !!this.vrDisplay && !!this.vrDisplay.displayName.match(/polyfill/g);
    };
    Object.defineProperty(Device.prototype, "screenOrientationDegrees", {
        get: function () {
            return typeof window !== 'undefined' ? (screen['orientation'] && -screen['orientation'].angle) || -window.orientation || 0 : 0;
        },
        enumerable: true,
        configurable: true
    });
    Device.prototype.requestHeadDisplayMode = function () {
        var vrDisplay = this.vrDisplay;
        var element = this.viewItems.element;
        var viewLayers = this.viewItems.layers;
        if (!element)
            return Promise.reject(new Error("A DOM element is required"));
        if (!vrDisplay || !vrDisplay.capabilities.canPresent)
            return Promise.reject(new Error("Display mode 'head' is not supported"));
        var layers = [{
                source: viewLayers && viewLayers[0] && viewLayers[0].source ||
                    element.querySelector('canvas') ||
                    element.lastElementChild
            }];
        return vrDisplay.requestPresent(layers);
    };
    Device.prototype.exitHeadDisplayMode = function () {
        return this.vrDisplay && this.vrDisplay.isPresenting
            ? this.vrDisplay.exitPresent() : Promise.reject(new Error("Display is not currently in 'head' mode"));
    };
    Device.prototype._setState = function (state) {
        this._overrideState = state;
        if (this.userTracking !== state.userTracking) {
            this.userTracking = state.userTracking;
            this.userTrackingChangeEvent.raiseEvent(undefined);
        }
        if (this.displayMode !== state.displayMode) {
            this.displayMode = state.displayMode;
            this.displayModeChangeEvent.raiseEvent(undefined);
        }
        if (!jsonEquals(this.suggestedGeolocationSubscription, state.suggestedGeolocationSubscription)) {
            this.suggestedGeolocationSubscription = state.suggestedGeolocationSubscription;
            this.suggestedGeolocationSubscriptionChangeEvent.raiseEvent(undefined);
        }
    };
    Device.prototype.onGeolocationUpdate = function (cartographic, geoHorizontalAccuracy, geoVerticalAccuracy) {
        var _this = this;
        if (!defined(geoVerticalAccuracy) && cartographic.height === 0) {
            updateHeightFromTerrain(cartographic).then(function () { return _this.onGeolocationUpdate(cartographic, geoHorizontalAccuracy, 0); });
            return;
        }
        var geolocation = this.deviceGeolocation;
        var fixedPosition = Cartesian3.fromRadians(cartographic.longitude, cartographic.latitude, cartographic.height, undefined, this._scratchGeolocationCartesian);
        var eusTransform = this._eastUpSouthToFixedFrame(fixedPosition, undefined, this._scratchGeolocationMatrix4);
        var eusRotation = Matrix4.getRotation(eusTransform, this._srcatchGeolocationMatrix3);
        var eusOrientation = Quaternion.fromRotationMatrix(eusRotation, this._scratchGeolocationQuaternion);
        geolocation.position.setValue(fixedPosition, ReferenceFrame.FIXED);
        geolocation.orientation.setValue(eusOrientation);
        var gpsMeta = geolocation['meta'] = geolocation['meta'] || {};
        gpsMeta.geoHorizontalAccuracy = geoHorizontalAccuracy;
        gpsMeta.geoVerticalAccuracy = geoVerticalAccuracy;
    };
    /**
     * Overridable. Should call configureStage when new geolocation is available
     */
    Device.prototype.startGeolocationUpdates = function (options) {
        var _this = this;
        if (typeof navigator == 'undefined' || !navigator.geolocation)
            throw new Error('Unable to start geolocation updates');
        if (!defined(this._geolocationWatchId)) {
            this._geolocationWatchId = navigator.geolocation.watchPosition(function (pos) {
                var longDegrees = pos.coords.longitude;
                var latDegrees = pos.coords.latitude;
                var altitude = pos.coords.altitude;
                var cartographic = Cartographic.fromDegrees(longDegrees, latDegrees, altitude || 0, _this._scratchCartographic);
                _this.onGeolocationUpdate(cartographic, (pos.coords.accuracy > 0) ? pos.coords.accuracy : undefined, pos.coords.altitudeAccuracy || undefined);
            }, function (e) {
                console.warn('Unable to start geolocation updates: ' + e.message);
            }, options);
        }
    };
    /**
     * Overridable.
     */
    Device.prototype.stopGeolocationUpdates = function () {
        if (typeof navigator !== 'undefined' && defined(this._geolocationWatchId)) {
            navigator.geolocation.clearWatch(this._geolocationWatchId);
            this._geolocationWatchId = undefined;
        }
    };
    Device = __decorate([
        autoinject,
        __metadata("design:paramtypes", [SessionService,
            EntityService,
            ViewItems])
    ], Device);
    return Device;
}());
export { Device };
/**
 * The DeviceService provides the current device state
 */
var DeviceService = (function () {
    function DeviceService(sessionService, entityService, viewService, _device) {
        var _this = this;
        this.sessionService = sessionService;
        this.entityService = entityService;
        this.viewService = viewService;
        this._device = _device;
        /**
         * If this is true (and we are presenting via webvr api), then
         * vrDisplay.submitFrame is called after the frameState event
         */
        this.autoSubmitFrame = true;
        /**
         * Device state for the current frame. This
         * is not updated unless the view is visible.
         */
        this.frameState = this._device.frameState;
        /**
         * An event that fires every time the device frameState is updated.
         */
        this.frameStateEvent = new Event();
        /**
         * An even that fires when the view starts or stops presenting to an HMD.
         * Deprecated. Use displayModeChangeEvent
         */
        this.presentHMDChangeEvent = this._device.displayModeChangeEvent;
        /**
         * An event that fires when the display changes
         */
        this.vrDisplayChangeEvent = this._device.vrDisplayChangeEvent;
        /**
         * An even that fires when the display mode changes
         */
        this.displayModeChangeEvent = this._device.displayModeChangeEvent;
        /*
         * An event that fires when the screen orientation changes
         */
        this.screenOrientationChangeEvent = this._device.screenOrientationChangeEvent;
        /*
         * An event that fires when userTracking state changes
         */
        this.userTrackingChangeEvent = this._device.userTrackingChangeEvent;
        /*
         * An event that fires when getVRDisplay() is finished
         */
        this.vrDisplaysUpdatedEvent = this._device.vrDisplaysUpdatedEvent;
        /**
         * A coordinate system representing the physical space in which the user is free to
         * move around, positioned on the surface the user is standing on,
         * where +X is east, +Y is up, and +Z is south (East-Up-South), if geolocation is known.
         * If the stage is not geolocated, then the +X and +Z directions are arbitrary.
         */
        this.stage = this._device.stage;
        /**
         * An entity representing the origin of the device coordinate system, +Y up.
         */
        this.origin = this._device.origin;
        /**
         * An entity representing the physical pose of the user,
         * where +X is right, +Y is up, and -Z is forward
         */
        this.user = this._device.user;
        /*
        * An event that fires when the screen orientation changes
        */
        this.suggestedGeolocationSubscriptionChangeEvent = this._device.suggestedGeolocationSubscriptionChangeEvent;
        /**
         * Request an animation frame callback for the current view.
         */
        this.requestAnimationFrame = this._device.requestAnimationFrame.bind(this._device);
        /**
         * Cancel an animation frame callback for the current view.
         */
        this.cancelAnimationFrame = this._device.cancelAnimationFrame.bind(this._device);
        this._onDeviceFrameEvent = function () {
            _this.frameStateEvent.raiseEvent(_this._device.frameState);
        };
        this.getSubviewEntity = this._device.getSubviewEntity.bind(this._device);
        this.entityService.collection.add(this.stage);
        this.entityService.collection.add(this.origin);
        this.entityService.collection.add(this.user);
        this.entityService.collection.add(this._device.deviceGeolocation);
        this.entityService.collection.add(this._device.deviceOrientation);
        this._startUpdates();
        this.sessionService.manager.closeEvent.addEventListener(function () { return _this._stopUpdates(); });
        if (!this.sessionService.isRealityManager) {
            sessionService.manager.on['ar.device.state'] = sessionService.manager.on['ar.device.frameState'] = function (stableState) {
                // only apply device state if we the owning session
                if (_this._device.owner === _this.sessionService) {
                    _this._device._setState(stableState);
                }
            };
        }
    }
    Object.defineProperty(DeviceService.prototype, "vrDisplay", {
        get: function () { return this._device.vrDisplay; },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(DeviceService.prototype, "vrDisplays", {
        get: function () { return this._device.vrDisplays; },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(DeviceService.prototype, "displayMode", {
        get: function () { return this._device.displayMode; },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(DeviceService.prototype, "screenOrientationDegrees", {
        get: function () {
            return this._device.screenOrientationDegrees;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DeviceService.prototype, "userTracking", {
        /**
         * Returns the DOF support of the device.
         * "none"|"3DOF"|"6DOF"
         */
        get: function () {
            return this._device.userTracking;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DeviceService.prototype, "geoHeadingAccuracy", {
        /**
         * The heading accuracy of the user's geopose
         */
        get: function () {
            return this.stage['meta'] ? this.stage['meta'].geoHeadingAccuracy : undefined;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DeviceService.prototype, "geoHorizontalAccuracy", {
        /**
         * The horizontal accuracy of the user's geopose
         */
        get: function () {
            return this.stage['meta'] ? this.stage['meta'].geoHorizontalAccuracy : undefined;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DeviceService.prototype, "geoVerticalAccuracy", {
        /**
         * The horizontal accuracy of the user's geopose
         */
        get: function () {
            return this.stage['meta'] ? this.stage['meta'].geoVerticalAccuracy : undefined;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DeviceService.prototype, "suggestedGeolocationSubscription", {
        get: function () {
            return this._device.suggestedGeolocationSubscription;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DeviceService.prototype, "suggestedUserHeight", {
        get: function () {
            return this._device.suggestedUserHeight;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DeviceService.prototype, "strict", {
        get: function () {
            return this._device.strict;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Internal.
     * @private
     */
    DeviceService.prototype._processContextFrameState = function (frameState) {
        this._device._contextFrameState = frameState;
    };
    /**
     * Start emmitting frameState events
     */
    DeviceService.prototype._startUpdates = function () {
        var _this = this;
        this.sessionService.manager.whenConnected().then(function () {
            if (_this.sessionService.manager.version[0] > 0) {
                _this.sessionService.manager.send('ar.device.startUpdates');
            }
        });
        this._device.frameStateEvent.addEventListener(this._onDeviceFrameEvent);
    };
    /**
     * Stop emitting frameState events
     */
    DeviceService.prototype._stopUpdates = function () {
        var _this = this;
        this.sessionService.manager.whenConnected().then(function () {
            if (_this.sessionService.manager.version[0] > 0) {
                _this.sessionService.manager.send('ar.device.stopUpdates');
            }
        });
        this._device.frameStateEvent.removeEventListener(this._onDeviceFrameEvent);
    };
    DeviceService.prototype.onRequestPresentHMD = function () {
        return this._device.requestHeadDisplayMode();
    };
    DeviceService.prototype.onExitPresentHMD = function () {
        return this._device.exitHeadDisplayMode();
    };
    DeviceService.prototype.createContextFrameState = function (time, viewport, subviewList, options) {
        return ArgonSystem.instance.context.createFrameState(time, viewport, subviewList, options);
    };
    DeviceService.prototype.subscribeGeolocation = function (options, session) {
        var _this = this;
        if (session === void 0) { session = this.sessionService.manager; }
        return this.sessionService.manager.whenConnected().then(function () {
            if (_this.sessionService.manager.versionNumber >= 1.4)
                return _this.entityService.subscribe(_this.origin.id, options).then(function () { });
            else
                return _this.entityService.subscribe(_this.stage.id, options).then(function () { });
        });
    };
    DeviceService.prototype.unsubscribeGeolocation = function (session) {
        var _this = this;
        if (session === void 0) { session = this.sessionService.manager; }
        this.sessionService.manager.whenConnected().then(function () {
            if (_this.sessionService.manager.versionNumber >= 1.4)
                _this.entityService.unsubscribe(_this.origin.id);
            else
                _this.entityService.unsubscribe(_this.stage.id);
        });
    };
    Object.defineProperty(DeviceService.prototype, "isPresentingHMD", {
        /**
         * Is the view presenting to an HMD.
         * Same as `displayMode === 'head'`.
         */
        get: function () {
            return this._device.displayMode === 'head';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DeviceService.prototype, "isPresentingRealityHMD", {
        /**
         * Is the current reality presenting to an HMD.
         * Same as `displayMode === 'head' && `hasSeparateRealityLayer === true`.
         */
        get: function () {
            return this._device.displayMode === 'head' && this._device.hasSeparateRealityLayer;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DeviceService.prototype, "hasSeparateRealityLayer", {
        get: function () {
            return this._device.hasSeparateRealityLayer;
        },
        enumerable: true,
        configurable: true
    });
    DeviceService.prototype.requestPresentHMD = function () {
        if (!this.sessionService.manager.isConnected)
            throw new Error('Session must be connected');
        if (this.sessionService.isRealityManager) {
            return this.onRequestPresentHMD();
        }
        return this.sessionService.manager.request('ar.device.requestPresentHMD');
    };
    DeviceService.prototype.exitPresentHMD = function () {
        if (!this.sessionService.manager.isConnected)
            throw new Error('Session must be connected');
        if (this.sessionService.isRealityManager) {
            return this.onExitPresentHMD();
        }
        return this.sessionService.manager.request('ar.device.exitPresentHMD');
    };
    __decorate([
        deprecated(),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [JulianDate,
            CanvasViewport,
            SerializedSubviewList, Object]),
        __metadata("design:returntype", Object)
    ], DeviceService.prototype, "createContextFrameState", null);
    DeviceService = __decorate([
        singleton(true) // register in child container
        ,
        __metadata("design:paramtypes", [SessionService,
            EntityService,
            ViewService,
            Device])
    ], DeviceService);
    return DeviceService;
}());
export { DeviceService };
/**
 *
 */
var DeviceServiceProvider = (function () {
    function DeviceServiceProvider(sessionService, deviceService, viewService, entityService, entityServiceProvider, visibilityServiceProvider, device) {
        var _this = this;
        this.sessionService = sessionService;
        this.deviceService = deviceService;
        this.viewService = viewService;
        this.entityService = entityService;
        this.entityServiceProvider = entityServiceProvider;
        this.visibilityServiceProvider = visibilityServiceProvider;
        this.device = device;
        this.needsPublish = false;
        this._stableState = new DeviceStableState;
        this._targetGeolocationOptions = {};
        this._sessionGeolocationOptions = new Map();
        this.sessionService.connectEvent.addEventListener(function (session) {
            // deprecated
            session.on['ar.device.requestFrameState'] = function () { };
            session.on['ar.device.startUpdates'] = function () { };
            session.on['ar.device.stopUpdates'] = function () { };
            // to be removed (subscription options are handled by EntityService now)
            session.on['ar.device.setGeolocationOptions'] = function (_a) {
                var options = _a.options;
                _this._sessionGeolocationOptions.set(session, options);
                _this._checkDeviceGeolocationSubscribers();
            };
            session.on['ar.device.requestPresentHMD'] = function () {
                return _this.handleRequestPresentHMD(session);
            };
            session.on['ar.device.exitPresentHMD'] = function () {
                return _this.handleExitPresentHMD(session);
            };
            session.closeEvent.addEventListener(function () {
                if (_this._sessionGeolocationOptions.has(session)) {
                    _this._sessionGeolocationOptions.delete(session);
                    _this._checkDeviceGeolocationSubscribers();
                }
            });
            _this.needsPublish = true;
        });
        this.entityServiceProvider.sessionSubscribedEvent.addEventListener(function (_a) {
            var id = _a.id, options = _a.options, session = _a.session;
            if (_this.deviceService.origin.id === id) {
                _this._sessionGeolocationOptions.set(session, options);
                _this._checkDeviceGeolocationSubscribers();
            }
        });
        this.entityServiceProvider.sessionUnsubscribedEvent.addEventListener(function (_a) {
            var id = _a.id;
            if (_this.deviceService.origin.id === id)
                _this._checkDeviceGeolocationSubscribers();
        });
        var setNeedsPublish = function () { return _this.needsPublish = true; };
        this.deviceService.suggestedGeolocationSubscriptionChangeEvent.addEventListener(setNeedsPublish);
        this.deviceService.screenOrientationChangeEvent.addEventListener(setNeedsPublish);
        this.deviceService.userTrackingChangeEvent.addEventListener(setNeedsPublish);
        this.deviceService.displayModeChangeEvent.addEventListener(setNeedsPublish);
        this.viewService.viewportChangeEvent.addEventListener(setNeedsPublish);
        this.viewService.viewportModeChangeEvent.addEventListener(setNeedsPublish);
        var previousViewportMode = this.viewService.viewportMode;
        this.deviceService.displayModeChangeEvent.addEventListener(function () {
            // if device mode changes to 'head', enter immersive viewport mode
            if (_this.deviceService.displayMode === 'head') {
                var vrDisplay = _this.deviceService.vrDisplay;
                if (vrDisplay && vrDisplay.displayName.match(/polyfill/g)) {
                    var layers = viewService.layers;
                    var baseLayer = layers && layers[0];
                    var canvas = baseLayer && baseLayer.source;
                    if (canvas)
                        canvas.classList.add('argon-interactive');
                    previousViewportMode = viewService.viewportMode;
                    viewService.desiredViewportMode = 1 /* IMMERSIVE */;
                }
            }
            else {
                var layers = viewService.layers;
                var baseLayer = layers && layers[0];
                var canvas = baseLayer && baseLayer.source;
                if (canvas)
                    canvas.classList.remove('argon-interactive');
                viewService.desiredViewportMode = previousViewportMode;
            }
        });
        this.deviceService.frameStateEvent.addEventListener(function (state) {
            if (_this.needsPublish ||
                _this._stableState.isPresentingHMD !== _this.deviceService.isPresentingHMD ||
                _this._stableState.isPresentingRealityHMD !== _this.deviceService.isPresentingRealityHMD ||
                CanvasViewport.equals(_this._stableState.viewport, state.viewport) === false) {
                _this.needsPublish = true;
            }
            else if (_this._stableState.subviews) {
                if (_this._stableState.subviews.length === state.subviews.length) {
                    for (var i = 0; i < state.subviews.length; i++) {
                        if (!SerializedSubview.equals(state.subviews[i], _this._stableState.subviews[i])) {
                            _this.needsPublish = true;
                            break;
                        }
                    }
                }
                else {
                    _this.needsPublish = true;
                }
            }
            if (_this.needsPublish)
                _this.publishStableState();
        });
        this.viewService.viewportModeChangeEvent.addEventListener(function (mode) {
            if (mode === 0 /* PAGE */ && _this.deviceService.vrDisplay && _this.deviceService.vrDisplay.displayName.match(/polyfill/g) && _this.deviceService.displayMode === 'head')
                _this.deviceService.exitPresentHMD();
        });
    }
    DeviceServiceProvider.prototype.handleRequestPresentHMD = function (session) {
        return this.deviceService.requestPresentHMD();
    };
    DeviceServiceProvider.prototype.handleExitPresentHMD = function (session) {
        return this.deviceService.exitPresentHMD();
    };
    DeviceServiceProvider.prototype.publishStableState = function () {
        var stableState = this._stableState;
        stableState.isPresentingHMD = this.deviceService.isPresentingHMD;
        stableState.isPresentingRealityHMD = this.deviceService.isPresentingRealityHMD;
        stableState.suggestedGeolocationSubscription = this.deviceService.suggestedGeolocationSubscription;
        stableState.strict = this.deviceService.strict;
        stableState.viewport = CanvasViewport.clone(this.deviceService.frameState.viewport, stableState.viewport);
        stableState.subviews = SerializedSubviewList.clone(this.deviceService.frameState.subviews, stableState.subviews);
        stableState.displayMode = this.deviceService.displayMode;
        stableState.userTracking = this.deviceService.userTracking;
        this.onUpdateStableState(this._stableState);
        // send stable state to each visible session
        for (var _i = 0, _a = this.sessionService.managedSessions; _i < _a.length; _i++) {
            var session = _a[_i];
            if (session.version[0] > 0 && session !== this.sessionService.manager &&
                this.visibilityServiceProvider.visibleSessions.has(session)) {
                session.send('ar.device.state', stableState);
            }
        }
        this.needsPublish = false;
    };
    DeviceServiceProvider.prototype.onUpdateStableState = function (stableState) { };
    DeviceServiceProvider.prototype._checkDeviceGeolocationSubscribers = function () {
        var subscribers = this.entityServiceProvider.subscribersByEntity.get(this.deviceService.origin.id);
        if (subscribers && subscribers.size > 0) {
            var reducedOptions_1 = {};
            this._sessionGeolocationOptions.forEach(function (options, session) {
                reducedOptions_1.enableHighAccuracy =
                    reducedOptions_1.enableHighAccuracy || (options && options.enableHighAccuracy) || false;
            });
            if (this._targetGeolocationOptions.enableHighAccuracy !== reducedOptions_1.enableHighAccuracy) {
                this._targetGeolocationOptions = reducedOptions_1;
            }
            if (JSON.stringify(this._targetGeolocationOptions) !== JSON.stringify(this._currentGeolocationOptions)) {
                this._currentGeolocationOptions = this._targetGeolocationOptions;
                this.device.stopGeolocationUpdates();
                this.device.startGeolocationUpdates(this._targetGeolocationOptions);
            }
        }
        else {
            this.device.stopGeolocationUpdates();
            this._currentGeolocationOptions = undefined;
        }
        this.needsPublish = true;
    };
    DeviceServiceProvider = __decorate([
        autoinject(),
        __metadata("design:paramtypes", [SessionService,
            DeviceService,
            ViewService,
            EntityService,
            EntityServiceProvider,
            VisibilityServiceProvider,
            Device])
    ], DeviceServiceProvider);
    return DeviceServiceProvider;
}());
export { DeviceServiceProvider };
//# sourceMappingURL=data:application/json;base64,