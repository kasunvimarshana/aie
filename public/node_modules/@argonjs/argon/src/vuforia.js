var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { inject } from 'aurelia-dependency-injection';
import { SessionService } from './session';
import { Event, resolveURL, deprecated } from './utils';
/**
 * A service which handles requests from a VuforiaService
 */
var VuforiaServiceProvider = (function () {
    function VuforiaServiceProvider(sessionService) {
        if (sessionService.isRealityManager) {
            sessionService.connectEvent.addEventListener(function (session) {
                session.on['ar.vuforia.isAvailable'] = function () { return Promise.resolve({ available: false }); };
            });
            sessionService.connectEvent.addEventListener(function (session) {
                session.on['ar.vuforia.init'] = function () { return Promise.reject(new Error("Vuforia is not supported on this system")); };
            });
        }
    }
    VuforiaServiceProvider = __decorate([
        inject(SessionService),
        __metadata("design:paramtypes", [SessionService])
    ], VuforiaServiceProvider);
    return VuforiaServiceProvider;
}());
export { VuforiaServiceProvider };
/**
 * Enum for the setHint function
 */
export var VuforiaHint;
(function (VuforiaHint) {
    VuforiaHint[VuforiaHint["MaxSimultaneousImageTargets"] = 0] = "MaxSimultaneousImageTargets";
    VuforiaHint[VuforiaHint["MaxSimultaneousObjectTargets"] = 1] = "MaxSimultaneousObjectTargets";
    VuforiaHint[VuforiaHint["DelayedLoadingObjectDatasets"] = 2] = "DelayedLoadingObjectDatasets";
})(VuforiaHint || (VuforiaHint = {}));
/**
 * A service for interacting with the Vuforia API
 */
var VuforiaService = (function () {
    function VuforiaService(sessionService) {
        this.sessionService = sessionService;
    }
    /**
     * Resolves to a boolean indicating whether or not the Vuforia API is available on this system
     */
    VuforiaService.prototype.isAvailable = function () {
        return this.sessionService.manager.request('ar.vuforia.isAvailable').then(function (message) {
            return message.available;
        });
    };
    /**
     * Initialize vuforia using an encrypted license.
     * You can get a vuforia license key from https://developer.vuforia.com/
     * You can encrypt your vuforia license with the tool at http://docs.argonjs.io/start/vuforia-pgp-encryptor
     */
    VuforiaService.prototype.init = function (options) {
        var _this = this;
        if (typeof options === 'string')
            options = { encryptedLicenseData: options };
        if (!options.encryptedLicenseData || typeof options.encryptedLicenseData !== 'string')
            throw new Error('options.encryptedLicenseData is required.');
        return this.sessionService.manager.request('ar.vuforia.init', options).then(function () {
            return new VuforiaAPI(_this.sessionService.manager);
        });
    };
    /**
     * Initialize vuforia with an unecrypted key.
     * It's a bad idea to publish your unencrypted vuforia key on the internet.
     * @private
     */
    VuforiaService.prototype.initWithUnencryptedKey = function (options) {
        var _this = this;
        if (typeof options === 'string')
            options = { key: options };
        return this.sessionService.manager.request('ar.vuforia.init', options).then(function () {
            return new VuforiaAPI(_this.sessionService.manager);
        });
    };
    VuforiaService = __decorate([
        inject(SessionService, VuforiaServiceProvider),
        __metadata("design:paramtypes", [SessionService])
    ], VuforiaService);
    return VuforiaService;
}());
export { VuforiaService };
var VuforiaAPI = (function () {
    function VuforiaAPI(manager) {
        this.manager = manager;
        this.objectTracker = new VuforiaObjectTracker(manager);
    }
    // setHint should be called after Vuforia is initialized
    VuforiaAPI.prototype.setHint = function (hint, value) {
        var options = { hint: hint, value: value };
        return this.manager.request('ar.vuforia.setHint', options).then(function (message) {
            return message.result;
        });
    };
    return VuforiaAPI;
}());
export { VuforiaAPI };
var VuforiaTracker = (function () {
    function VuforiaTracker() {
    }
    return VuforiaTracker;
}());
export { VuforiaTracker };
/**
 * Vuforia Object Tracker
 */
var VuforiaObjectTracker = (function (_super) {
    __extends(VuforiaObjectTracker, _super);
    function VuforiaObjectTracker(managerSession) {
        var _this = _super.call(this) || this;
        _this.managerSession = managerSession;
        _this.dataSetLoadEvent = new Event();
        _this.dataSetUnloadEvent = new Event();
        _this.dataSetActivateEvent = new Event();
        _this.dataSetDeactivateEvent = new Event();
        _this._deprecatedDataSetInstanceMap = new Map();
        managerSession.on['ar.vuforia.objectTrackerLoadDataSetEvent'] = function (message) {
            _this.dataSetLoadEvent.raiseEvent(message);
        };
        managerSession.on['ar.vuforia.objectTrackerUnloadDataSetEvent'] = function (message) {
            _this.dataSetUnloadEvent.raiseEvent(message);
        };
        managerSession.on['ar.vuforia.objectTrackerActivateDataSetEvent'] = function (message) {
            var deprecatedDataSetInstance = _this._deprecatedDataSetInstanceMap.get(message.id);
            if (deprecatedDataSetInstance) {
                deprecatedDataSetInstance._onActivate();
                _this.dataSetActivateEvent.raiseEvent(deprecatedDataSetInstance);
            }
            else
                _this.dataSetActivateEvent.raiseEvent(message);
        };
        managerSession.on['ar.vuforia.objectTrackerDeactivateDataSetEvent'] = function (message) {
            var deprecatedDataSetInstance = _this._deprecatedDataSetInstanceMap.get(message.id);
            if (deprecatedDataSetInstance) {
                deprecatedDataSetInstance._onDeactivate();
                _this.dataSetActivateEvent.raiseEvent(deprecatedDataSetInstance);
            }
            else
                _this.dataSetDeactivateEvent.raiseEvent(message);
        };
        return _this;
    }
    /**
     * Deprecated. Please use createDataSetFromURI instead.
     * @deprecated To be removed.
     */
    VuforiaObjectTracker.prototype.createDataSet = function (url) {
        var _this = this;
        if (url && window.document) {
            url = resolveURL(url);
        }
        return this.managerSession.request('ar.vuforia.objectTrackerCreateDataSet', { url: url }).then(function (message) {
            var dataSet = new DeprecatedVuforiaDataSet(message.id, _this.managerSession);
            _this._deprecatedDataSetInstanceMap.set(message.id, dataSet);
            return dataSet;
        });
    };
    /**
     * Fetch a dataset from the provided url.
     * If successfull, resolves to an id which represents the dataset.
     */
    VuforiaObjectTracker.prototype.createDataSetFromURL = function (url) {
        if (url && window.document) {
            url = resolveURL(url);
        }
        return this.managerSession.request('ar.vuforia.objectTrackerCreateDataSet', { url: url })
            .then(function (message) {
            return message.id;
        });
    };
    Object.defineProperty(VuforiaObjectTracker.prototype, "createDataSetFromURI", {
        get: function () { return this.createDataSetFromURL; },
        enumerable: true,
        configurable: true
    });
    ;
    /**
     * Load the dataset into memory, and return a promise which
     * resolves to the contained trackables
     */
    VuforiaObjectTracker.prototype.loadDataSet = function (id) {
        var _this = this;
        return this.managerSession.whenConnected().then(function () {
            if (_this.managerSession.version[0] == 0) {
                return _this.managerSession.request('ar.vuforia.dataSetLoad', { id: id });
            }
            return _this.managerSession.request('ar.vuforia.objectTrackerLoadDataSet', { id: id });
        });
    };
    /**
     * Unload a dataset from memory (deactivating it if necessary)
     */
    VuforiaObjectTracker.prototype.unloadDataSet = function (id) {
        var _this = this;
        return this.managerSession.whenConnected().then(function () {
            if (_this.managerSession.version[0] == 0) {
                return _this.deactivateDataSet(id);
            }
            return _this.managerSession.request('ar.vuforia.objectTrackerUnloadDataSet', { id: id });
        });
    };
    /**
     * Load (if necessary) and activate a dataset to enable tracking of the contained trackables
     */
    VuforiaObjectTracker.prototype.activateDataSet = function (id) {
        id = (id instanceof DeprecatedVuforiaDataSet) ? id.id : id; // backwards compatability
        return this.managerSession.request('ar.vuforia.objectTrackerActivateDataSet', { id: id });
    };
    /**
     * Deactivate a loaded dataset to disable tracking of the contained trackables
     */
    VuforiaObjectTracker.prototype.deactivateDataSet = function (id) {
        id = (id instanceof DeprecatedVuforiaDataSet) ? id.id : id; // backwards compatability
        return this.managerSession.request('ar.vuforia.objectTrackerDeactivateDataSet', { id: id });
    };
    __decorate([
        deprecated('createDataSetFromURL'),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [String]),
        __metadata("design:returntype", Promise)
    ], VuforiaObjectTracker.prototype, "createDataSet", null);
    __decorate([
        deprecated('createDataSetFromURL'),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [])
    ], VuforiaObjectTracker.prototype, "createDataSetFromURI", null);
    return VuforiaObjectTracker;
}(VuforiaTracker));
export { VuforiaObjectTracker };
/**
 * @deprecated To be removed.
 */
var DeprecatedVuforiaDataSet = (function () {
    function DeprecatedVuforiaDataSet(id, managerSession) {
        this.id = id;
        this.managerSession = managerSession;
        this._isActive = false;
    }
    DeprecatedVuforiaDataSet.prototype._onActivate = function () {
        this._isActive = true;
    };
    DeprecatedVuforiaDataSet.prototype._onDeactivate = function () {
        this._isActive = false;
    };
    DeprecatedVuforiaDataSet.prototype.fetch = function () {
        return this.managerSession.request('ar.vuforia.dataSetFetch', { id: this.id });
    };
    DeprecatedVuforiaDataSet.prototype.load = function () {
        var _this = this;
        return this.managerSession.request('ar.vuforia.dataSetLoad', { id: this.id }).then(function (trackables) {
            _this._trackables = trackables;
            return trackables;
        });
    };
    DeprecatedVuforiaDataSet.prototype.isActive = function () {
        return this._isActive;
    };
    DeprecatedVuforiaDataSet.prototype.getTrackables = function () {
        return this._trackables;
    };
    return DeprecatedVuforiaDataSet;
}());
export { DeprecatedVuforiaDataSet };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidnVmb3JpYS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInZ1Zm9yaWEudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQTtBQUNyRCxPQUFPLEVBQUUsY0FBYyxFQUFlLE1BQU0sV0FBVyxDQUFBO0FBQ3ZELE9BQU8sRUFBRSxLQUFLLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBRSxNQUFNLFNBQVMsQ0FBQTtBQUV2RDs7R0FFRztBQUVIO0lBQ0ksZ0NBQVksY0FBOEI7UUFDdEMsRUFBRSxDQUFDLENBQUMsY0FBYyxDQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FBQztZQUNsQyxjQUFjLENBQUMsWUFBWSxDQUFDLGdCQUFnQixDQUFDLFVBQUMsT0FBTztnQkFDakQsT0FBTyxDQUFDLEVBQUUsQ0FBQyx3QkFBd0IsQ0FBQyxHQUFHLGNBQU0sT0FBQSxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQUMsU0FBUyxFQUFDLEtBQUssRUFBQyxDQUFDLEVBQWxDLENBQWtDLENBQUM7WUFDcEYsQ0FBQyxDQUFDLENBQUM7WUFDSCxjQUFjLENBQUMsWUFBWSxDQUFDLGdCQUFnQixDQUFDLFVBQUMsT0FBTztnQkFDakQsT0FBTyxDQUFDLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLGNBQU0sT0FBQSxPQUFPLENBQUMsTUFBTSxDQUFDLElBQUksS0FBSyxDQUFDLHlDQUF5QyxDQUFDLENBQUMsRUFBcEUsQ0FBb0UsQ0FBQztZQUMvRyxDQUFDLENBQUMsQ0FBQztRQUNQLENBQUM7SUFDTCxDQUFDO0lBVmlCLHNCQUFzQjtRQUQzQyxNQUFNLENBQUMsY0FBYyxDQUFDO3lDQUVTLGNBQWM7T0FEeEIsc0JBQXNCLENBVzNDO0lBQUQsNkJBQUM7Q0FBQSxBQVhELElBV0M7U0FYcUIsc0JBQXNCO0FBYTVDOztHQUVHO0FBQ0gsTUFBTSxDQUFOLElBQVksV0FJWDtBQUpELFdB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QUFVLG1CQUFjLEdBQWQsY0FBYyxDQUFhO1FBSDFELGNBQVMsR0FBRyxLQUFLLENBQUM7SUFHNEMsQ0FBQztJQUV2RSw4Q0FBVyxHQUFYO1FBQ0ksSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUM7SUFDMUIsQ0FBQztJQUVELGdEQUFhLEdBQWI7UUFDSSxJQUFJLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQztJQUMzQixDQUFDO0lBRU0sd0NBQUssR0FBWjtRQUNJLE1BQU0sQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyx5QkFBeUIsRUFBRSxFQUFFLEVBQUUsRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUNuRixDQUFDO0lBRU0sdUNBQUksR0FBWDtRQUFBLGlCQUtDO1FBSkcsTUFBTSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFvQix3QkFBd0IsRUFBRSxFQUFFLEVBQUUsRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBQyxVQUFVO1lBQzdHLEtBQUksQ0FBQyxXQUFXLEdBQUcsVUFBVSxDQUFDO1lBQzlCLE1BQU0sQ0FBQyxVQUFVLENBQUM7UUFDdEIsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDO0lBRU0sMkNBQVEsR0FBZjtRQUNJLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDO0lBQzFCLENBQUM7SUFFTSxnREFBYSxHQUFwQjtRQUNJLE1BQU0sQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDO0lBQzVCLENBQUM7SUFDTCwrQkFBQztBQUFELENBQUMsQUFqQ0QsSUFpQ0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpbmplY3QgfSBmcm9tICdhdXJlbGlhLWRlcGVuZGVuY3ktaW5qZWN0aW9uJ1xuaW1wb3J0IHsgU2Vzc2lvblNlcnZpY2UsIFNlc3Npb25Qb3J0IH0gZnJvbSAnLi9zZXNzaW9uJ1xuaW1wb3J0IHsgRXZlbnQsIHJlc29sdmVVUkwsIGRlcHJlY2F0ZWQgfSBmcm9tICcuL3V0aWxzJ1xuXG4vKipcbiAqIEEgc2VydmljZSB3aGljaCBoYW5kbGVzIHJlcXVlc3RzIGZyb20gYSBWdWZvcmlhU2VydmljZVxuICovXG5AaW5qZWN0KFNlc3Npb25TZXJ2aWNlKVxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIFZ1Zm9yaWFTZXJ2aWNlUHJvdmlkZXIge1xuICAgIGNvbnN0cnVjdG9yKHNlc3Npb25TZXJ2aWNlOiBTZXNzaW9uU2VydmljZSkge1xuICAgICAgICBpZiAoc2Vzc2lvblNlcnZpY2UuaXNSZWFsaXR5TWFuYWdlcikge1xuICAgICAgICAgICAgc2Vzc2lvblNlcnZpY2UuY29ubmVjdEV2ZW50LmFkZEV2ZW50TGlzdGVuZXIoKHNlc3Npb24pID0+IHtcbiAgICAgICAgICAgICAgICBzZXNzaW9uLm9uWydhci52dWZvcmlhLmlzQXZhaWxhYmxlJ10gPSAoKSA9PiBQcm9taXNlLnJlc29sdmUoe2F2YWlsYWJsZTpmYWxzZX0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBzZXNzaW9uU2VydmljZS5jb25uZWN0RXZlbnQuYWRkRXZlbnRMaXN0ZW5lcigoc2Vzc2lvbikgPT4ge1xuICAgICAgICAgICAgICAgIHNlc3Npb24ub25bJ2FyLnZ1Zm9yaWEuaW5pdCddID0gKCkgPT4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiVnVmb3JpYSBpcyBub3Qgc3VwcG9ydGVkIG9uIHRoaXMgc3lzdGVtXCIpKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxufVxuXG4vKipcbiAqIEVudW0gZm9yIHRoZSBzZXRIaW50IGZ1bmN0aW9uXG4gKi9cbmV4cG9ydCBlbnVtIFZ1Zm9yaWFIaW50IHtcbiAgICBNYXhTaW11bHRhbmVvdXNJbWFnZVRhcmdldHMgPSAwLFxuICAgIE1heFNpbXVsdGFuZW91c09iamVjdFRhcmdldHMgPSAxLFxuICAgIERlbGF5ZWRMb2FkaW5nT2JqZWN0RGF0YXNldHMgPSAyXG59XG5cbi8qKlxuICogQSBzZXJ2aWNlIGZvciBpbnRlcmFjdGluZyB3aXRoIHRoZSBWdWZvcmlhIEFQSVxuICovXG5AaW5qZWN0KFNlc3Npb25TZXJ2aWNlLCBWdWZvcmlhU2VydmljZVByb3ZpZGVyKVxuZXhwb3J0IGNsYXNzIFZ1Zm9yaWFTZXJ2aWNlIHtcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgc2Vzc2lvblNlcnZpY2U6IFNlc3Npb25TZXJ2aWNlKSB7fVxuXG4gICAgLyoqXG4gICAgICogUmVzb2x2ZXMgdG8gYSBib29sZWFuIGluZGljYXRpbmcgd2hldGhlciBvciBub3QgdGhlIFZ1Zm9yaWEgQVBJIGlzIGF2YWlsYWJsZSBvbiB0aGlzIHN5c3RlbVxuICAgICAqL1xuICAgIHB1YmxpYyBpc0F2YWlsYWJsZSgpOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2Vzc2lvblNlcnZpY2UubWFuYWdlci5yZXF1ZXN0PHsgYXZhaWxhYmxlOiBib29sZWFuIH0+KCdhci52dWZvcmlhLmlzQXZhaWxhYmxlJykudGhlbigobWVzc2FnZSkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIG1lc3NhZ2UuYXZhaWxhYmxlO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXplIHZ1Zm9yaWEgdXNpbmcgYW4gZW5jcnlwdGVkIGxpY2Vuc2UuXG4gICAgICogWW91IGNhbiBnZXQgYSB2dWZvcmlhIGxpY2Vuc2Uga2V5IGZyb20gaHR0cHM6Ly9kZXZlbG9wZXIudnVmb3JpYS5jb20vIFxuICAgICAqIFlvdSBjYW4gZW5jcnlwdCB5b3VyIHZ1Zm9yaWEgbGljZW5zZSB3aXRoIHRoZSB0b29sIGF0IGh0dHA6Ly9kb2NzLmFyZ29uanMuaW8vc3RhcnQvdnVmb3JpYS1wZ3AtZW5jcnlwdG9yXG4gICAgICovXG4gICAgcHVibGljIGluaXQob3B0aW9uczogc3RyaW5nfHtlbmNyeXB0ZWRMaWNlbnNlRGF0YTpzdHJpbmd9KTogUHJvbWlzZTxWdWZvcmlhQVBJPiB7XG4gICAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gJ3N0cmluZycpIG9wdGlvbnMgPSB7ZW5jcnlwdGVkTGljZW5zZURhdGE6b3B0aW9uc307XG4gICAgICAgIGlmICghb3B0aW9ucy5lbmNyeXB0ZWRMaWNlbnNlRGF0YSB8fCB0eXBlb2Ygb3B0aW9ucy5lbmNyeXB0ZWRMaWNlbnNlRGF0YSAhPT0gJ3N0cmluZycpIFxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdvcHRpb25zLmVuY3J5cHRlZExpY2Vuc2VEYXRhIGlzIHJlcXVpcmVkLicpXG4gICAgICAgIHJldHVybiB0aGlzLnNlc3Npb25TZXJ2aWNlLm1hbmFnZXIucmVxdWVzdCgnYXIudnVmb3JpYS5pbml0Jywgb3B0aW9ucykudGhlbigoKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFZ1Zm9yaWFBUEkodGhpcy5zZXNzaW9uU2VydmljZS5tYW5hZ2VyKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW5pdGlhbGl6ZSB2dWZvcmlhIHdpdGggYW4gdW5lY3J5cHRlZCBrZXkuXG4gICAgICogSXQncyBhIGJhZCBpZGVhIHRvIHB1Ymxpc2ggeW91ciB1bmVuY3J5cHRlZCB2dWZvcmlhIGtleSBvbiB0aGUgaW50ZXJuZXQuXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBwdWJsaWMgaW5pdFdpdGhVbmVuY3J5cHRlZEtleShvcHRpb25zOiBzdHJpbmd8e2tleTpzdHJpbmd9KSA6IFByb21pc2U8VnVmb3JpYUFQST4geyAgICAgICAgXG4gICAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gJ3N0cmluZycpIG9wdGlvbnMgPSB7a2V5Om9wdGlvbnN9O1xuICAgICAgICByZXR1cm4gdGhpcy5zZXNzaW9uU2VydmljZS5tYW5hZ2VyLnJlcXVlc3QoJ2FyLnZ1Zm9yaWEuaW5pdCcsIG9wdGlvbnMpLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBWdWZvcmlhQVBJKHRoaXMuc2Vzc2lvblNlcnZpY2UubWFuYWdlcik7XG4gICAgICAgIH0pO1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIFZ1Zm9yaWFBUEkge1xuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgbWFuYWdlcjogU2Vzc2lvblBvcnQpIHtcbiAgICAgICAgdGhpcy5vYmplY3RUcmFja2VyID0gbmV3IFZ1Zm9yaWFPYmplY3RUcmFja2VyKG1hbmFnZXIpO1xuICAgIH1cbiAgICBwdWJsaWMgb2JqZWN0VHJhY2tlcjogVnVmb3JpYU9iamVjdFRyYWNrZXI7XG5cbiAgICAvLyBzZXRIaW50IHNob3VsZCBiZSBjYWxsZWQgYWZ0ZXIgVnVmb3JpYSBpcyBpbml0aWFsaXplZFxuICAgIHB1YmxpYyBzZXRIaW50KGhpbnQ6IFZ1Zm9yaWFIaW50LCB2YWx1ZTogbnVtYmVyKSB7XG4gICAgICAgIGxldCBvcHRpb25zID0ge2hpbnQ6aGludCwgdmFsdWU6dmFsdWV9O1xuICAgICAgICByZXR1cm4gdGhpcy5tYW5hZ2VyLnJlcXVlc3Q8eyByZXN1bHQ6IGJvb2xlYW4gfT4oJ2FyLnZ1Zm9yaWEuc2V0SGludCcsIG9wdGlvbnMpLnRoZW4oKG1lc3NhZ2UpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBtZXNzYWdlLnJlc3VsdDtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgVnVmb3JpYVRyYWNrZXIge1xuICAgIGNvbnN0cnVjdG9yKCkge31cbn1cblxuZXhwb3J0IHR5cGUgVnVmb3JpYURhdGFTZXRJZCA9IHN0cmluZztcblxuZXhwb3J0IGludGVyZmFjZSBWdWZvcmlhRGF0YVNldEV2ZW50IHtcbiAgICBpZDogVnVmb3JpYURhdGFTZXRJZFxufVxuXG5leHBvcnQgaW50ZXJmYWNlIFZ1Zm9yaWFEYXRhU2V0TG9hZEV2ZW50IGV4dGVuZHMgVnVmb3JpYURhdGFTZXRFdmVudCB7XG4gICAgaWQ6IFZ1Zm9yaWFEYXRhU2V0SWQsXG4gICAgdHJhY2thYmxlczogVnVmb3JpYVRyYWNrYWJsZXNcbn1cblxuLyoqXG4gKiBWdWZvcmlhIE9iamVjdCBUcmFja2VyXG4gKi9cbmV4cG9ydCBjbGFzcyBWdWZvcmlhT2JqZWN0VHJhY2tlciBleHRlbmRzIFZ1Zm9yaWFUcmFja2VyIHtcblxuICAgIHB1YmxpYyBkYXRhU2V0TG9hZEV2ZW50ID0gbmV3IEV2ZW50PFZ1Zm9yaWFEYXRhU2V0TG9hZEV2ZW50PigpO1xuICAgIHB1YmxpYyBkYXRhU2V0VW5sb2FkRXZlbnQgPSBuZXcgRXZlbnQ8VnVmb3JpYURhdGFTZXRFdmVudD4oKTtcbiAgICBcbiAgICBwdWJsaWMgZGF0YVNldEFjdGl2YXRlRXZlbnQgPSBuZXcgRXZlbnQ8VnVmb3JpYURhdGFTZXRFdmVudD4oKTtcbiAgICBwdWJsaWMgZGF0YVNldERlYWN0aXZhdGVFdmVudCA9IG5ldyBFdmVudDxWdWZvcmlhRGF0YVNldEV2ZW50PigpO1xuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBtYW5hZ2VyU2Vzc2lvbjogU2Vzc2lvblBvcnQpIHtcbiAgICAgICAgc3VwZXIoKTtcblxuICAgICAgICBtYW5hZ2VyU2Vzc2lvbi5vblsnYXIudnVmb3JpYS5vYmplY3RUcmFja2VyTG9hZERhdGFTZXRFdmVudCddID0gKG1lc3NhZ2U6VnVmb3JpYURhdGFTZXRMb2FkRXZlbnQpID0+IHtcbiAgICAgICAgICAgIHRoaXMuZGF0YVNldExvYWRFdmVudC5yYWlzZUV2ZW50KG1lc3NhZ2UpO1xuICAgICAgICB9XG5cbiAgICAgICAgbWFuYWdlclNlc3Npb24ub25bJ2FyLnZ1Zm9yaWEub2JqZWN0VHJhY2tlclVubG9hZERhdGFTZXRFdmVudCddID0gKG1lc3NhZ2U6VnVmb3JpYURhdGFTZXRFdmVudCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5kYXRhU2V0VW5sb2FkRXZlbnQucmFpc2VFdmVudChtZXNzYWdlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIG1hbmFnZXJTZXNzaW9uLm9uWydhci52dWZvcmlhLm9iamVjdFRyYWNrZXJBY3RpdmF0ZURhdGFTZXRFdmVudCddID0gKG1lc3NhZ2U6VnVmb3JpYURhdGFTZXRFdmVudCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgZGVwcmVjYXRlZERhdGFTZXRJbnN0YW5jZSA9IHRoaXMuX2RlcHJlY2F0ZWREYXRhU2V0SW5zdGFuY2VNYXAuZ2V0KG1lc3NhZ2UuaWQpO1xuICAgICAgICAgICAgaWYgKGRlcHJlY2F0ZWREYXRhU2V0SW5zdGFuY2UpIHtcbiAgICAgICAgICAgICAgICBkZXByZWNhdGVkRGF0YVNldEluc3RhbmNlLl9vbkFjdGl2YXRlKCk7IFxuICAgICAgICAgICAgICAgIHRoaXMuZGF0YVNldEFjdGl2YXRlRXZlbnQucmFpc2VFdmVudChkZXByZWNhdGVkRGF0YVNldEluc3RhbmNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgdGhpcy5kYXRhU2V0QWN0aXZhdGVFdmVudC5yYWlzZUV2ZW50KG1lc3NhZ2UpO1xuICAgICAgICB9XG5cbiAgICAgICAgbWFuYWdlclNlc3Npb24ub25bJ2FyLnZ1Zm9yaWEub2JqZWN0VHJhY2tlckRlYWN0aXZhdGVEYXRhU2V0RXZlbnQnXSA9IChtZXNzYWdlOlZ1Zm9yaWFEYXRhU2V0RXZlbnQpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGRlcHJlY2F0ZWREYXRhU2V0SW5zdGFuY2UgPSB0aGlzLl9kZXByZWNhdGVkRGF0YVNldEluc3RhbmNlTWFwLmdldChtZXNzYWdlLmlkKTtcbiAgICAgICAgICAgIGlmIChkZXByZWNhdGVkRGF0YVNldEluc3RhbmNlKSB7XG4gICAgICAgICAgICAgICAgZGVwcmVjYXRlZERhdGFTZXRJbnN0YW5jZS5fb25EZWFjdGl2YXRlKCk7IFxuICAgICAgICAgICAgICAgIHRoaXMuZGF0YVNldEFjdGl2YXRlRXZlbnQucmFpc2VFdmVudChkZXByZWNhdGVkRGF0YVNldEluc3RhbmNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgdGhpcy5kYXRhU2V0RGVhY3RpdmF0ZUV2ZW50LnJhaXNlRXZlbnQobWVzc2FnZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIF9kZXByZWNhdGVkRGF0YVNldEluc3RhbmNlTWFwID0gbmV3IE1hcDxzdHJpbmcsIERlcHJlY2F0ZWRWdWZvcmlhRGF0YVNldD4oKTtcblxuICAgIC8qKlxuICAgICAqIERlcHJlY2F0ZWQuIFBsZWFzZSB1c2UgY3JlYXRlRGF0YVNldEZyb21VUkkgaW5zdGVhZC5cbiAgICAgKiBAZGVwcmVjYXRlZCBUbyBiZSByZW1vdmVkLiBcbiAgICAgKi9cbiAgICBAZGVwcmVjYXRlZCgnY3JlYXRlRGF0YVNldEZyb21VUkwnKVxuICAgIHB1YmxpYyBjcmVhdGVEYXRhU2V0KHVybD86IHN0cmluZyk6IFByb21pc2U8RGVwcmVjYXRlZFZ1Zm9yaWFEYXRhU2V0PiB7XG4gICAgICAgIGlmICh1cmwgJiYgd2luZG93LmRvY3VtZW50KSB7XG4gICAgICAgICAgICB1cmwgPSByZXNvbHZlVVJMKHVybCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMubWFuYWdlclNlc3Npb24ucmVxdWVzdDx7IGlkOiBzdHJpbmcgfT4oJ2FyLnZ1Zm9yaWEub2JqZWN0VHJhY2tlckNyZWF0ZURhdGFTZXQnLCB7IHVybCB9KS50aGVuKChtZXNzYWdlKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBkYXRhU2V0ID0gbmV3IERlcHJlY2F0ZWRWdWZvcmlhRGF0YVNldChtZXNzYWdlLmlkLCB0aGlzLm1hbmFnZXJTZXNzaW9uKTtcbiAgICAgICAgICAgIHRoaXMuX2RlcHJlY2F0ZWREYXRhU2V0SW5zdGFuY2VNYXAuc2V0KG1lc3NhZ2UuaWQsIGRhdGFTZXQpO1xuICAgICAgICAgICAgcmV0dXJuIGRhdGFTZXQ7XG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRmV0Y2ggYSBkYXRhc2V0IGZyb20gdGhlIHByb3ZpZGVkIHVybC4gXG4gICAgICogSWYgc3VjY2Vzc2Z1bGwsIHJlc29sdmVzIHRvIGFuIGlkIHdoaWNoIHJlcHJlc2VudHMgdGhlIGRhdGFzZXQuIFxuICAgICAqL1xuICAgIHB1YmxpYyBjcmVhdGVEYXRhU2V0RnJvbVVSTCh1cmw6IHN0cmluZykgOiBQcm9taXNlPFZ1Zm9yaWFEYXRhU2V0SWQ+IHtcbiAgICAgICAgaWYgKHVybCAmJiB3aW5kb3cuZG9jdW1lbnQpIHtcbiAgICAgICAgICAgIHVybCA9IHJlc29sdmVVUkwodXJsKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5tYW5hZ2VyU2Vzc2lvbi5yZXF1ZXN0PHsgaWQ6IFZ1Zm9yaWFEYXRhU2V0SWQgfT4oJ2FyLnZ1Zm9yaWEub2JqZWN0VHJhY2tlckNyZWF0ZURhdGFTZXQnLCB7IHVybCB9KVxuICAgICAgICAgICAgLnRoZW4oKG1lc3NhZ2UpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbWVzc2FnZS5pZDtcbiAgICAgICAgICAgIH0pO1xuICAgIH1cblxuICAgIEBkZXByZWNhdGVkKCdjcmVhdGVEYXRhU2V0RnJvbVVSTCcpXG4gICAgcHVibGljIGdldCBjcmVhdGVEYXRhU2V0RnJvbVVSSSgpIHsgcmV0dXJuIHRoaXMuY3JlYXRlRGF0YVNldEZyb21VUkwgfTtcblxuICAgIC8qKlxuICAgICAqIExvYWQgdGhlIGRhdGFzZXQgaW50byBtZW1vcnksIGFuZCByZXR1cm4gYSBwcm9taXNlIHdoaWNoXG4gICAgICogcmVzb2x2ZXMgdG8gdGhlIGNvbnRhaW5lZCB0cmFja2FibGVzXG4gICAgICovXG4gICAgcHVibGljIGxvYWREYXRhU2V0KGlkOiBWdWZvcmlhRGF0YVNldElkKSA6IFByb21pc2U8VnVmb3JpYVRyYWNrYWJsZXM+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWFuYWdlclNlc3Npb24ud2hlbkNvbm5lY3RlZCgpLnRoZW4oKCk9PntcbiAgICAgICAgICAgIGlmICh0aGlzLm1hbmFnZXJTZXNzaW9uLnZlcnNpb25bMF0gPT0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm1hbmFnZXJTZXNzaW9uLnJlcXVlc3Q8VnVmb3JpYVRyYWNrYWJsZXM+KCdhci52dWZvcmlhLmRhdGFTZXRMb2FkJywgeyBpZCB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzLm1hbmFnZXJTZXNzaW9uLnJlcXVlc3Q8VnVmb3JpYVRyYWNrYWJsZXM+KCdhci52dWZvcmlhLm9iamVjdFRyYWNrZXJMb2FkRGF0YVNldCcsIHsgaWQgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFVubG9hZCBhIGRhdGFzZXQgZnJvbSBtZW1vcnkgKGRlYWN0aXZhdGluZyBpdCBpZiBuZWNlc3NhcnkpXG4gICAgICovXG4gICAgcHVibGljIHVubG9hZERhdGFTZXQoaWQ6IFZ1Zm9yaWFEYXRhU2V0SWQpIDogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIHJldHVybiB0aGlzLm1hbmFnZXJTZXNzaW9uLndoZW5Db25uZWN0ZWQoKS50aGVuKCgpPT57XG4gICAgICAgICAgICBpZiAodGhpcy5tYW5hZ2VyU2Vzc2lvbi52ZXJzaW9uWzBdID09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5kZWFjdGl2YXRlRGF0YVNldChpZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5tYW5hZ2VyU2Vzc2lvbi5yZXF1ZXN0KCdhci52dWZvcmlhLm9iamVjdFRyYWNrZXJVbmxvYWREYXRhU2V0JywgeyBpZCB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogTG9hZCAoaWYgbmVjZXNzYXJ5KSBhbmQgYWN0aXZhdGUgYSBkYXRhc2V0IHRvIGVuYWJsZSB0cmFja2luZyBvZiB0aGUgY29udGFpbmVkIHRyYWNrYWJsZXNcbiAgICAgKi9cbiAgICBwdWJsaWMgYWN0aXZhdGVEYXRhU2V0KGlkOiBWdWZvcmlhRGF0YVNldElkfERlcHJlY2F0ZWRWdWZvcmlhRGF0YVNldCk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBpZCA9IChpZCBpbnN0YW5jZW9mIERlcHJlY2F0ZWRWdWZvcmlhRGF0YVNldCkgPyBpZC5pZCA6IGlkOyAvLyBiYWNrd2FyZHMgY29tcGF0YWJpbGl0eVxuICAgICAgICByZXR1cm4gdGhpcy5tYW5hZ2VyU2Vzc2lvbi5yZXF1ZXN0KCdhci52dWZvcmlhLm9iamVjdFRyYWNrZXJBY3RpdmF0ZURhdGFTZXQnLCB7IGlkIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIERlYWN0aXZhdGUgYSBsb2FkZWQgZGF0YXNldCB0byBkaXNhYmxlIHRyYWNraW5nIG9mIHRoZSBjb250YWluZWQgdHJhY2thYmxlc1xuICAgICAqL1xuICAgIHB1YmxpYyBkZWFjdGl2YXRlRGF0YVNldChpZDogVnVmb3JpYURhdGFTZXRJZHxEZXByZWNhdGVkVnVmb3JpYURhdGFTZXQpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgaWQgPSAoaWQgaW5zdGFuY2VvZiBEZXByZWNhdGVkVnVmb3JpYURhdGFTZXQpID8gaWQuaWQgOiBpZDsgLy8gYmFja3dhcmRzIGNvbXBhdGFiaWxpdHlcbiAgICAgICAgcmV0dXJuIHRoaXMubWFuYWdlclNlc3Npb24ucmVxdWVzdCgnYXIudnVmb3JpYS5vYmplY3RUcmFja2VyRGVhY3RpdmF0ZURhdGFTZXQnLCB7IGlkIH0pO1xuICAgIH1cbn1cblxuLyoqXG4gKiBBIG1hcCBmcm9tIG5hbWVzIG9mIHRyYWNrYWJsZSBkYXRhIHNldHMgdG8gdGhlaXIgaWRzLCBuYW1lcywgYW5kIHNpemVzIFRPRE9cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBWdWZvcmlhVHJhY2thYmxlcyB7XG4gICAgW25hbWU6IHN0cmluZ106IHtcbiAgICAgICAgaWQ6IHN0cmluZyxcbiAgICAgICAgc2l6ZT86IHsgeDogbnVtYmVyLCB5OiBudW1iZXIsIHo6IG51bWJlciB9XG4gICAgfVxufVxuXG5cblxuLyoqXG4gKiBAZGVwcmVjYXRlZCBUbyBiZSByZW1vdmVkLlxuICovXG5leHBvcnQgY2xhc3MgRGVwcmVjYXRlZFZ1Zm9yaWFEYXRhU2V0IHtcblxuICAgIHByaXZhdGUgX2lzQWN0aXZlID0gZmFsc2U7ICAgIFxuICAgIHByaXZhdGUgX3RyYWNrYWJsZXM6IFZ1Zm9yaWFUcmFja2FibGVzO1xuXG4gICAgY29uc3RydWN0b3IocHVibGljIGlkOiBzdHJpbmcsIHByaXZhdGUgbWFuYWdlclNlc3Npb246IFNlc3Npb25Qb3J0KSB7IH1cblxuICAgIF9vbkFjdGl2YXRlKCkge1xuICAgICAgICB0aGlzLl9pc0FjdGl2ZSA9IHRydWU7XG4gICAgfVxuXG4gICAgX29uRGVhY3RpdmF0ZSgpIHtcbiAgICAgICAgdGhpcy5faXNBY3RpdmUgPSBmYWxzZTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZmV0Y2goKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIHJldHVybiB0aGlzLm1hbmFnZXJTZXNzaW9uLnJlcXVlc3QoJ2FyLnZ1Zm9yaWEuZGF0YVNldEZldGNoJywgeyBpZDogdGhpcy5pZCB9KTtcbiAgICB9XG5cbiAgICBwdWJsaWMgbG9hZCgpOiBQcm9taXNlPFZ1Zm9yaWFUcmFja2FibGVzPiB7XG4gICAgICAgIHJldHVybiB0aGlzLm1hbmFnZXJTZXNzaW9uLnJlcXVlc3Q8VnVmb3JpYVRyYWNrYWJsZXM+KCdhci52dWZvcmlhLmRhdGFTZXRMb2FkJywgeyBpZDogdGhpcy5pZCB9KS50aGVuKCh0cmFja2FibGVzKSA9PiB7XG4gICAgICAgICAgICB0aGlzLl90cmFja2FibGVzID0gdHJhY2thYmxlcztcbiAgICAgICAgICAgIHJldHVybiB0cmFja2FibGVzO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwdWJsaWMgaXNBY3RpdmUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pc0FjdGl2ZTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0VHJhY2thYmxlcygpOiBWdWZvcmlhVHJhY2thYmxlcyB7XG4gICAgICAgIHJldHVybiB0aGlzLl90cmFja2FibGVzO1xuICAgIH1cbn0iXX0=