var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { createGuid, defined } from './cesium/cesium-imports';
import { autoinject } from 'aurelia-dependency-injection';
import { Role, Configuration } from './common';
import { deprecated, Event, MessageChannelFactory, SynchronousMessageChannel, isIOS } from './utils';
import { version } from '../package.json';
export { version };
;
var emptyObject = Object.freeze({});
/**
 * Provides two-way communication between two [[SessionPort]] instances.
 */
var SessionPort = (function () {
    function SessionPort(uri) {
        var _this = this;
        this.uri = uri;
        this.id = createGuid();
        this._connectEvent = new Event();
        /**
         * An event which fires when this port has closed
         */
        this.closeEvent = new Event();
        /**
         * An error which fires when an error occurs.
         */
        this.errorEvent = new Event();
        /**
         * A map from topic to message handler.
         */
        this.on = {};
        /**
         * If true, don't raise an error when receiving a message for an unknown topic
         */
        this.suppressErrorOnUnknownTopic = false;
        this._isOpened = false;
        this._isConnected = false;
        this._isClosed = false;
        this._shouldStringify = true;
        this._packet = [];
        this.on[SessionPort.OPEN] = function (info) {
            if (!info)
                throw new Error("Session did not provide a configuration (" + _this.uri + ")");
            if (_this._isConnected)
                throw new Error("Session has already connected! (" + _this.uri + ")");
            _this._info = info;
            _this._version = info.version || [0];
            _this._isConnected = true;
            _this._connectEvent.raiseEvent(undefined);
        };
        this.on[SessionPort.CLOSE] = function () {
            _this._isClosed = true;
            _this._isConnected = false;
            if (_this.messagePort && _this.messagePort.close)
                _this.messagePort.close();
            _this.closeEvent.raiseEvent(undefined);
        };
        this.on[SessionPort.ERROR] = function (error) {
            var e = new Error("Session Error: " + error.message);
            if (error.stack)
                e['stack'] = error.stack;
            _this.errorEvent.raiseEvent(e);
        };
        this.errorEvent.addEventListener(function (error) {
            if (_this.errorEvent.numberOfListeners === 1)
                console.error(error);
        });
    }
    Object.defineProperty(SessionPort.prototype, "connectEvent", {
        /**
         * An event which fires when a connection has been
         * established to the other [[SessionPort]].
         */
        get: function () {
            if (this._isConnected)
                throw new Error('The connectEvent only fires once and the session is already connected.');
            return this._connectEvent;
        },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(SessionPort.prototype, "info", {
        /**
         * Describes the configuration of the connected session.
         */
        get: function () {
            if (!this.isConnected) {
                throw new Error('info is not available until the session is connected.');
            }
            return this._info;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SessionPort.prototype, "version", {
        /**
         * The version of argon.js which is used by the connecting session.
         * This property is an empty array until the session connects.
         */
        get: function () {
            if (!defined(this._version)) {
                throw new Error('version is not available until the session is opened.');
            }
            return this._version;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SessionPort.prototype, "versionNumber", {
        get: function () {
            return Number(this.version[0] + '.' + this.version[1]);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Check if a protocol is supported by this session.
     */
    SessionPort.prototype.supportsProtocol = function (name, versions) {
        if (!this._isConnected)
            throw new Error('Session has not yet connected');
        var protocols = this.info.protocols;
        if (!protocols)
            return false;
        var supported = false;
        var foundAny = false;
        var foundVersions = new Set();
        protocols.forEach(function (p) {
            if (p.indexOf(name) !== -1) {
                foundAny = true;
                var v = (+p.split('@v')[1]) || 0;
                foundVersions.add(v);
            }
        });
        if (versions) {
            if (Array.isArray(versions)) {
                versions.forEach(function (v) {
                    if (foundVersions.has(v)) {
                        supported = true;
                    }
                });
            }
            else {
                if (foundVersions.has(versions)) {
                    supported = true;
                }
            }
        }
        else if (!versions) {
            supported = foundAny;
        }
        return supported;
    };
    SessionPort.prototype.whenConnected = function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            if (_this.isConnected)
                resolve();
            var remove = _this._connectEvent.addEventListener(function () {
                remove();
                resolve();
            });
        });
    };
    /**
     * Establish a connection to another [[SessionPort]] via the provided [[MessagePort]] instance.
     * @param messagePort the message port to post and receive messages.
     * @param options the configuration which describes this [[ArgonSystem]].
     */
    SessionPort.prototype.open = function (messagePort, options) {
        var _this = this;
        if (this._isClosed)
            return;
        if (this._isOpened)
            throw new Error('Session can only be opened once');
        if (!options)
            throw new Error('Session options must be provided');
        this.messagePort = messagePort;
        this._isOpened = true;
        if (messagePort instanceof SynchronousMessageChannel || isIOS) {
            this._shouldStringify = false;
        }
        this.messagePort.onmessage = function (evt) {
            if (_this._isClosed)
                return;
            var data = typeof evt.data === 'string' ? JSON.parse(evt.data) : evt.data;
            var id = data[0];
            var topic = data[1];
            var message = data[2] || emptyObject;
            var expectsResponse = data[3];
            var handler = _this.on[topic];
            if (handler && !expectsResponse) {
                try {
                    var response = handler(message, evt);
                    if (response)
                        console.warn("Handler for " + topic + " returned an unexpected response");
                }
                catch (e) {
                    _this.sendError(e);
                    _this.errorEvent.raiseEvent(e);
                }
            }
            else if (handler) {
                var response = new Promise(function (resolve) { return resolve(handler(message, evt)); });
                Promise.resolve(response).then(function (response) {
                    if (_this._isClosed)
                        return;
                    _this.send(topic + ':resolve:' + id, response);
                }).catch(function (error) {
                    if (_this._isClosed)
                        return;
                    var errorMessage;
                    if (typeof error === 'string')
                        errorMessage = error;
                    else if (typeof error.message === 'string')
                        errorMessage = error.message;
                    _this.send(topic + ':reject:' + id, { reason: errorMessage });
                });
            }
            else if (!_this.suppressErrorOnUnknownTopic) {
                var errorMessage = 'Unable to handle message for topic ' + topic + ' (to: ' + _this.uri + ')';
                if (expectsResponse) {
                    _this.send(topic + ':reject:' + id, { reason: errorMessage });
                }
                _this.errorEvent.raiseEvent(new Error(errorMessage));
            }
        };
        this.send(SessionPort.OPEN, options);
    };
    /**
     * Send a message
     * @param topic the message topic.
     * @param message the message to be sent.
     * @return Return true if the message is posted successfully,
     * return false if the session is closed.
     */
    SessionPort.prototype.send = function (topic, message) {
        if (!this._isOpened)
            throw new Error('Session must be open to send messages');
        if (this._isClosed)
            return false;
        var id = createGuid();
        var packet = this._packet;
        packet[0] = id;
        packet[1] = topic;
        packet[2] = message;
        this.messagePort.postMessage(this._shouldStringify ? JSON.stringify(packet) : packet); // http://blog.runspired.com/2016/03/15/webworker-performance-benchmarks/
        return true;
    };
    /**
     * Send an error message.
     * @param errorMessage An error message.
     * @return Return true if the error message is sent successfully,
     * otherwise, return false.
     */
    SessionPort.prototype.sendError = function (e) {
        var errorMessage = e;
        if (errorMessage instanceof Error) {
            errorMessage = {
                message: errorMessage.message,
                stack: errorMessage['stack']
            };
        }
        return this.send(SessionPort.ERROR, errorMessage);
    };
    SessionPort.prototype.request = function (topic, message) {
        var _this = this;
        if (!this._isOpened || this._isClosed)
            throw new Error('Session must be open to make requests');
        var id = createGuid();
        var resolveTopic = topic + ':resolve:' + id;
        var rejectTopic = topic + ':reject:' + id;
        var result = new Promise(function (resolve, reject) {
            _this.on[resolveTopic] = function (message) {
                delete _this.on[resolveTopic];
                delete _this.on[rejectTopic];
                resolve(message);
            };
            _this.on[rejectTopic] = function (message) {
                delete _this.on[resolveTopic];
                delete _this.on[rejectTopic];
                console.warn("Request '" + topic + "' rejected with reason:\n" + message.reason);
                reject(new Error(message.reason));
            };
        });
        var packet = [id, topic, message, true];
        this.messagePort.postMessage(isIOS ? packet : JSON.stringify(packet)); // http://blog.runspired.com/2016/03/15/webworker-performance-benchmarks/
        return result;
    };
    /**
     * Close the connection to the remote session.
     */
    SessionPort.prototype.close = function () {
        if (this._isClosed)
            return;
        if (this._isOpened) {
            this.send(SessionPort.CLOSE);
        }
        this._isClosed = true;
        this._isConnected = false;
        if (this.messagePort && this.messagePort.close)
            this.messagePort.close();
        this.closeEvent.raiseEvent(undefined);
    };
    Object.defineProperty(SessionPort.prototype, "isConnected", {
        get: function () {
            return this._isConnected;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SessionPort.prototype, "isClosed", {
        get: function () {
            return this._isClosed;
        },
        enumerable: true,
        configurable: true
    });
    SessionPort.OPEN = 'ar.session.open';
    SessionPort.CLOSE = 'ar.session.close';
    SessionPort.ERROR = 'ar.session.error';
    return SessionPort;
}());
export { SessionPort };
/**
 * A factory for creating [[SessionPort]] instances.
 */
var SessionPortFactory = (function () {
    function SessionPortFactory() {
    }
    SessionPortFactory.prototype.create = function (uri) {
        return new SessionPort(uri);
    };
    return SessionPortFactory;
}());
export { SessionPortFactory };
/**
 * A service for establishing a connection to the [[REALITY_MANAGER]].
 */
var ConnectService = (function () {
    function ConnectService() {
    }
    return ConnectService;
}());
export { ConnectService };
/**
 * A service for managing connections to other ArgonSystem instances
 */
var SessionService = (function () {
    function SessionService(
        /**
         * The configuration of this [[ArgonSystem]]
         */
        configuration, connectService, sessionPortFactory, messageChannelFactory) {
        var _this = this;
        this.configuration = configuration;
        this.connectService = connectService;
        this.sessionPortFactory = sessionPortFactory;
        this.messageChannelFactory = messageChannelFactory;
        /**
         * The port which handles communication between this session and the manager session.
         */
        this.manager = this.createSessionPort('argon:manager');
        /**
         * An event that is raised when an error occurs.
         */
        this.errorEvent = new Event();
        this._connectEvent = new Event();
        this._managedSessions = [];
        configuration.version = extractVersion(version);
        configuration.uri = (typeof window !== 'undefined' && window.location) ?
            window.location.href : undefined;
        configuration.title = configuration.title ||
            (typeof document !== 'undefined' ? document.title : undefined);
        this.errorEvent.addEventListener(function (error) {
            if (_this.errorEvent.numberOfListeners === 1)
                console.error(error);
        });
        this.manager.errorEvent.addEventListener(function (error) {
            _this.errorEvent.raiseEvent(error);
        });
        this.manager.closeEvent.addEventListener(function () {
            _this.managedSessions.forEach(function (s) {
                s.close();
            });
        });
        Object.freeze(this);
    }
    Object.defineProperty(SessionService.prototype, "connectEvent", {
        /**
         * An event that is raised when a managed session is opened.
         */
        get: function () {
            return this._connectEvent;
        },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(SessionService.prototype, "managedSessions", {
        /**
         * Manager-only. A collection of ports for each managed session.
         */
        get: function () {
            return this._managedSessions;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Establishes a connection with the [[REALITY_MANAGER]].
     * Called internally by the composition root ([[ArgonSystem]]).
     */
    SessionService.prototype.connect = function () {
        if (this.connectService && this.connectService.connect) {
            this.connectService.connect(this);
        }
        else {
            console.warn('Argon: Unable to connect to a manager session; a connect service is not available');
        }
    };
    /**
     * Manager-only. Creates a [[SessionPort]] that is managed by the current [[ArgonSystem]].
     * Session ports that are managed will automatically forward open events to
     * [[SessionService#sessionConnectEvent]] and error events to [[SessionService#errorEvent]].
     * Other services that are part of the current [[ArgonSystem]] are likely to
     * add message handlers to a newly connected [[SessionPort]].
     * @return a new [[SessionPort]] instance
     */
    SessionService.prototype.addManagedSessionPort = function (uri) {
        var _this = this;
        this.ensureIsRealityManager();
        var session = this.sessionPortFactory.create(uri);
        session.errorEvent.addEventListener(function (error) {
            _this.errorEvent.raiseEvent(error);
        });
        session.connectEvent.addEventListener(function () {
            _this.managedSessions.push(session);
            _this.connectEvent.raiseEvent(session);
        });
        session.closeEvent.addEventListener(function () {
            var index = _this.managedSessions.indexOf(session);
            if (index > -1)
                _this.managedSessions.splice(index, 1);
        });
        this.manager.closeEvent.addEventListener(function () {
            session.close();
        });
        return session;
    };
    /**
     * Creates a [[SessionPort]] that is not managed by the current [[ArgonSystem]].
     * Unmanaged session ports will not forward open events or error events
     * to this [[ArgonSystem]].
     * @return a new SessionPort instance
     */
    SessionService.prototype.createSessionPort = function (uri) {
        return this.sessionPortFactory.create(uri);
    };
    /**
     * Creates a message channel which asyncrhonously sends and receives messages.
     */
    SessionService.prototype.createMessageChannel = function () {
        return this.messageChannelFactory.create();
    };
    /**
     * Creates a message channel which syncrhonously sends and receives messages.
     */
    SessionService.prototype.createSynchronousMessageChannel = function () {
        return this.messageChannelFactory.createSynchronous();
    };
    Object.defineProperty(SessionService.prototype, "isManager", {
        /**
         * Returns true if this system represents a [[MANAGER]]
         */
        get: function () {
            return Role.isRealityManager(this.configuration && this.configuration.role);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SessionService.prototype, "isRealityManager", {
        // to be deprecated
        get: function () {
            return this.isManager;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SessionService.prototype, "isAugmenter", {
        /**
         * Returns true if this system represents a [[AUGMENTER]], meaning,
         * it is running within a [[MANAGER]]
         */
        get: function () {
            return Role.isRealityAugmenter(this.configuration && this.configuration.role);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SessionService.prototype, "isRealityAugmenter", {
        // to be deprecated
        get: function () {
            return this.isAugmenter;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SessionService.prototype, "isReality", {
        /**
         * Returns true if this system is a [[REALITY_VIEWER]]
         */
        get: function () {
            return Role.isRealityViewer(this.configuration && this.configuration.role);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SessionService.prototype, "isRealityViewer", {
        // to be deprecated
        get: function () {
            return this.isReality;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SessionService.prototype, "isApplication", {
        /**
         * @private
         */
        get: function () { return this.isRealityAugmenter; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SessionService.prototype, "isRealityView", {
        /**
         * @private
         */
        get: function () { return this.isRealityViewer; },
        enumerable: true,
        configurable: true
    });
    /**
     * Throws an error if this system is not a [[REALITY_MANAGER]]
     */
    SessionService.prototype.ensureIsRealityManager = function () {
        if (!this.isRealityManager)
            throw new Error('An reality-manager only API was accessed from a non reality-manager.');
    };
    /**
     * Throws an error if this session is not a [[REALITY_VIEWER]]
     */
    SessionService.prototype.ensureIsRealityViewer = function () {
        if (!this.isRealityViewer)
            throw new Error('An reality-viewer only API was accessed from a non reality-viewer.');
    };
    /**
     * Throws an error if this session is a [[REALITY_VIEWER]]
     */
    SessionService.prototype.ensureNotRealityViewer = function () {
        if (this.isRealityViewer)
            throw new Error('An non-permitted API was accessed from a reality-viewer.');
    };
    /**
     * Throws an error if this session is a [[REALITY_AUGMENTER]]
     */
    SessionService.prototype.ensureNotRealityAugmenter = function () {
        if (this.isRealityAugmenter)
            throw new Error('An non-permitted API was accessed from a reality-viewer.');
    };
    /**
     * Throws an error if the connection to the manager is closed
     */
    SessionService.prototype.ensureConnected = function () {
        if (!this.manager.isConnected)
            throw new Error('Session is not connected to manager');
    };
    __decorate([
        deprecated('isRealityAugmenter'),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [])
    ], SessionService.prototype, "isApplication", null);
    __decorate([
        deprecated('isRealityViewer'),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [])
    ], SessionService.prototype, "isRealityView", null);
    SessionService = __decorate([
        autoinject,
        __metadata("design:paramtypes", [Configuration,
            ConnectService,
            SessionPortFactory,
            MessageChannelFactory])
    ], SessionService);
    return SessionService;
}());
export { SessionService };
/**
 * Connect the current [[ArgonSystem]] to itself as the [[REALITY_MANAGER]].
 */
var LoopbackConnectService = (function (_super) {
    __extends(LoopbackConnectService, _super);
    function LoopbackConnectService() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Create a loopback connection.
     */
    LoopbackConnectService.prototype.connect = function (sessionService) {
        var messageChannel = sessionService.createSynchronousMessageChannel();
        var messagePort = messageChannel.port1;
        messageChannel.port2.onmessage = function (evt) {
            messageChannel.port2.postMessage(evt.data);
        };
        sessionService.manager.connectEvent.addEventListener(function () {
            sessionService.connectEvent.raiseEvent(sessionService.manager);
        });
        sessionService.manager.open(messagePort, sessionService.configuration);
    };
    return LoopbackConnectService;
}(ConnectService));
export { LoopbackConnectService };
/**
 * Connect this [[ArgonSystem]] to the [[REALITY_MANAGER]] via the parent document
 * (assuming this system is running in an iFrame).
 */
var DOMConnectService = (function (_super) {
    __extends(DOMConnectService, _super);
    function DOMConnectService() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
      * Check whether this connect method is available or not.
      */
    DOMConnectService.isAvailable = function () {
        return typeof window !== 'undefined' && typeof window.parent !== 'undefined';
    };
    /**
     * Connect to the manager.
     */
    DOMConnectService.prototype.connect = function (sessionService) {
        var messageChannel = sessionService.createMessageChannel();
        window.parent.postMessage({ type: 'ARGON_SESSION', name: window.name }, '*', [messageChannel.port1]);
        sessionService.manager.open(messageChannel.port2, sessionService.configuration);
    };
    return DOMConnectService;
}(ConnectService));
export { DOMConnectService };
/**
 * Connect this system to a remote manager for debugging.
 */
var DebugConnectService = (function (_super) {
    __extends(DebugConnectService, _super);
    function DebugConnectService() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Check whether this connect method is available or not.
     */
    DebugConnectService.isAvailable = function () {
        return typeof window !== 'undefined' &&
            !!window['__ARGON_DEBUG_PORT__'];
    };
    /**
     * Connect to the manager.
     */
    DebugConnectService.prototype.connect = function (_a) {
        var manager = _a.manager, configuration = _a.configuration;
        manager.open(window['__ARGON_DEBUG_PORT__'], configuration);
    };
    return DebugConnectService;
}(ConnectService));
export { DebugConnectService };
/**
 * Connect this system via a specified MessagePort.
 */
var SessionConnectService = (function (_super) {
    __extends(SessionConnectService, _super);
    function SessionConnectService(session, parentConfiguration) {
        var _this = _super.call(this) || this;
        _this.session = session;
        _this.parentConfiguration = parentConfiguration;
        return _this;
    }
    /**
     * Check whether this connect method is available or not.
     */
    SessionConnectService.isAvailable = function () {
        return true;
    };
    /**
     * Connect to the manager.
     */
    SessionConnectService.prototype.connect = function (sessionService) {
        var messageChannel = sessionService.createSynchronousMessageChannel();
        this.session.open(messageChannel.port1, this.parentConfiguration);
        sessionService.manager.open(messageChannel.port2, sessionService.configuration);
    };
    return SessionConnectService;
}(ConnectService));
export { SessionConnectService };
/**
 * A service which connects this system to the [[REALITY_MANAGER]] via a WKWebview message handler.
 */
var WKWebViewConnectService = (function (_super) {
    __extends(WKWebViewConnectService, _super);
    function WKWebViewConnectService() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Check whether this connect method is available or not.
     */
    WKWebViewConnectService.isAvailable = function () {
        return typeof window !== 'undefined' &&
            window['webkit'] && window['webkit'].messageHandlers;
    };
    /**
     * Connect to the manager.
     */
    WKWebViewConnectService.prototype.connect = function (sessionService) {
        var messageChannel = sessionService.createSynchronousMessageChannel();
        messageChannel.port2.onmessage = function (event) {
            webkit.messageHandlers.argon.postMessage(JSON.stringify(event.data));
        };
        window['__ARGON_PORT__'] = messageChannel.port2;
        sessionService.manager.open(messageChannel.port1, sessionService.configuration);
        window.addEventListener("beforeunload", function () {
            sessionService.manager.close();
        });
    };
    return WKWebViewConnectService;
}(ConnectService));
export { WKWebViewConnectService };
function extractVersion(versionString) {
    var parts = versionString.split('.');
    for (var i = 0, len = parts.length; i < len; ++i) {
        parts[i] = parseInt(parts[i], 10);
    }
    return parts;
}
/**
 * A service which connects this system to the [[REALITY_MANAGER]] via an Android WebView javascript interface.
 */
var AndroidWebViewConnectService = (function (_super) {
    __extends(AndroidWebViewConnectService, _super);
    function AndroidWebViewConnectService() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Check whether this connect method is available or not.
     */
    AndroidWebViewConnectService.isAvailable = function () {
        return typeof window !== 'undefined' &&
            window["__argon_android__"];
    };
    /**
     * Connect to the manager.
     */
    AndroidWebViewConnectService.prototype.connect = function (sessionService) {
        var messageChannel = sessionService.createSynchronousMessageChannel();
        messageChannel.port2.onmessage = function (event) {
            window["__argon_android__"].emit("argon", JSON.stringify(event.data));
        };
        window['__ARGON_PORT__'] = messageChannel.port2;
        sessionService.manager.open(messageChannel.port1, sessionService.configuration);
        window.addEventListener("beforeunload", function () {
            sessionService.manager.close();
        });
    };
    return AndroidWebViewConnectService;
}(ConnectService));
export { AndroidWebViewConnectService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2Vzc2lvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInNlc3Npb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDOUQsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBQzFELE9BQU8sRUFBRSxJQUFJLEVBQUUsYUFBYSxFQUFFLE1BQU0sVUFBVSxDQUFBO0FBQzlDLE9BQU8sRUFDSCxVQUFVLEVBQ1YsS0FBSyxFQUNMLHFCQUFxQixFQUdyQix5QkFBeUIsRUFDekIsS0FBSyxFQUNSLE1BQU0sU0FBUyxDQUFDO0FBRWpCLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQTtBQUN6QyxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUE7QUFJakIsQ0FBQztBQXNCRixJQUFNLFdBQVcsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFBO0FBRXJDOztHQUVHO0FBQ0g7SUE2RUkscUJBQW1CLEdBQVk7UUFBL0IsaUJBNkJDO1FBN0JrQixRQUFHLEdBQUgsR0FBRyxDQUFTO1FBM0V4QixPQUFFLEdBQUcsVUFBVSxFQUFFLENBQUM7UUFXakIsa0JBQWEsR0FBRyxJQUFJLEtBQUssRUFBYSxDQUFDO1FBRS9DOztXQUVHO1FBQ0ksZUFBVSxHQUFHLElBQUksS0FBSyxFQUFhLENBQUM7UUFFM0M7O1dBRUc7UUFDSSxlQUFVLEdBQUcsSUFBSSxLQUFLLEVBQVMsQ0FBQztRQUV2Qzs7V0FFRztRQUNJLE9BQUUsR0FBc0IsRUFBRSxDQUFDO1FBT2xDOztXQUVHO1FBQ0ksZ0NBQTJCLEdBQUcsS0FBSyxDQUFDO1FBaUNuQyxjQUFTLEdBQUcsS0FBSyxDQUFDO1FBQ2xCLGlCQUFZLEdBQUcsS0FBSyxDQUFDO1FBQ3JCLGNBQVMsR0FBRyxLQUFLLENBQUM7UUFFbEIscUJBQWdCLEdB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LENBQUMsQ0FBQTtJQUNOLENBQUM7SUFDTCxtQ0FBQztBQUFELENBQUMsQUF4QkQsQ0FBa0QsY0FBYyxHQXdCL0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjcmVhdGVHdWlkLCBkZWZpbmVkIH0gZnJvbSAnLi9jZXNpdW0vY2VzaXVtLWltcG9ydHMnO1xuaW1wb3J0IHsgYXV0b2luamVjdCB9IGZyb20gJ2F1cmVsaWEtZGVwZW5kZW5jeS1pbmplY3Rpb24nO1xuaW1wb3J0IHsgUm9sZSwgQ29uZmlndXJhdGlvbiB9IGZyb20gJy4vY29tbW9uJ1xuaW1wb3J0IHsgXG4gICAgZGVwcmVjYXRlZCxcbiAgICBFdmVudCwgXG4gICAgTWVzc2FnZUNoYW5uZWxGYWN0b3J5LCBcbiAgICBNZXNzYWdlUG9ydExpa2UsIFxuICAgIE1lc3NhZ2VDaGFubmVsTGlrZSxcbiAgICBTeW5jaHJvbm91c01lc3NhZ2VDaGFubmVsLFxuICAgIGlzSU9TXG59IGZyb20gJy4vdXRpbHMnO1xuXG5pbXBvcnQgeyB2ZXJzaW9uIH0gZnJvbSAnLi4vcGFja2FnZS5qc29uJ1xuZXhwb3J0IHsgdmVyc2lvbiB9XG5cbmV4cG9ydCBpbnRlcmZhY2UgTWVzc2FnZSB7XG4gICAgW2tleTogc3RyaW5nXTogYW55XG59O1xuXG4vKipcbiAqIEEgY2FsbGJhY2sgZm9yIG1lc3NhZ2UgZXZlbnRzLiAgXG4gKi9cbmV4cG9ydCB0eXBlIE1lc3NhZ2VIYW5kbGVyID0gKG1lc3NhZ2U6IE1lc3NhZ2UsIGV2ZW50OiBNZXNzYWdlRXZlbnQpID0+IHZvaWQgfCBQcm9taXNlPHZvaWQgfCBNZXNzYWdlPjtcblxuLyoqXG4gKiBEZXNjcmliZXMgYSBtYXAgZnJvbSBtZXNzYWdlIHRvcGljIHRvIE1lc3NhZ2VIYW5kbGVyLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIE1lc3NhZ2VIYW5kbGVyTWFwIHtcbiAgICBbdG9waWM6IHN0cmluZ106IE1lc3NhZ2VIYW5kbGVyXG59XG5cbi8qKlxuICogRGVzY3JpYmVzIGFuIGVycm9yIG1lc3NhZ2UuIFxuICovXG5leHBvcnQgaW50ZXJmYWNlIEVycm9yTWVzc2FnZSB7XG4gICAgbWVzc2FnZTogc3RyaW5nXG4gICAgc3RhY2s/OiBzdHJpbmdcbn1cblxuY29uc3QgZW1wdHlPYmplY3QgPSBPYmplY3QuZnJlZXplKHt9KVxuXG4vKipcbiAqIFByb3ZpZGVzIHR3by13YXkgY29tbXVuaWNhdGlvbiBiZXR3ZWVuIHR3byBbW1Nlc3Npb25Qb3J0XV0gaW5zdGFuY2VzLlxuICovXG5leHBvcnQgY2xhc3MgU2Vzc2lvblBvcnQge1xuXG4gICAgcHVibGljIGlkID0gY3JlYXRlR3VpZCgpO1xuXG4gICAgLyoqXG4gICAgICogQW4gZXZlbnQgd2hpY2ggZmlyZXMgd2hlbiBhIGNvbm5lY3Rpb24gaGFzIGJlZW4gXG4gICAgICogZXN0YWJsaXNoZWQgdG8gdGhlIG90aGVyIFtbU2Vzc2lvblBvcnRdXS5cbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0IGNvbm5lY3RFdmVudCgpIHtcbiAgICAgICAgaWYgKHRoaXMuX2lzQ29ubmVjdGVkKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdUaGUgY29ubmVjdEV2ZW50IG9ubHkgZmlyZXMgb25jZSBhbmQgdGhlIHNlc3Npb24gaXMgYWxyZWFkeSBjb25uZWN0ZWQuJylcbiAgICAgICAgcmV0dXJuIHRoaXMuX2Nvbm5lY3RFdmVudDtcbiAgICB9O1xuICAgIHByaXZhdGUgX2Nvbm5lY3RFdmVudCA9IG5ldyBFdmVudDx1bmRlZmluZWQ+KCk7XG5cbiAgICAvKipcbiAgICAgKiBBbiBldmVudCB3aGljaCBmaXJlcyB3aGVuIHRoaXMgcG9ydCBoYXMgY2xvc2VkXG4gICAgICovXG4gICAgcHVibGljIGNsb3NlRXZlbnQgPSBuZXcgRXZlbnQ8dW5kZWZpbmVkPigpO1xuXG4gICAgLyoqXG4gICAgICogQW4gZXJyb3Igd2hpY2ggZmlyZXMgd2hlbiBhbiBlcnJvciBvY2N1cnMuXG4gICAgICovXG4gICAgcHVibGljIGVycm9yRXZlbnQgPSBuZXcgRXZlbnQ8RXJyb3I+KCk7XG5cbiAgICAvKipcbiAgICAgKiBBIG1hcCBmcm9tIHRvcGljIHRvIG1lc3NhZ2UgaGFuZGxlci5cbiAgICAgKi9cbiAgICBwdWJsaWMgb246IE1lc3NhZ2VIYW5kbGVyTWFwID0ge307XG5cbiAgICAvKipcbiAgICAgKiBUaGUgbWVzc2FnZSBwb3J0IHVzZWQgdG8gcG9zdCBhbmQgcmVjZWl2ZSBtZXNzYWdlcy5cbiAgICAgKi9cbiAgICBwdWJsaWMgbWVzc2FnZVBvcnQ6IE1lc3NhZ2VQb3J0TGlrZTtcblxuICAgIC8qKlxuICAgICAqIElmIHRydWUsIGRvbid0IHJhaXNlIGFuIGVycm9yIHdoZW4gcmVjZWl2aW5nIGEgbWVzc2FnZSBmb3IgYW4gdW5rbm93biB0b3BpY1xuICAgICAqL1xuICAgIHB1YmxpYyBzdXBwcmVzc0Vycm9yT25Vbmtub3duVG9waWMgPSBmYWxzZTtcblxuICAgIC8qKlxuICAgICAqIERlc2NyaWJlcyB0aGUgY29uZmlndXJhdGlvbiBvZiB0aGUgY29ubmVjdGVkIHNlc3Npb24uIFxuICAgICAqL1xuICAgIHB1YmxpYyBnZXQgaW5mbygpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzQ29ubmVjdGVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2luZm8gaXMgbm90IGF2YWlsYWJsZSB1bnRpbCB0aGUgc2Vzc2lvbiBpcyBjb25uZWN0ZWQuJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX2luZm87XG4gICAgfVxuICAgIHByaXZhdGUgX2luZm86IENvbmZpZ3VyYXRpb247XG5cbiAgICAvKipcbiAgICAgKiBUaGUgdmVyc2lvbiBvZiBhcmdvbi5qcyB3aGljaCBpcyB1c2VkIGJ5IHRoZSBjb25uZWN0aW5nIHNlc3Npb24uXG4gICAgICogVGhpcyBwcm9wZXJ0eSBpcyBhbiBlbXB0eSBhcnJheSB1bnRpbCB0aGUgc2Vzc2lvbiBjb25uZWN0cy5cbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0IHZlcnNpb24oKSB7XG4gICAgICAgIGlmICghZGVmaW5lZCh0aGlzLl92ZXJzaW9uKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCd2ZXJzaW9uIGlzIG5vdCBhdmFpbGFibGUgdW50aWwgdGhlIHNlc3Npb24gaXMgb3BlbmVkLicpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl92ZXJzaW9uO1xuICAgIH1cbiAgICBwcml2YXRlIF92ZXJzaW9uOiBudW1iZXJbXTtcblxuICAgIHB1YmxpYyBnZXQgdmVyc2lvbk51bWJlcigpIHtcbiAgICAgICAgcmV0dXJuIE51bWJlcih0aGlzLnZlcnNpb25bMF0gKyAnLicgKyB0aGlzLnZlcnNpb25bMV0pO1xuICAgIH1cblxuICAgIHB1YmxpYyBzdGF0aWMgT1BFTiA9ICdhci5zZXNzaW9uLm9wZW4nO1xuICAgIHB1YmxpYyBzdGF0aWMgQ0xPU0UgPSAnYXIuc2Vzc2lvbi5jbG9zZSc7XG4gICAgcHVibGljIHN0YXRpYyBFUlJPUiA9ICdhci5zZXNzaW9uLmVycm9yJztcblxuICAgIHByaXZhdGUgX2lzT3BlbmVkID0gZmFsc2U7XG4gICAgcHJpdmF0ZSBfaXNDb25uZWN0ZWQgPSBmYWxzZTtcbiAgICBwcml2YXRlIF9pc0Nsb3NlZCA9IGZhbHNlO1xuXG4gICAgcHJpdmF0ZSBfc2hvdWxkU3RyaW5naWZ5ID0gdHJ1ZTtcblxuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyB1cmk/OiBzdHJpbmcpIHtcblxuICAgICAgICB0aGlzLm9uW1Nlc3Npb25Qb3J0Lk9QRU5dID0gKGluZm86IENvbmZpZ3VyYXRpb24pID0+IHtcbiAgICAgICAgICAgIGlmICghaW5mbykgdGhyb3cgbmV3IEVycm9yKGBTZXNzaW9uIGRpZCBub3QgcHJvdmlkZSBhIGNvbmZpZ3VyYXRpb24gKCR7dGhpcy51cml9KWApO1xuICAgICAgICAgICAgaWYgKHRoaXMuX2lzQ29ubmVjdGVkKSB0aHJvdyBuZXcgRXJyb3IoYFNlc3Npb24gaGFzIGFscmVhZHkgY29ubmVjdGVkISAoJHt0aGlzLnVyaX0pYCk7XG4gICAgICAgICAgICB0aGlzLl9pbmZvID0gaW5mbztcbiAgICAgICAgICAgIHRoaXMuX3ZlcnNpb24gPSBpbmZvLnZlcnNpb24gfHwgWzBdO1xuICAgICAgICAgICAgdGhpcy5faXNDb25uZWN0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5fY29ubmVjdEV2ZW50LnJhaXNlRXZlbnQodW5kZWZpbmVkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMub25bU2Vzc2lvblBvcnQuQ0xPU0VdID0gKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5faXNDbG9zZWQgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5faXNDb25uZWN0ZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIGlmICh0aGlzLm1lc3NhZ2VQb3J0ICYmIHRoaXMubWVzc2FnZVBvcnQuY2xvc2UpXG4gICAgICAgICAgICAgICAgdGhpcy5tZXNzYWdlUG9ydC5jbG9zZSgpO1xuICAgICAgICAgICAgdGhpcy5jbG9zZUV2ZW50LnJhaXNlRXZlbnQodW5kZWZpbmVkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMub25bU2Vzc2lvblBvcnQuRVJST1JdID0gKGVycm9yOiBFcnJvck1lc3NhZ2UpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGUgPSBuZXcgRXJyb3IoXCJTZXNzaW9uIEVycm9yOiBcIiArIGVycm9yLm1lc3NhZ2UpO1xuICAgICAgICAgICAgaWYgKGVycm9yLnN0YWNrKSBlWydzdGFjayddID0gZXJyb3Iuc3RhY2s7XG4gICAgICAgICAgICB0aGlzLmVycm9yRXZlbnQucmFpc2VFdmVudChlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuZXJyb3JFdmVudC5hZGRFdmVudExpc3RlbmVyKChlcnJvcikgPT4ge1xuICAgICAgICAgICAgaWYgKHRoaXMuZXJyb3JFdmVudC5udW1iZXJPZkxpc3RlbmVycyA9PT0gMSkgY29uc29sZS5lcnJvcihlcnJvcik7XG4gICAgICAgIH0pXG5cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVjayBpZiBhIHByb3RvY29sIGlzIHN1cHBvcnRlZCBieSB0aGlzIHNlc3Npb24uXG4gICAgICovXG4gICAgc3VwcG9ydHNQcm90b2NvbChuYW1lOiBzdHJpbmcsIHZlcnNpb25zPzogbnVtYmVyIHwgbnVtYmVyW10pOiBib29sZWFuIHtcbiAgICAgICAgaWYgKCF0aGlzLl9pc0Nvbm5lY3RlZCkgdGhyb3cgbmV3IEVycm9yKCdTZXNzaW9uIGhhcyBub3QgeWV0IGNvbm5lY3RlZCcpO1xuICAgICAgICBjb25zdCBwcm90b2NvbHMgPSB0aGlzLmluZm8ucHJvdG9jb2xzO1xuICAgICAgICBpZiAoIXByb3RvY29scykgcmV0dXJuIGZhbHNlO1xuICAgICAgICBsZXQgc3VwcG9ydGVkID0gZmFsc2U7XG4gICAgICAgIGxldCBmb3VuZEFueSA9IGZhbHNlO1xuICAgICAgICBjb25zdCBmb3VuZFZlcnNpb25zID0gbmV3IFNldDxudW1iZXI+KCk7XG4gICAgICAgIHByb3RvY29scy5mb3JFYWNoKChwKSA9PiB7XG4gICAgICAgICAgICBpZiAocC5pbmRleE9mKG5hbWUpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgIGZvdW5kQW55ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBjb25zdCB2ID0gKCtwLnNwbGl0KCdAdicpWzFdKSB8fCAwO1xuICAgICAgICAgICAgICAgIGZvdW5kVmVyc2lvbnMuYWRkKHYpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKHZlcnNpb25zKSB7XG4gICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh2ZXJzaW9ucykpIHtcbiAgICAgICAgICAgICAgICB2ZXJzaW9ucy5mb3JFYWNoKCh2KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChmb3VuZFZlcnNpb25zLmhhcyh2KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3VwcG9ydGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmIChmb3VuZFZlcnNpb25zLmhhcyh2ZXJzaW9ucykpIHtcbiAgICAgICAgICAgICAgICAgICAgc3VwcG9ydGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoIXZlcnNpb25zKSB7XG4gICAgICAgICAgICBzdXBwb3J0ZWQgPSBmb3VuZEFueTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3VwcG9ydGVkO1xuICAgIH1cbiAgICBcbiAgICBwdWJsaWMgd2hlbkNvbm5lY3RlZCgpIDogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZTx2b2lkPigocmVzb2x2ZSwgcmVqZWN0KT0+e1xuICAgICAgICAgICAgaWYgKHRoaXMuaXNDb25uZWN0ZWQpIHJlc29sdmUoKTtcbiAgICAgICAgICAgIGxldCByZW1vdmUgPSB0aGlzLl9jb25uZWN0RXZlbnQuYWRkRXZlbnRMaXN0ZW5lcigoKT0+e1xuICAgICAgICAgICAgICAgIHJlbW92ZSgpO1xuICAgICAgICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEVzdGFibGlzaCBhIGNvbm5lY3Rpb24gdG8gYW5vdGhlciBbW1Nlc3Npb25Qb3J0XV0gdmlhIHRoZSBwcm92aWRlZCBbW01lc3NhZ2VQb3J0XV0gaW5zdGFuY2UuXG4gICAgICogQHBhcmFtIG1lc3NhZ2VQb3J0IHRoZSBtZXNzYWdlIHBvcnQgdG8gcG9zdCBhbmQgcmVjZWl2ZSBtZXNzYWdlcy5cbiAgICAgKiBAcGFyYW0gb3B0aW9ucyB0aGUgY29uZmlndXJhdGlvbiB3aGljaCBkZXNjcmliZXMgdGhpcyBbW0FyZ29uU3lzdGVtXV0uXG4gICAgICovXG4gICAgb3BlbihtZXNzYWdlUG9ydDogTWVzc2FnZVBvcnRMaWtlLCBvcHRpb25zOiBDb25maWd1cmF0aW9uKSB7XG4gICAgICAgIGlmICh0aGlzLl9pc0Nsb3NlZCkgcmV0dXJuO1xuICAgICAgICBpZiAodGhpcy5faXNPcGVuZWQpIHRocm93IG5ldyBFcnJvcignU2Vzc2lvbiBjYW4gb25seSBiZSBvcGVuZWQgb25jZScpO1xuICAgICAgICBpZiAoIW9wdGlvbnMpIHRocm93IG5ldyBFcnJvcignU2Vzc2lvbiBvcHRpb25zIG11c3QgYmUgcHJvdmlkZWQnKTtcbiAgICAgICAgdGhpcy5tZXNzYWdlUG9ydCA9IG1lc3NhZ2VQb3J0O1xuICAgICAgICB0aGlzLl9pc09wZW5lZCA9IHRydWU7XG5cbiAgICAgICAgaWYgKG1lc3NhZ2VQb3J0IGluc3RhbmNlb2YgU3luY2hyb25vdXNNZXNzYWdlQ2hhbm5lbCB8fCBpc0lPUykge1xuICAgICAgICAgICAgdGhpcy5fc2hvdWxkU3RyaW5naWZ5ID0gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLm1lc3NhZ2VQb3J0Lm9ubWVzc2FnZSA9IChldnQ6IE1lc3NhZ2VFdmVudCkgPT4ge1xuICAgICAgICAgICAgaWYgKHRoaXMuX2lzQ2xvc2VkKSByZXR1cm47XG5cbiAgICAgICAgICAgIGNvbnN0IGRhdGEgPSB0eXBlb2YgZXZ0LmRhdGEgPT09ICdzdHJpbmcnID8gSlNPTi5wYXJzZShldnQuZGF0YSkgOiBldnQuZGF0YTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgY29uc3QgaWQgPSBkYXRhWzBdO1xuICAgICAgICAgICAgY29uc3QgdG9waWMgPSBkYXRhWzFdO1xuICAgICAgICAgICAgY29uc3QgbWVzc2FnZSA9IGRhdGFbMl0gfHwgZW1wdHlPYmplY3Q7XG4gICAgICAgICAgICBjb25zdCBleHBlY3RzUmVzcG9uc2UgPSBkYXRhWzNdO1xuICAgICAgICAgICAgY29uc3QgaGFuZGxlciA9IHRoaXMub25bdG9waWNdO1xuXG4gICAgICAgICAgICBpZiAoaGFuZGxlciAmJiAhZXhwZWN0c1Jlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBoYW5kbGVyKG1lc3NhZ2UsIGV2dCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZSkgY29uc29sZS53YXJuKFwiSGFuZGxlciBmb3IgXCIgKyB0b3BpYyArIFwiIHJldHVybmVkIGFuIHVuZXhwZWN0ZWQgcmVzcG9uc2VcIik7XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNlbmRFcnJvcihlKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lcnJvckV2ZW50LnJhaXNlRXZlbnQoZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmIChoYW5kbGVyKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gcmVzb2x2ZSg8YW55PmhhbmRsZXIobWVzc2FnZSwgZXZ0KSkpO1xuICAgICAgICAgICAgICAgIFByb21pc2UucmVzb2x2ZShyZXNwb25zZSkudGhlbihyZXNwb25zZSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9pc0Nsb3NlZCkgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNlbmQodG9waWMgKyAnOnJlc29sdmU6JyArIGlkLCByZXNwb25zZSlcbiAgICAgICAgICAgICAgICB9KS5jYXRjaChlcnJvciA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9pc0Nsb3NlZCkgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICBsZXQgZXJyb3JNZXNzYWdlOiBzdHJpbmcgfCB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZXJyb3IgPT09ICdzdHJpbmcnKSBlcnJvck1lc3NhZ2UgPSBlcnJvcjtcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIGVycm9yLm1lc3NhZ2UgPT09ICdzdHJpbmcnKSBlcnJvck1lc3NhZ2UgPSBlcnJvci5tZXNzYWdlO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNlbmQodG9waWMgKyAnOnJlamVjdDonICsgaWQsIHsgcmVhc29uOiBlcnJvck1lc3NhZ2UgfSlcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfSBlbHNlIGlmICghdGhpcy5zdXBwcmVzc0Vycm9yT25Vbmtub3duVG9waWMpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBlcnJvck1lc3NhZ2UgPSAnVW5hYmxlIHRvIGhhbmRsZSBtZXNzYWdlIGZvciB0b3BpYyAnICsgdG9waWMgKyAnICh0bzogJyArIHRoaXMudXJpICsgJyknO1xuICAgICAgICAgICAgICAgIGlmIChleHBlY3RzUmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZW5kKHRvcGljICsgJzpyZWplY3Q6JyArIGlkLCB7IHJlYXNvbjogZXJyb3JNZXNzYWdlIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLmVycm9yRXZlbnQucmFpc2VFdmVudChuZXcgRXJyb3IoZXJyb3JNZXNzYWdlKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnNlbmQoU2Vzc2lvblBvcnQuT1BFTiwgb3B0aW9ucylcbiAgICB9XG5cbiAgICBwcml2YXRlIF9wYWNrZXQgPSA8W3N0cmluZywgc3RyaW5nLCBNZXNzYWdlfHVuZGVmaW5lZHx2b2lkXT48YW55PltdO1xuXG4gICAgLyoqXG4gICAgICogU2VuZCBhIG1lc3NhZ2UgXG4gICAgICogQHBhcmFtIHRvcGljIHRoZSBtZXNzYWdlIHRvcGljLlxuICAgICAqIEBwYXJhbSBtZXNzYWdlIHRoZSBtZXNzYWdlIHRvIGJlIHNlbnQuXG4gICAgICogQHJldHVybiBSZXR1cm4gdHJ1ZSBpZiB0aGUgbWVzc2FnZSBpcyBwb3N0ZWQgc3VjY2Vzc2Z1bGx5LFxuICAgICAqIHJldHVybiBmYWxzZSBpZiB0aGUgc2Vzc2lvbiBpcyBjbG9zZWQuXG4gICAgICovXG4gICAgc2VuZCh0b3BpYzogc3RyaW5nLCBtZXNzYWdlPzogdm9pZCB8IE1lc3NhZ2UpOiBib29sZWFuIHtcbiAgICAgICAgaWYgKCF0aGlzLl9pc09wZW5lZCkgdGhyb3cgbmV3IEVycm9yKCdTZXNzaW9uIG11c3QgYmUgb3BlbiB0byBzZW5kIG1lc3NhZ2VzJyk7XG4gICAgICAgIGlmICh0aGlzLl9pc0Nsb3NlZCkgcmV0dXJuIGZhbHNlO1xuICAgICAgICBjb25zdCBpZCA9IGNyZWF0ZUd1aWQoKTtcbiAgICAgICAgY29uc3QgcGFja2V0ID0gdGhpcy5fcGFja2V0O1xuICAgICAgICBwYWNrZXRbMF0gPSBpZDtcbiAgICAgICAgcGFja2V0WzFdID0gdG9waWNcbiAgICAgICAgcGFja2V0WzJdID0gbWVzc2FnZTtcbiAgICAgICAgdGhpcy5tZXNzYWdlUG9ydC5wb3N0TWVzc2FnZSh0aGlzLl9zaG91bGRTdHJpbmdpZnkgPyBKU09OLnN0cmluZ2lmeShwYWNrZXQpIDogcGFja2V0KTsgLy8gaHR0cDovL2Jsb2cucnVuc3BpcmVkLmNvbS8yMDE2LzAzLzE1L3dlYndvcmtlci1wZXJmb3JtYW5jZS1iZW5jaG1hcmtzL1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZW5kIGFuIGVycm9yIG1lc3NhZ2UuXG4gICAgICogQHBhcmFtIGVycm9yTWVzc2FnZSBBbiBlcnJvciBtZXNzYWdlLlxuICAgICAqIEByZXR1cm4gUmV0dXJuIHRydWUgaWYgdGhlIGVycm9yIG1lc3NhZ2UgaXMgc2VudCBzdWNjZXNzZnVsbHksXG4gICAgICogb3RoZXJ3aXNlLCByZXR1cm4gZmFsc2UuXG4gICAgICovXG4gICAgc2VuZEVycm9yKGU6IEVycm9yTWVzc2FnZSB8IEVycm9yKTogYm9vbGVhbiB7XG4gICAgICAgIGxldCBlcnJvck1lc3NhZ2U6IEVycm9yTWVzc2FnZSA9IGU7XG4gICAgICAgIGlmIChlcnJvck1lc3NhZ2UgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgICAgICAgZXJyb3JNZXNzYWdlID0ge1xuICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGVycm9yTWVzc2FnZS5tZXNzYWdlLFxuICAgICAgICAgICAgICAgIHN0YWNrOiBlcnJvck1lc3NhZ2VbJ3N0YWNrJ11cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5zZW5kKFNlc3Npb25Qb3J0LkVSUk9SLCBlcnJvck1lc3NhZ2UpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNlbmQgYSByZXF1ZXN0IGFuZCByZXR1cm4gYSBwcm9taXNlIGZvciB0aGUgcmVzdWx0LlxuICAgICAqIEBwYXJhbSB0b3BpYyB0aGUgbWVzc2FnZSB0b3BpYy5cbiAgICAgKiBAcGFyYW0gbWVzc2FnZSB0aGUgbWVzc2FnZSB0byBiZSBzZW50LlxuICAgICAqIEByZXR1cm4gaWYgdGhlIHNlc3Npb24gaXMgbm90IG9wZW5lZCBvciBpcyBjbG9zZWQsIHJldHVybiBhIHJlamVjdGVkIHByb21pc2UsXG4gICAgICogT3RoZXJ3aXNlLCB0aGUgcmV0dXJuZWQgcHJvbWlzZSBpcyByZXNvbHZlZCBvciByZWplY3RlZCBiYXNlZCBvbiB0aGUgcmVzcG9uc2UuXG4gICAgICovICAgIFxuICAgIHJlcXVlc3QodG9waWM6IHN0cmluZywgbWVzc2FnZT86IE1lc3NhZ2UpOiBQcm9taXNlPHZvaWQ+XG4gICAgcmVxdWVzdDxUIGV4dGVuZHMgTWVzc2FnZT4odG9waWM6IHN0cmluZywgbWVzc2FnZT86IE1lc3NhZ2UpIDogUHJvbWlzZTxUPjtcbiAgICByZXF1ZXN0KHRvcGljOiBzdHJpbmcsIG1lc3NhZ2U/OiBNZXNzYWdlKSA6IFByb21pc2U8dm9pZHxNZXNzYWdlPiB7XG4gICAgICAgIGlmICghdGhpcy5faXNPcGVuZWQgfHwgdGhpcy5faXNDbG9zZWQpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Nlc3Npb24gbXVzdCBiZSBvcGVuIHRvIG1ha2UgcmVxdWVzdHMnKTtcbiAgICAgICAgY29uc3QgaWQgPSBjcmVhdGVHdWlkKCk7XG4gICAgICAgIGNvbnN0IHJlc29sdmVUb3BpYyA9IHRvcGljICsgJzpyZXNvbHZlOicgKyBpZDtcbiAgICAgICAgY29uc3QgcmVqZWN0VG9waWMgPSB0b3BpYyArICc6cmVqZWN0OicgKyBpZDtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5vbltyZXNvbHZlVG9waWNdID0gKG1lc3NhZ2UpID0+IHtcbiAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy5vbltyZXNvbHZlVG9waWNdO1xuICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLm9uW3JlamVjdFRvcGljXTtcbiAgICAgICAgICAgICAgICByZXNvbHZlKG1lc3NhZ2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5vbltyZWplY3RUb3BpY10gPSAobWVzc2FnZTogeyByZWFzb246IHN0cmluZyB9KSA9PiB7XG4gICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMub25bcmVzb2x2ZVRvcGljXTtcbiAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy5vbltyZWplY3RUb3BpY107XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKFwiUmVxdWVzdCAnXCIgKyB0b3BpYyArIFwiJyByZWplY3RlZCB3aXRoIHJlYXNvbjpcXG5cIiArIG1lc3NhZ2UucmVhc29uKTtcbiAgICAgICAgICAgICAgICByZWplY3QobmV3IEVycm9yKG1lc3NhZ2UucmVhc29uKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICAgIGNvbnN0IHBhY2tldCA9IFtpZCwgdG9waWMsIG1lc3NhZ2UsIHRydWVdO1xuICAgICAgICB0aGlzLm1lc3NhZ2VQb3J0LnBvc3RNZXNzYWdlKGlzSU9TID8gcGFja2V0IDogSlNPTi5zdHJpbmdpZnkocGFja2V0KSk7IC8vIGh0dHA6Ly9ibG9nLnJ1bnNwaXJlZC5jb20vMjAxNi8wMy8xNS93ZWJ3b3JrZXItcGVyZm9ybWFuY2UtYmVuY2htYXJrcy9cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDbG9zZSB0aGUgY29ubmVjdGlvbiB0byB0aGUgcmVtb3RlIHNlc3Npb24uXG4gICAgICovXG4gICAgY2xvc2UoKSB7XG4gICAgICAgIGlmICh0aGlzLl9pc0Nsb3NlZCkgcmV0dXJuO1xuICAgICAgICBpZiAodGhpcy5faXNPcGVuZWQpIHtcbiAgICAgICAgICAgIHRoaXMuc2VuZChTZXNzaW9uUG9ydC5DTE9TRSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5faXNDbG9zZWQgPSB0cnVlO1xuICAgICAgICB0aGlzLl9pc0Nvbm5lY3RlZCA9IGZhbHNlO1xuICAgICAgICBpZiAodGhpcy5tZXNzYWdlUG9ydCAmJiB0aGlzLm1lc3NhZ2VQb3J0LmNsb3NlKVxuICAgICAgICAgICAgdGhpcy5tZXNzYWdlUG9ydC5jbG9zZSgpO1xuICAgICAgICB0aGlzLmNsb3NlRXZlbnQucmFpc2VFdmVudCh1bmRlZmluZWQpO1xuICAgIH1cblxuICAgIGdldCBpc0Nvbm5lY3RlZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lzQ29ubmVjdGVkO1xuICAgIH1cblxuICAgIGdldCBpc0Nsb3NlZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lzQ2xvc2VkO1xuICAgIH1cbn1cblxuXG4vKipcbiAqIEEgZmFjdG9yeSBmb3IgY3JlYXRpbmcgW1tTZXNzaW9uUG9ydF1dIGluc3RhbmNlcy4gXG4gKi9cbmV4cG9ydCBjbGFzcyBTZXNzaW9uUG9ydEZhY3Rvcnkge1xuICAgIHB1YmxpYyBjcmVhdGUodXJpPzogc3RyaW5nKSA6IFNlc3Npb25Qb3J0IHtcbiAgICAgICAgcmV0dXJuIG5ldyBTZXNzaW9uUG9ydCh1cmkpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBBIHNlcnZpY2UgZm9yIGVzdGFibGlzaGluZyBhIGNvbm5lY3Rpb24gdG8gdGhlIFtbUkVBTElUWV9NQU5BR0VSXV0uXG4gKi9cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBDb25uZWN0U2VydmljZSB7XG4gICAgLyoqXG4gICAgICogQ29ubmVjdCB0byB0aGUgcmVhbGl0eSBtYW5hZ2VyLlxuICAgICAqL1xuICAgIGFic3RyYWN0IGNvbm5lY3Qoc2Vzc2lvblNlcnZpY2U6IFNlc3Npb25TZXJ2aWNlKTogdm9pZDtcbn1cblxuLyoqXG4gKiBBIHNlcnZpY2UgZm9yIG1hbmFnaW5nIGNvbm5lY3Rpb25zIHRvIG90aGVyIEFyZ29uU3lzdGVtIGluc3RhbmNlc1xuICovXG5AYXV0b2luamVjdFxuZXhwb3J0IGNsYXNzIFNlc3Npb25TZXJ2aWNlIHtcblxuICAgIC8qKlxuICAgICAqIFRoZSBwb3J0IHdoaWNoIGhhbmRsZXMgY29tbXVuaWNhdGlvbiBiZXR3ZWVuIHRoaXMgc2Vzc2lvbiBhbmQgdGhlIG1hbmFnZXIgc2Vzc2lvbi5cbiAgICAgKi9cbiAgICBwdWJsaWMgbWFuYWdlciA9IHRoaXMuY3JlYXRlU2Vzc2lvblBvcnQoJ2FyZ29uOm1hbmFnZXInKTtcblxuICAgIC8qKlxuICAgICAqIEFuIGV2ZW50IHRoYXQgaXMgcmFpc2VkIHdoZW4gYW4gZXJyb3Igb2NjdXJzLlxuICAgICAqL1xuICAgIHB1YmxpYyBlcnJvckV2ZW50ID0gbmV3IEV2ZW50PEVycm9yPigpO1xuXG4gICAgLyoqXG4gICAgICogQW4gZXZlbnQgdGhhdCBpcyByYWlzZWQgd2hlbiBhIG1hbmFnZWQgc2Vzc2lvbiBpcyBvcGVuZWQuXG4gICAgICovXG4gICAgcHVibGljIGdldCBjb25uZWN0RXZlbnQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jb25uZWN0RXZlbnQ7XG4gICAgfTtcbiAgICBwcml2YXRlIF9jb25uZWN0RXZlbnQgPSBuZXcgRXZlbnQ8U2Vzc2lvblBvcnQ+KCk7XG5cbiAgICAvKipcbiAgICAgKiBNYW5hZ2VyLW9ubHkuIEEgY29sbGVjdGlvbiBvZiBwb3J0cyBmb3IgZWFjaCBtYW5hZ2VkIHNlc3Npb24uXG4gICAgICovXG4gICAgcHVibGljIGdldCBtYW5hZ2VkU2Vzc2lvbnMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9tYW5hZ2VkU2Vzc2lvbnM7XG4gICAgfVxuICAgIHByaXZhdGUgX21hbmFnZWRTZXNzaW9uczogU2Vzc2lvblBvcnRbXSA9IFtdO1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgY29uZmlndXJhdGlvbiBvZiB0aGlzIFtbQXJnb25TeXN0ZW1dXVxuICAgICAgICAgKi9cbiAgICAgICAgcHVibGljIGNvbmZpZ3VyYXRpb246IENvbmZpZ3VyYXRpb24sXG4gICAgICAgIHByaXZhdGUgY29ubmVjdFNlcnZpY2U6IENvbm5lY3RTZXJ2aWNlLFxuICAgICAgICBwcml2YXRlIHNlc3Npb25Qb3J0RmFjdG9yeTogU2Vzc2lvblBvcnRGYWN0b3J5LFxuICAgICAgICBwcml2YXRlIG1lc3NhZ2VDaGFubmVsRmFjdG9yeTogTWVzc2FnZUNoYW5uZWxGYWN0b3J5KSB7XG5cbiAgICAgICAgY29uZmlndXJhdGlvbi52ZXJzaW9uID0gZXh0cmFjdFZlcnNpb24odmVyc2lvbik7XG4gICAgICAgIGNvbmZpZ3VyYXRpb24udXJpID0gKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5sb2NhdGlvbikgP1xuICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgOiB1bmRlZmluZWQ7XG4gICAgICAgIGNvbmZpZ3VyYXRpb24udGl0bGUgPSBjb25maWd1cmF0aW9uLnRpdGxlIHx8IFxuICAgICAgICAgICAgKHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcgPyBkb2N1bWVudC50aXRsZSA6IHVuZGVmaW5lZCk7XG5cbiAgICAgICAgdGhpcy5lcnJvckV2ZW50LmFkZEV2ZW50TGlzdGVuZXIoKGVycm9yKSA9PiB7XG4gICAgICAgICAgICBpZiAodGhpcy5lcnJvckV2ZW50Lm51bWJlck9mTGlzdGVuZXJzID09PSAxKSBjb25zb2xlLmVycm9yKGVycm9yKTtcbiAgICAgICAgfSlcblxuICAgICAgICB0aGlzLm1hbmFnZXIuZXJyb3JFdmVudC5hZGRFdmVudExpc3RlbmVyKChlcnJvcikgPT4ge1xuICAgICAgICAgICAgdGhpcy5lcnJvckV2ZW50LnJhaXNlRXZlbnQoZXJyb3IpO1xuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLm1hbmFnZXIuY2xvc2VFdmVudC5hZGRFdmVudExpc3RlbmVyKCgpPT57XG4gICAgICAgICAgICB0aGlzLm1hbmFnZWRTZXNzaW9ucy5mb3JFYWNoKChzKT0+e1xuICAgICAgICAgICAgICAgIHMuY2xvc2UoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KVxuXG4gICAgICAgIE9iamVjdC5mcmVlemUodGhpcyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRXN0YWJsaXNoZXMgYSBjb25uZWN0aW9uIHdpdGggdGhlIFtbUkVBTElUWV9NQU5BR0VSXV0uXG4gICAgICogQ2FsbGVkIGludGVybmFsbHkgYnkgdGhlIGNvbXBvc2l0aW9uIHJvb3QgKFtbQXJnb25TeXN0ZW1dXSkuXG4gICAgICovXG4gICAgcHVibGljIGNvbm5lY3QoKSB7XG4gICAgICAgIGlmICh0aGlzLmNvbm5lY3RTZXJ2aWNlICYmIHRoaXMuY29ubmVjdFNlcnZpY2UuY29ubmVjdCkge1xuICAgICAgICAgICAgdGhpcy5jb25uZWN0U2VydmljZS5jb25uZWN0KHRoaXMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKCdBcmdvbjogVW5hYmxlIHRvIGNvbm5lY3QgdG8gYSBtYW5hZ2VyIHNlc3Npb247IGEgY29ubmVjdCBzZXJ2aWNlIGlzIG5vdCBhdmFpbGFibGUnKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE1hbmFnZXItb25seS4gQ3JlYXRlcyBhIFtbU2Vzc2lvblBvcnRdXSB0aGF0IGlzIG1hbmFnZWQgYnkgdGhlIGN1cnJlbnQgW1tBcmdvblN5c3RlbV1dLlxuICAgICAqIFNlc3Npb24gcG9ydHMgdGhhdCBhcmUgbWFuYWdlZCB3aWxsIGF1dG9tYXRpY2FsbHkgZm9yd2FyZCBvcGVuIGV2ZW50cyB0byBcbiAgICAgKiBbW1Nlc3Npb25TZXJ2aWNlI3Nlc3Npb25Db25uZWN0RXZlbnRdXSBhbmQgZXJyb3IgZXZlbnRzIHRvIFtbU2Vzc2lvblNlcnZpY2UjZXJyb3JFdmVudF1dLiBcbiAgICAgKiBPdGhlciBzZXJ2aWNlcyB0aGF0IGFyZSBwYXJ0IG9mIHRoZSBjdXJyZW50IFtbQXJnb25TeXN0ZW1dXSBhcmUgbGlrZWx5IHRvIFxuICAgICAqIGFkZCBtZXNzYWdlIGhhbmRsZXJzIHRvIGEgbmV3bHkgY29ubmVjdGVkIFtbU2Vzc2lvblBvcnRdXS4gXG4gICAgICogQHJldHVybiBhIG5ldyBbW1Nlc3Npb25Qb3J0XV0gaW5zdGFuY2VcbiAgICAgKi9cbiAgICBwdWJsaWMgYWRkTWFuYWdlZFNlc3Npb25Qb3J0KHVyaTpzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5lbnN1cmVJc1JlYWxpdHlNYW5hZ2VyKCk7XG4gICAgICAgIGNvbnN0IHNlc3Npb24gPSB0aGlzLnNlc3Npb25Qb3J0RmFjdG9yeS5jcmVhdGUodXJpKTtcbiAgICAgICAgc2Vzc2lvbi5lcnJvckV2ZW50LmFkZEV2ZW50TGlzdGVuZXIoKGVycm9yKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmVycm9yRXZlbnQucmFpc2VFdmVudChlcnJvcik7XG4gICAgICAgIH0pO1xuICAgICAgICBzZXNzaW9uLmNvbm5lY3RFdmVudC5hZGRFdmVudExpc3RlbmVyKCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMubWFuYWdlZFNlc3Npb25zLnB1c2goc2Vzc2lvbik7XG4gICAgICAgICAgICB0aGlzLmNvbm5lY3RFdmVudC5yYWlzZUV2ZW50KHNlc3Npb24pO1xuICAgICAgICB9KTtcbiAgICAgICAgc2Vzc2lvbi5jbG9zZUV2ZW50LmFkZEV2ZW50TGlzdGVuZXIoKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgaW5kZXggPSB0aGlzLm1hbmFnZWRTZXNzaW9ucy5pbmRleE9mKHNlc3Npb24pO1xuICAgICAgICAgICAgaWYgKGluZGV4ID4gLTEpIHRoaXMubWFuYWdlZFNlc3Npb25zLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLm1hbmFnZXIuY2xvc2VFdmVudC5hZGRFdmVudExpc3RlbmVyKCgpPT57XG4gICAgICAgICAgICBzZXNzaW9uLmNsb3NlKCk7XG4gICAgICAgIH0pXG4gICAgICAgIHJldHVybiBzZXNzaW9uO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBbW1Nlc3Npb25Qb3J0XV0gdGhhdCBpcyBub3QgbWFuYWdlZCBieSB0aGUgY3VycmVudCBbW0FyZ29uU3lzdGVtXV0uXG4gICAgICogVW5tYW5hZ2VkIHNlc3Npb24gcG9ydHMgd2lsbCBub3QgZm9yd2FyZCBvcGVuIGV2ZW50cyBvciBlcnJvciBldmVudHMgXG4gICAgICogdG8gdGhpcyBbW0FyZ29uU3lzdGVtXV0uXG4gICAgICogQHJldHVybiBhIG5ldyBTZXNzaW9uUG9ydCBpbnN0YW5jZVxuICAgICAqL1xuICAgIHB1YmxpYyBjcmVhdGVTZXNzaW9uUG9ydCh1cmk6c3RyaW5nKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNlc3Npb25Qb3J0RmFjdG9yeS5jcmVhdGUodXJpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbWVzc2FnZSBjaGFubmVsIHdoaWNoIGFzeW5jcmhvbm91c2x5IHNlbmRzIGFuZCByZWNlaXZlcyBtZXNzYWdlcy5cbiAgICAgKi9cbiAgICBwdWJsaWMgY3JlYXRlTWVzc2FnZUNoYW5uZWwoKSA6IE1lc3NhZ2VDaGFubmVsTGlrZSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1lc3NhZ2VDaGFubmVsRmFjdG9yeS5jcmVhdGUoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbWVzc2FnZSBjaGFubmVsIHdoaWNoIHN5bmNyaG9ub3VzbHkgc2VuZHMgYW5kIHJlY2VpdmVzIG1lc3NhZ2VzLiBcbiAgICAgKi9cbiAgICBwdWJsaWMgY3JlYXRlU3luY2hyb25vdXNNZXNzYWdlQ2hhbm5lbCgpIDogU3luY2hyb25vdXNNZXNzYWdlQ2hhbm5lbCB7XG4gICAgICAgIHJldHVybiB0aGlzLm1lc3NhZ2VDaGFubmVsRmFjdG9yeS5jcmVhdGVTeW5jaHJvbm91cygpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdHJ1ZSBpZiB0aGlzIHN5c3RlbSByZXByZXNlbnRzIGEgW1tNQU5BR0VSXV1cbiAgICAgKi9cbiAgICBnZXQgaXNNYW5hZ2VyKCkge1xuICAgICAgICByZXR1cm4gUm9sZS5pc1JlYWxpdHlNYW5hZ2VyKHRoaXMuY29uZmlndXJhdGlvbiAmJiB0aGlzLmNvbmZpZ3VyYXRpb24ucm9sZSk7XG4gICAgfVxuICAgIC8vIHRvIGJlIGRlcHJlY2F0ZWRcbiAgICBnZXQgaXNSZWFsaXR5TWFuYWdlcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNNYW5hZ2VyO1xuICAgIH1cbiAgICBcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRydWUgaWYgdGhpcyBzeXN0ZW0gcmVwcmVzZW50cyBhIFtbQVVHTUVOVEVSXV0sIG1lYW5pbmcsIFxuICAgICAqIGl0IGlzIHJ1bm5pbmcgd2l0aGluIGEgW1tNQU5BR0VSXV1cbiAgICAgKi9cbiAgICBnZXQgaXNBdWdtZW50ZXIoKSB7XG4gICAgICAgIHJldHVybiBSb2xlLmlzUmVhbGl0eUF1Z21lbnRlcih0aGlzLmNvbmZpZ3VyYXRpb24gJiYgdGhpcy5jb25maWd1cmF0aW9uLnJvbGUpO1xuICAgIH1cbiAgICAvLyB0byBiZSBkZXByZWNhdGVkXG4gICAgZ2V0IGlzUmVhbGl0eUF1Z21lbnRlcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNBdWdtZW50ZXI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0cnVlIGlmIHRoaXMgc3lzdGVtIGlzIGEgW1tSRUFMSVRZX1ZJRVdFUl1dXG4gICAgICovXG4gICAgZ2V0IGlzUmVhbGl0eSgpIHtcbiAgICAgICAgcmV0dXJuIFJvbGUuaXNSZWFsaXR5Vmlld2VyKHRoaXMuY29uZmlndXJhdGlvbiAmJiB0aGlzLmNvbmZpZ3VyYXRpb24ucm9sZSk7XG4gICAgfVxuICAgIC8vIHRvIGJlIGRlcHJlY2F0ZWRcbiAgICBnZXQgaXNSZWFsaXR5Vmlld2VyKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5pc1JlYWxpdHk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBAZGVwcmVjYXRlZCgnaXNSZWFsaXR5QXVnbWVudGVyJylcbiAgICBwcml2YXRlIGdldCBpc0FwcGxpY2F0aW9uKCkgeyByZXR1cm4gdGhpcy5pc1JlYWxpdHlBdWdtZW50ZXIgfVxuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBAZGVwcmVjYXRlZCgnaXNSZWFsaXR5Vmlld2VyJylcbiAgICBwcml2YXRlIGdldCBpc1JlYWxpdHlWaWV3KCkgeyByZXR1cm4gdGhpcy5pc1JlYWxpdHlWaWV3ZXIgfVxuXG4gICAgLyoqXG4gICAgICogVGhyb3dzIGFuIGVycm9yIGlmIHRoaXMgc3lzdGVtIGlzIG5vdCBhIFtbUkVBTElUWV9NQU5BR0VSXV1cbiAgICAgKi9cbiAgICBwdWJsaWMgZW5zdXJlSXNSZWFsaXR5TWFuYWdlcigpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzUmVhbGl0eU1hbmFnZXIpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0FuIHJlYWxpdHktbWFuYWdlciBvbmx5IEFQSSB3YXMgYWNjZXNzZWQgZnJvbSBhIG5vbiByZWFsaXR5LW1hbmFnZXIuJylcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaHJvd3MgYW4gZXJyb3IgaWYgdGhpcyBzZXNzaW9uIGlzIG5vdCBhIFtbUkVBTElUWV9WSUVXRVJdXVxuICAgICAqL1xuICAgIHB1YmxpYyBlbnN1cmVJc1JlYWxpdHlWaWV3ZXIoKSB7XG4gICAgICAgIGlmICghdGhpcy5pc1JlYWxpdHlWaWV3ZXIpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0FuIHJlYWxpdHktdmlld2VyIG9ubHkgQVBJIHdhcyBhY2Nlc3NlZCBmcm9tIGEgbm9uIHJlYWxpdHktdmlld2VyLicpXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhyb3dzIGFuIGVycm9yIGlmIHRoaXMgc2Vzc2lvbiBpcyBhIFtbUkVBTElUWV9WSUVXRVJdXVxuICAgICAqL1xuICAgIHB1YmxpYyBlbnN1cmVOb3RSZWFsaXR5Vmlld2VyKCkge1xuICAgICAgICBpZiAodGhpcy5pc1JlYWxpdHlWaWV3ZXIpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0FuIG5vbi1wZXJtaXR0ZWQgQVBJIHdhcyBhY2Nlc3NlZCBmcm9tIGEgcmVhbGl0eS12aWV3ZXIuJylcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaHJvd3MgYW4gZXJyb3IgaWYgdGhpcyBzZXNzaW9uIGlzIGEgW1tSRUFMSVRZX0FVR01FTlRFUl1dXG4gICAgICovXG4gICAgcHVibGljIGVuc3VyZU5vdFJlYWxpdHlBdWdtZW50ZXIoKSB7XG4gICAgICAgIGlmICh0aGlzLmlzUmVhbGl0eUF1Z21lbnRlcilcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQW4gbm9uLXBlcm1pdHRlZCBBUEkgd2FzIGFjY2Vzc2VkIGZyb20gYSByZWFsaXR5LXZpZXdlci4nKVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRocm93cyBhbiBlcnJvciBpZiB0aGUgY29ubmVjdGlvbiB0byB0aGUgbWFuYWdlciBpcyBjbG9zZWRcbiAgICAgKi9cbiAgICBwdWJsaWMgZW5zdXJlQ29ubmVjdGVkKCkge1xuICAgICAgICBpZiAoIXRoaXMubWFuYWdlci5pc0Nvbm5lY3RlZClcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignU2Vzc2lvbiBpcyBub3QgY29ubmVjdGVkIHRvIG1hbmFnZXInKVxuICAgIH1cbn1cblxuLyoqXG4gKiBDb25uZWN0IHRoZSBjdXJyZW50IFtbQXJnb25TeXN0ZW1dXSB0byBpdHNlbGYgYXMgdGhlIFtbUkVBTElUWV9NQU5BR0VSXV0uIFxuICovXG5leHBvcnQgY2xhc3MgTG9vcGJhY2tDb25uZWN0U2VydmljZSBleHRlbmRzIENvbm5lY3RTZXJ2aWNlIHtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIGxvb3BiYWNrIGNvbm5lY3Rpb24uXG4gICAgICovXG4gICAgY29ubmVjdChzZXNzaW9uU2VydmljZTogU2Vzc2lvblNlcnZpY2UpIHtcbiAgICAgICAgY29uc3QgbWVzc2FnZUNoYW5uZWwgPSBzZXNzaW9uU2VydmljZS5jcmVhdGVTeW5jaHJvbm91c01lc3NhZ2VDaGFubmVsKCk7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2VQb3J0ID0gbWVzc2FnZUNoYW5uZWwucG9ydDE7XG4gICAgICAgIG1lc3NhZ2VDaGFubmVsLnBvcnQyLm9ubWVzc2FnZSA9IChldnQpID0+IHtcbiAgICAgICAgICAgIG1lc3NhZ2VDaGFubmVsLnBvcnQyLnBvc3RNZXNzYWdlKGV2dC5kYXRhKVxuICAgICAgICB9XG4gICAgICAgIHNlc3Npb25TZXJ2aWNlLm1hbmFnZXIuY29ubmVjdEV2ZW50LmFkZEV2ZW50TGlzdGVuZXIoKCkgPT4ge1xuICAgICAgICAgICAgc2Vzc2lvblNlcnZpY2UuY29ubmVjdEV2ZW50LnJhaXNlRXZlbnQoc2Vzc2lvblNlcnZpY2UubWFuYWdlcik7XG4gICAgICAgIH0pXG4gICAgICAgIHNlc3Npb25TZXJ2aWNlLm1hbmFnZXIub3BlbihtZXNzYWdlUG9ydCwgc2Vzc2lvblNlcnZpY2UuY29uZmlndXJhdGlvbik7XG4gICAgfVxufVxuXG4vKipcbiAqIENvbm5lY3QgdGhpcyBbW0FyZ29uU3lzdGVtXV0gdG8gdGhlIFtbUkVBTElUWV9NQU5BR0VSXV0gdmlhIHRoZSBwYXJlbnQgZG9jdW1lbnRcbiAqIChhc3N1bWluZyB0aGlzIHN5c3RlbSBpcyBydW5uaW5nIGluIGFuIGlGcmFtZSkuXG4gKi9cbmV4cG9ydCBjbGFzcyBET01Db25uZWN0U2VydmljZSBleHRlbmRzIENvbm5lY3RTZXJ2aWNlIHtcblxuICAgIC8qKlxuICAgICAgKiBDaGVjayB3aGV0aGVyIHRoaXMgY29ubmVjdCBtZXRob2QgaXMgYXZhaWxhYmxlIG9yIG5vdC5cbiAgICAgICovXG4gICAgcHVibGljIHN0YXRpYyBpc0F2YWlsYWJsZSgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiB3aW5kb3cucGFyZW50ICE9PSAndW5kZWZpbmVkJztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb25uZWN0IHRvIHRoZSBtYW5hZ2VyLlxuICAgICAqL1xuICAgIGNvbm5lY3Qoc2Vzc2lvblNlcnZpY2U6IFNlc3Npb25TZXJ2aWNlKSB7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2VDaGFubmVsID0gc2Vzc2lvblNlcnZpY2UuY3JlYXRlTWVzc2FnZUNoYW5uZWwoKTtcbiAgICAgICAgd2luZG93LnBhcmVudC5wb3N0TWVzc2FnZSh7IHR5cGU6ICdBUkdPTl9TRVNTSU9OJywgbmFtZTp3aW5kb3cubmFtZSB9LCAnKicsIFttZXNzYWdlQ2hhbm5lbC5wb3J0MV0pO1xuICAgICAgICBzZXNzaW9uU2VydmljZS5tYW5hZ2VyLm9wZW4obWVzc2FnZUNoYW5uZWwucG9ydDIsIHNlc3Npb25TZXJ2aWNlLmNvbmZpZ3VyYXRpb24pO1xuICAgIH1cbn1cblxuLyoqXG4gKiBDb25uZWN0IHRoaXMgc3lzdGVtIHRvIGEgcmVtb3RlIG1hbmFnZXIgZm9yIGRlYnVnZ2luZy5cbiAqL1xuZXhwb3J0IGNsYXNzIERlYnVnQ29ubmVjdFNlcnZpY2UgZXh0ZW5kcyBDb25uZWN0U2VydmljZSB7XG5cbiAgICAvKipcbiAgICAgKiBDaGVjayB3aGV0aGVyIHRoaXMgY29ubmVjdCBtZXRob2QgaXMgYXZhaWxhYmxlIG9yIG5vdC5cbiAgICAgKi9cbiAgICBwdWJsaWMgc3RhdGljIGlzQXZhaWxhYmxlKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgICAgICEhd2luZG93WydfX0FSR09OX0RFQlVHX1BPUlRfXyddO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbm5lY3QgdG8gdGhlIG1hbmFnZXIuXG4gICAgICovXG4gICAgY29ubmVjdCh7bWFuYWdlciwgY29uZmlndXJhdGlvbn06IFNlc3Npb25TZXJ2aWNlKSB7XG4gICAgICAgIG1hbmFnZXIub3Blbih3aW5kb3dbJ19fQVJHT05fREVCVUdfUE9SVF9fJ10sIGNvbmZpZ3VyYXRpb24pO1xuICAgIH1cbn1cblxuLyoqXG4gKiBDb25uZWN0IHRoaXMgc3lzdGVtIHZpYSBhIHNwZWNpZmllZCBNZXNzYWdlUG9ydC5cbiAqL1xuZXhwb3J0IGNsYXNzIFNlc3Npb25Db25uZWN0U2VydmljZSBleHRlbmRzIENvbm5lY3RTZXJ2aWNlIHtcblxuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyBzZXNzaW9uOlNlc3Npb25Qb3J0LCBwcml2YXRlIHBhcmVudENvbmZpZ3VyYXRpb246Q29uZmlndXJhdGlvbikge1xuICAgICAgICBzdXBlcigpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrIHdoZXRoZXIgdGhpcyBjb25uZWN0IG1ldGhvZCBpcyBhdmFpbGFibGUgb3Igbm90LlxuICAgICAqL1xuICAgIHB1YmxpYyBzdGF0aWMgaXNBdmFpbGFibGUoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbm5lY3QgdG8gdGhlIG1hbmFnZXIuXG4gICAgICovXG4gICAgY29ubmVjdChzZXNzaW9uU2VydmljZTogU2Vzc2lvblNlcnZpY2UpIHtcbiAgICAgICAgY29uc3QgbWVzc2FnZUNoYW5uZWwgPSBzZXNzaW9uU2VydmljZS5jcmVhdGVTeW5jaHJvbm91c01lc3NhZ2VDaGFubmVsKCk7XG4gICAgICAgIHRoaXMuc2Vzc2lvbi5vcGVuKG1lc3NhZ2VDaGFubmVsLnBvcnQxLCB0aGlzLnBhcmVudENvbmZpZ3VyYXRpb24pO1xuICAgICAgICBzZXNzaW9uU2VydmljZS5tYW5hZ2VyLm9wZW4obWVzc2FnZUNoYW5uZWwucG9ydDIsIHNlc3Npb25TZXJ2aWNlLmNvbmZpZ3VyYXRpb24pO1xuICAgIH1cbn1cblxuZGVjbGFyZSBjb25zdCB3ZWJraXQ6IGFueTtcblxuLyoqXG4gKiBBIHNlcnZpY2Ugd2hpY2ggY29ubmVjdHMgdGhpcyBzeXN0ZW0gdG8gdGhlIFtbUkVBTElUWV9NQU5BR0VSXV0gdmlhIGEgV0tXZWJ2aWV3IG1lc3NhZ2UgaGFuZGxlci5cbiAqL1xuZXhwb3J0IGNsYXNzIFdLV2ViVmlld0Nvbm5lY3RTZXJ2aWNlIGV4dGVuZHMgQ29ubmVjdFNlcnZpY2Uge1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2sgd2hldGhlciB0aGlzIGNvbm5lY3QgbWV0aG9kIGlzIGF2YWlsYWJsZSBvciBub3QuXG4gICAgICovXG4gICAgcHVibGljIHN0YXRpYyBpc0F2YWlsYWJsZSgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmXG4gICAgICAgICAgICB3aW5kb3dbJ3dlYmtpdCddICYmIHdpbmRvd1snd2Via2l0J10ubWVzc2FnZUhhbmRsZXJzXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29ubmVjdCB0byB0aGUgbWFuYWdlci5cbiAgICAgKi9cbiAgICBjb25uZWN0KHNlc3Npb25TZXJ2aWNlOiBTZXNzaW9uU2VydmljZSkge1xuICAgICAgICBjb25zdCBtZXNzYWdlQ2hhbm5lbCA9IHNlc3Npb25TZXJ2aWNlLmNyZWF0ZVN5bmNocm9ub3VzTWVzc2FnZUNoYW5uZWwoKTtcbiAgICAgICAgbWVzc2FnZUNoYW5uZWwucG9ydDIub25tZXNzYWdlID0gKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICB3ZWJraXQubWVzc2FnZUhhbmRsZXJzLmFyZ29uLnBvc3RNZXNzYWdlKEpTT04uc3RyaW5naWZ5KGV2ZW50LmRhdGEpKTtcbiAgICAgICAgfVxuICAgICAgICB3aW5kb3dbJ19fQVJHT05fUE9SVF9fJ10gPSBtZXNzYWdlQ2hhbm5lbC5wb3J0MjtcbiAgICAgICAgc2Vzc2lvblNlcnZpY2UubWFuYWdlci5vcGVuKG1lc3NhZ2VDaGFubmVsLnBvcnQxLCBzZXNzaW9uU2VydmljZS5jb25maWd1cmF0aW9uKTtcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJiZWZvcmV1bmxvYWRcIiwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBzZXNzaW9uU2VydmljZS5tYW5hZ2VyLmNsb3NlKCk7XG4gICAgICAgIH0pXG4gICAgfVxufVxuXG5mdW5jdGlvbiBleHRyYWN0VmVyc2lvbih2ZXJzaW9uU3RyaW5nKSB7XG4gICAgdmFyIHBhcnRzID0gdmVyc2lvblN0cmluZy5zcGxpdCgnLicpO1xuICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBwYXJ0cy5sZW5ndGg7IGkgPCBsZW47ICsraSkge1xuICAgICAgICBwYXJ0c1tpXSA9IHBhcnNlSW50KHBhcnRzW2ldLCAxMCk7XG4gICAgfVxuICAgIHJldHVybiBwYXJ0cztcbn1cblxuLyoqXG4gKiBBIHNlcnZpY2Ugd2hpY2ggY29ubmVjdHMgdGhpcyBzeXN0ZW0gdG8gdGhlIFtbUkVBTElUWV9NQU5BR0VSXV0gdmlhIGFuIEFuZHJvaWQgV2ViVmlldyBqYXZhc2NyaXB0IGludGVyZmFjZS5cbiAqL1xuZXhwb3J0IGNsYXNzIEFuZHJvaWRXZWJWaWV3Q29ubmVjdFNlcnZpY2UgZXh0ZW5kcyBDb25uZWN0U2VydmljZSB7XG5cbiAgICAvKipcbiAgICAgKiBDaGVjayB3aGV0aGVyIHRoaXMgY29ubmVjdCBtZXRob2QgaXMgYXZhaWxhYmxlIG9yIG5vdC5cbiAgICAgKi9cbiAgICBwdWJsaWMgc3RhdGljIGlzQXZhaWxhYmxlKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgICAgIHdpbmRvd1tcIl9fYXJnb25fYW5kcm9pZF9fXCJdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbm5lY3QgdG8gdGhlIG1hbmFnZXIuXG4gICAgICovXG4gICAgY29ubmVjdChzZXNzaW9uU2VydmljZTogU2Vzc2lvblNlcnZpY2UpIHtcbiAgICAgICAgY29uc3QgbWVzc2FnZUNoYW5uZWwgPSBzZXNzaW9uU2VydmljZS5jcmVhdGVTeW5jaHJvbm91c01lc3NhZ2VDaGFubmVsKCk7XG4gICAgICAgIG1lc3NhZ2VDaGFubmVsLnBvcnQyLm9ubWVzc2FnZSA9IChldmVudCkgPT4ge1xuICAgICAgICAgICAgd2luZG93W1wiX19hcmdvbl9hbmRyb2lkX19cIl0uZW1pdChcImFyZ29uXCIsIEpTT04uc3RyaW5naWZ5KGV2ZW50LmRhdGEpKTtcbiAgICAgICAgfVxuICAgICAgICB3aW5kb3dbJ19fQVJHT05fUE9SVF9fJ10gPSBtZXNzYWdlQ2hhbm5lbC5wb3J0MjtcbiAgICAgICAgc2Vzc2lvblNlcnZpY2UubWFuYWdlci5vcGVuKG1lc3NhZ2VDaGFubmVsLnBvcnQxLCBzZXNzaW9uU2VydmljZS5jb25maWd1cmF0aW9uKTtcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJiZWZvcmV1bmxvYWRcIiwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBzZXNzaW9uU2VydmljZS5tYW5hZ2VyLmNsb3NlKCk7XG4gICAgICAgIH0pXG4gICAgfVxufVxuIl19