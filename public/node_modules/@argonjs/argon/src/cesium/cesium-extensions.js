// Add functionality for keeping a moving window of samples per SampledProperty,
// so that the data doesn't accumulate indefinitely
import { SampledProperty, SampledPositionProperty, binarySearch, JulianDate } from './cesium-imports';
var after = function (fn, after) {
    return function () {
        var result = fn.apply(this, arguments);
        after.call(this, result);
        return result;
    };
};
function removeBeforeDate(property, time) {
    var times = property._times;
    var index = ~binarySearch(times, time, JulianDate.compare);
    if (index > 0) {
        times.splice(0, index);
        property._values.splice(0, index * property._innerType.packedLength);
        property._updateTableLength = true;
        property._definitionChanged.raiseEvent(property);
    }
}
SampledProperty.prototype.removeSamplesBeforeDate = function (time) {
    removeBeforeDate(this, time);
};
SampledPositionProperty.prototype.removeSamplesBeforeDate = function (time) {
    removeBeforeDate(this._property, time);
};
function removeOldSamples(property, maxNumSamples) {
    if (maxNumSamples === undefined)
        return;
    var removeCount = property._times.length - maxNumSamples;
    if (removeCount > 0) {
        property._times.splice(0, removeCount);
        property._values.splice(0, removeCount * property._innerType.packedLength);
        property._updateTableLength = true;
    }
}
SampledProperty.prototype.addSample = after(SampledProperty.prototype.addSample, function () {
    removeOldSamples(this, this.maxNumSamples);
});
SampledProperty.prototype.addSamples = after(SampledProperty.prototype.addSamples, function () {
    removeOldSamples(this, this.maxNumSamples);
});
SampledProperty.prototype.addSamplesPackedArray = after(SampledProperty.prototype.addSamplesPackedArray, function () {
    removeOldSamples(this, this.maxNumSamples);
});
SampledPositionProperty.prototype.addSample = after(SampledPositionProperty.prototype.addSample, function () {
    removeOldSamples(this._property, this.maxNumSamples);
});
SampledPositionProperty.prototype.addSamples = after(SampledPositionProperty.prototype.addSamples, function () {
    removeOldSamples(this._property, this.maxNumSamples);
});
SampledPositionProperty.prototype.addSamplesPackedArray = after(SampledPositionProperty.prototype.addSamplesPackedArray, function () {
    removeOldSamples(this._property, this.maxNumSamples);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2VzaXVtLWV4dGVuc2lvbnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJjZXNpdW0tZXh0ZW5zaW9ucy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxnRkFBZ0Y7QUFDaEYsbURBQW1EO0FBRW5ELE9BQU8sRUFDSCxlQUFlLEVBQ2YsdUJBQXVCLEVBQ3ZCLFlBQVksRUFDWixVQUFVLEVBQ2IsTUFBTSxrQkFBa0IsQ0FBQTtBQVd6QixJQUFJLEtBQUssR0FBRyxVQUE4QixFQUFLLEVBQUUsS0FBZTtJQUM1RCxNQUFNLENBQVM7UUFDWCxJQUFJLE1BQU0sR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxTQUFTLENBQUMsQ0FBQTtRQUN0QyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQTtRQUN4QixNQUFNLENBQUMsTUFBTSxDQUFBO0lBQ2pCLENBQUMsQ0FBQTtBQUNMLENBQUMsQ0FBQTtBQUVELDBCQUEwQixRQUFhLEVBQUUsSUFBZ0I7SUFDckQsSUFBSSxLQUFLLEdBQUcsUUFBUSxDQUFDLE1BQU0sQ0FBQTtJQUMzQixJQUFJLEtBQUssR0FBRyxDQUFDLFlBQVksQ0FBQyxLQUFLLEVBQUUsSUFBSSxFQUFFLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQTtJQUMxRCxFQUFFLENBQUMsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNaLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFBO1FBQ3RCLFFBQVEsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxLQUFLLEdBQUcsUUFBUSxDQUFDLFVBQVUsQ0FBQyxZQUFZLENBQUMsQ0FBQTtRQUNwRSxRQUFRLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFBO1FBQ2xDLFFBQVEsQ0FBQyxrQkFBa0IsQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLENBQUE7SUFDcEQsQ0FBQztBQUNMLENBQUM7QUFFRCxlQUFlLENBQUMsU0FBUyxDQUFDLHVCQUF1QixHQUFHLFVBQVMsSUFBSTtJQUM3RCxnQkFBZ0IsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUE7QUFDaEMsQ0FBQyxDQUFBO0FBRUQsdUJBQXVCLENBQUMsU0FBUyxDQUFDLHVCQUF1QixHQUFHLFVBQVMsSUFBSTtJQUNyRSxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxDQUFBO0FBQzFDLENBQUMsQ0FBQTtBQUVELDBCQUEwQixRQUFhLEVBQUUsYUFBcUI7SUFDMUQsRUFBRSxDQUFDLENBQUMsYUFBYSxLQUFLLFNBQVMsQ0FBQztRQUFDLE1BQU0sQ0FBQztJQUN4QyxJQUFJLFdBQVcsR0FBRyxRQUFRLENBQUMsTUFBTSxDQUFDLE1BQU0sR0FBRyxhQUFhLENBQUE7SUFDeEQsRUFBRSxDQUFDLENBQUMsV0FBVyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDbEIsUUFBUSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLFdBQVcsQ0FBQyxDQUFBO1FBQ3RDLFFBQVEsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxXQUFXLEdBQUcsUUFBUSxDQUFDLFVBQVUsQ0FBQyxZQUFZLENBQUMsQ0FBQTtRQUMxRSxRQUFRLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFBO0lBQ3RDLENBQUM7QUFDTCxDQUFDO0FBRUQsZUFBZSxDQUFDLFNBQVMsQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUN2QyxlQUFlLENBQUMsU0FBUyxDQUFDLFNBQVMsRUFDbkM7SUFDSSxnQkFBZ0IsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFBO0FBQzlDLENBQUMsQ0FDSixDQUFBO0FBRUQsZUFBZSxDQUFDLFNBQVMsQ0FBQyxVQUFVLEdBQUcsS0FBSyxDQUN4QyxlQUFlLENBQUMsU0FBUyxDQUFDLFVBQVUsRUFDcEM7SUFDSSxnQkFBZ0IsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFBO0FBQzlDLENBQUMsQ0FDSixDQUFBO0FBRUQsZUFBZSxDQUFDLFNBQVMsQ0FBQyxxQkFBcUIsR0FBRyxLQUFLLENBQ25ELGVBQWUsQ0FBQyxTQUFTLENBQUMscUJBQXFCLEVBQy9DO0lBQ0ksZ0JBQWdCLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQTtBQUM5QyxDQUFDLENBQ0osQ0FBQTtBQUVELHVCQUF1QixDQUFDLFNBQVMsQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUMvQyx1QkFBdUIsQ0FBQyxTQUFTLENBQUMsU0FBUyxFQUMzQztJQUNJLGdCQUFnQixDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFBO0FBQ3hELENBQUMsQ0FDSixDQUFBO0FBRUQsdUJBQXVCLENBQUMsU0FBUyxDQUFDLFVBQVUsR0FBRyxLQUFLLENBQ2hELHVCQUF1QixDQUFDLFNBQVMsQ0FBQyxVQUFVLEVBQzVDO0lBQ0ksZ0JBQWdCLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUE7QUFDeEQsQ0FBQyxDQUNKLENBQUE7QUFFRCx1QkFBdUIsQ0FBQyxTQUFTLENBQUMscUJBQXFCLEdBQUcsS0FBSyxDQUMzRCx1QkFBdUIsQ0FBQyxTQUFTLENBQUMscUJBQXFCLEVBQ3ZEO0lBQ0ksZ0JBQWdCLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUE7QUFDeEQsQ0FBQyxDQUNKLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBBZGQgZnVuY3Rpb25hbGl0eSBmb3Iga2VlcGluZyBhIG1vdmluZyB3aW5kb3cgb2Ygc2FtcGxlcyBwZXIgU2FtcGxlZFByb3BlcnR5LFxuLy8gc28gdGhhdCB0aGUgZGF0YSBkb2Vzbid0IGFjY3VtdWxhdGUgaW5kZWZpbml0ZWx5XG5cbmltcG9ydCB7XG4gICAgU2FtcGxlZFByb3BlcnR5LCBcbiAgICBTYW1wbGVkUG9zaXRpb25Qcm9wZXJ0eSwgXG4gICAgYmluYXJ5U2VhcmNoLCBcbiAgICBKdWxpYW5EYXRlXG59IGZyb20gJy4vY2VzaXVtLWltcG9ydHMnXG5cbmRlY2xhcmUgbW9kdWxlICdjZXNpdW0nIHtcbiAgICBpbnRlcmZhY2UgU2FtcGxlZFByb3BlcnR5IHtcbiAgICAgICAgbWF4TnVtU2FtcGxlczogbnVtYmVyO1xuICAgIH1cbiAgICBpbnRlcmZhY2UgU2FtcGxlZFBvc2l0aW9uUHJvcGVydHkge1xuICAgICAgICBtYXhOdW1TYW1wbGVzOiBudW1iZXI7XG4gICAgfVxufVxuXG52YXIgYWZ0ZXIgPSBmdW5jdGlvbiA8VCBleHRlbmRzIEZ1bmN0aW9uPihmbjogVCwgYWZ0ZXI6IEZ1bmN0aW9uKTogVCB7XG4gICAgcmV0dXJuIDxUPjxhbnk+ZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpXG4gICAgICAgIGFmdGVyLmNhbGwodGhpcywgcmVzdWx0KVxuICAgICAgICByZXR1cm4gcmVzdWx0XG4gICAgfVxufVxuXG5mdW5jdGlvbiByZW1vdmVCZWZvcmVEYXRlKHByb3BlcnR5OiBhbnksIHRpbWU6IEp1bGlhbkRhdGUpIHtcbiAgICB2YXIgdGltZXMgPSBwcm9wZXJ0eS5fdGltZXNcbiAgICB2YXIgaW5kZXggPSB+YmluYXJ5U2VhcmNoKHRpbWVzLCB0aW1lLCBKdWxpYW5EYXRlLmNvbXBhcmUpXG4gICAgaWYgKGluZGV4ID4gMCkge1xuICAgICAgICB0aW1lcy5zcGxpY2UoMCwgaW5kZXgpXG4gICAgICAgIHByb3BlcnR5Ll92YWx1ZXMuc3BsaWNlKDAsIGluZGV4ICogcHJvcGVydHkuX2lubmVyVHlwZS5wYWNrZWRMZW5ndGgpXG4gICAgICAgIHByb3BlcnR5Ll91cGRhdGVUYWJsZUxlbmd0aCA9IHRydWVcbiAgICAgICAgcHJvcGVydHkuX2RlZmluaXRpb25DaGFuZ2VkLnJhaXNlRXZlbnQocHJvcGVydHkpXG4gICAgfVxufVxuXG5TYW1wbGVkUHJvcGVydHkucHJvdG90eXBlLnJlbW92ZVNhbXBsZXNCZWZvcmVEYXRlID0gZnVuY3Rpb24odGltZSkge1xuICAgIHJlbW92ZUJlZm9yZURhdGUodGhpcywgdGltZSlcbn1cblxuU2FtcGxlZFBvc2l0aW9uUHJvcGVydHkucHJvdG90eXBlLnJlbW92ZVNhbXBsZXNCZWZvcmVEYXRlID0gZnVuY3Rpb24odGltZSkge1xuICAgIHJlbW92ZUJlZm9yZURhdGUodGhpcy5fcHJvcGVydHksIHRpbWUpXG59XG5cbmZ1bmN0aW9uIHJlbW92ZU9sZFNhbXBsZXMocHJvcGVydHk6IGFueSwgbWF4TnVtU2FtcGxlczogbnVtYmVyKSB7XG4gICAgaWYgKG1heE51bVNhbXBsZXMgPT09IHVuZGVmaW5lZCkgcmV0dXJuO1xuICAgIHZhciByZW1vdmVDb3VudCA9IHByb3BlcnR5Ll90aW1lcy5sZW5ndGggLSBtYXhOdW1TYW1wbGVzXG4gICAgaWYgKHJlbW92ZUNvdW50ID4gMCkge1xuICAgICAgICBwcm9wZXJ0eS5fdGltZXMuc3BsaWNlKDAsIHJlbW92ZUNvdW50KVxuICAgICAgICBwcm9wZXJ0eS5fdmFsdWVzLnNwbGljZSgwLCByZW1vdmVDb3VudCAqIHByb3BlcnR5Ll9pbm5lclR5cGUucGFja2VkTGVuZ3RoKVxuICAgICAgICBwcm9wZXJ0eS5fdXBkYXRlVGFibGVMZW5ndGggPSB0cnVlXG4gICAgfVxufVxuXG5TYW1wbGVkUHJvcGVydHkucHJvdG90eXBlLmFkZFNhbXBsZSA9IGFmdGVyKFxuICAgIFNhbXBsZWRQcm9wZXJ0eS5wcm90b3R5cGUuYWRkU2FtcGxlLFxuICAgIGZ1bmN0aW9uKCkge1xuICAgICAgICByZW1vdmVPbGRTYW1wbGVzKHRoaXMsIHRoaXMubWF4TnVtU2FtcGxlcylcbiAgICB9XG4pXG5cblNhbXBsZWRQcm9wZXJ0eS5wcm90b3R5cGUuYWRkU2FtcGxlcyA9IGFmdGVyKFxuICAgIFNhbXBsZWRQcm9wZXJ0eS5wcm90b3R5cGUuYWRkU2FtcGxlcyxcbiAgICBmdW5jdGlvbigpIHtcbiAgICAgICAgcmVtb3ZlT2xkU2FtcGxlcyh0aGlzLCB0aGlzLm1heE51bVNhbXBsZXMpXG4gICAgfVxuKVxuXG5TYW1wbGVkUHJvcGVydHkucHJvdG90eXBlLmFkZFNhbXBsZXNQYWNrZWRBcnJheSA9IGFmdGVyKFxuICAgIFNhbXBsZWRQcm9wZXJ0eS5wcm90b3R5cGUuYWRkU2FtcGxlc1BhY2tlZEFycmF5LFxuICAgIGZ1bmN0aW9uKCkge1xuICAgICAgICByZW1vdmVPbGRTYW1wbGVzKHRoaXMsIHRoaXMubWF4TnVtU2FtcGxlcylcbiAgICB9XG4pXG5cblNhbXBsZWRQb3NpdGlvblByb3BlcnR5LnByb3RvdHlwZS5hZGRTYW1wbGUgPSBhZnRlcihcbiAgICBTYW1wbGVkUG9zaXRpb25Qcm9wZXJ0eS5wcm90b3R5cGUuYWRkU2FtcGxlLFxuICAgIGZ1bmN0aW9uKCkge1xuICAgICAgICByZW1vdmVPbGRTYW1wbGVzKHRoaXMuX3Byb3BlcnR5LCB0aGlzLm1heE51bVNhbXBsZXMpXG4gICAgfVxuKVxuXG5TYW1wbGVkUG9zaXRpb25Qcm9wZXJ0eS5wcm90b3R5cGUuYWRkU2FtcGxlcyA9IGFmdGVyKFxuICAgIFNhbXBsZWRQb3NpdGlvblByb3BlcnR5LnByb3RvdHlwZS5hZGRTYW1wbGVzLFxuICAgIGZ1bmN0aW9uKCkge1xuICAgICAgICByZW1vdmVPbGRTYW1wbGVzKHRoaXMuX3Byb3BlcnR5LCB0aGlzLm1heE51bVNhbXBsZXMpXG4gICAgfVxuKVxuXG5TYW1wbGVkUG9zaXRpb25Qcm9wZXJ0eS5wcm90b3R5cGUuYWRkU2FtcGxlc1BhY2tlZEFycmF5ID0gYWZ0ZXIoXG4gICAgU2FtcGxlZFBvc2l0aW9uUHJvcGVydHkucHJvdG90eXBlLmFkZFNhbXBsZXNQYWNrZWRBcnJheSxcbiAgICBmdW5jdGlvbigpIHtcbiAgICAgICAgcmVtb3ZlT2xkU2FtcGxlcyh0aGlzLl9wcm9wZXJ0eSwgdGhpcy5tYXhOdW1TYW1wbGVzKVxuICAgIH1cbikiXX0=