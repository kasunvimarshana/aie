var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { autoinject } from 'aurelia-dependency-injection';
import { defined, Entity, Cartographic, DynamicPositionProperty, DynamicProperty, Cartesian3, Quaternion, Matrix3, Matrix4, CesiumMath, Transforms, JulianDate, ReferenceFrame, PerspectiveFrustum } from './cesium/cesium-imports';
import { DEFAULT_NEAR_PLANE, DEFAULT_FAR_PLANE, SerializedSubviewList, SubviewType, CanvasViewport, Viewport, Role } from './common';
import { SessionService } from './session';
import { Event, stringIdentifierFromReferenceFrame, getReachableAncestorReferenceFrames, getSerializedEntityState, getEntityPositionInReferenceFrame, getEntityOrientationInReferenceFrame, deprecated, eastUpSouthToFixedFrame, convertEntityReferenceFrame } from './utils';
import { EntityService, EntityServiceProvider, PoseStatus } from './entity';
import { DeviceService, Device } from './device';
import { ViewService } from './view';
import { PermissionServiceProvider, PermissionState } from './permission';
import { RealityService, RealityServiceProvider } from './reality';
/**
 * Provides a means of querying the current state of reality.
 */
var ContextService = (function () {
    function ContextService(entityService, sessionService, deviceService, viewService, realityService) {
        var _this = this;
        this.entityService = entityService;
        this.sessionService = sessionService;
        this.deviceService = deviceService;
        this.viewService = viewService;
        this.realityService = realityService;
        /**
         * An event that is raised after managed entities have been updated for
         * the current frame.
         */
        this.updateEvent = new Event();
        /**
         * An event that is raised when it is an approriate time to render graphics.
         * This event fires after the update event.
         */
        this.renderEvent = new Event();
        /**
         * An event that is raised after the render event
         */
        this.postRenderEvent = new Event();
        /**
         * An event that fires when the origin changes.
         */
        this.originChangeEvent = new Event();
        /**
         * A monotonically increasing value (in milliseconds) for the current frame state.
         * This value is useful only for doing accurate *timing*, not for determining
         * the absolute time. Use [[ContextService.time]] for absolute time.
         * This value is -1 until the first [[ContextService.updateEvent]].
         */
        this.timestamp = -1;
        /**
         * The time in milliseconds since the previous timestamp,
         * capped to [[ContextService.maxDeltaTime]]
         */
        this.deltaTime = 0;
        /**
         * This value caps the deltaTime for each frame. By default,
         * the value is 1/3s (333.3ms)
         */
        this.maxDeltaTime = 1 / 3 * 1000;
        /**
         * The current (absolute) time according to the current reality.
         * This value is arbitrary until the first [[ContextService.updateEvent]].
         */
        this.time = new JulianDate(0, 0);
        /**
        * An entity representing the origin, which is oriented
        * with +Y up. The origin changes infrequently, is platform dependent,
        * and is the suggested origin for a rendering scenegraph.
        *
        * Any time the origin changes, the originChange event is raised.
        */
        this.origin = this.entities.add(new Entity({
            id: 'ar.origin',
            name: 'Origin',
            position: new DynamicPositionProperty(undefined, ReferenceFrame.FIXED),
            orientation: new DynamicProperty(undefined)
        }));
        this._localOrigin = this.entities.add(new Entity({
            id: 'ar.localOrigin',
            name: 'Local Origin',
            position: new DynamicPositionProperty(Cartesian3.ZERO, this.origin),
            orientation: new DynamicProperty(Quaternion.IDENTITY)
        }));
        this._localOriginEastNorthUp = this.entities.add(new Entity({
            id: 'ar.localOriginENU',
            name: 'Local Origin (ENU)',
            position: new DynamicPositionProperty(Cartesian3.ZERO, this.origin),
            orientation: new DynamicProperty(Quaternion.fromAxisAngle(Cartesian3.UNIT_X, -Math.PI / 2))
        }));
        /**
         * A coordinate system representing the physical space in which the user is free to move
         * around with high-precision tracking, and positioned on the surface the user is standing on.
         * This space is oriented such that a platform-dependent "forward" corresponds to -Z.
         */
        this.stage = this.entities.add(new Entity({
            id: 'ar.stage',
            name: 'Stage',
            position: new DynamicPositionProperty(undefined, ReferenceFrame.FIXED),
            orientation: new DynamicProperty(undefined)
        }));
        /**
         * A coordinate system positioned at the stage,
         * where +X is east, +Y is up, and +Z is south (East-Up-South), if geolocation is known.
         * If geolocation is unknown, this entity has an undefined pose.
         */
        this.stageEUS = this.entities.add(new Entity({
            id: 'ar.stageEUS',
            name: 'Stage (EUS)',
            position: new DynamicPositionProperty(undefined, this.stage),
            orientation: new DynamicProperty(undefined)
        }));
        /**
         * A coordinate system positioned at the stage,
         * where +X is east, +Y is north, and +Z is up (East-North-Up), if geolocation is known.
         * If geolocation is unknown, this entity has an undefined pose.
         */
        this.stageENU = this.entities.add(new Entity({
            id: 'ar.stageENU',
            name: 'Stage (ENU)',
            position: new DynamicPositionProperty(undefined, this.stage),
            orientation: new DynamicProperty(undefined)
        }));
        /**
         * A coordinate system representing the floor.
         * While the `stage` always represents a physical surface,
         * the `floor` entity may represent a virtual floor.
         */
        this.floor = this.entities.add(new Entity({
            id: 'ar.floor',
            name: 'Floor',
            position: new DynamicPositionProperty(Cartesian3.ZERO, this.stage),
            orientation: new DynamicProperty(Quaternion.IDENTITY)
        }));
        /**
         * An coordinate system representing the user,
         * where +X is right, +Y is up, and -Z is the direction the user is facing
         */
        this.user = this.entities.add(new Entity({
            id: 'ar.user',
            name: 'User',
            position: new DynamicPositionProperty(undefined, this.stage),
            orientation: new DynamicProperty(undefined)
        }));
        /**
         * An coordinate system representing the rendering view,
         * where +X is right, +Y is up, and -Z is the direction of the view.
         */
        this.view = this.entities.add(new Entity({
            id: 'ar.view',
            name: 'View',
            position: new DynamicPositionProperty(Cartesian3.ZERO, this.user),
            orientation: new DynamicProperty(Quaternion.IDENTITY)
        }));
        /**
         * The default reference frame to use when calling `getEntityPose`.
         * By default, this is the `origin` reference frame.
         */
        this.defaultReferenceFrame = this.origin;
        this._updatingEntities = new Set();
        this._knownEntities = new Set();
        this._scratchCartesian = new Cartesian3;
        this._scratchQuaternion = new Quaternion;
        this._scratchFrustum = new PerspectiveFrustum();
        /**
         * Subscribe to pose updates for the given entity id
         *
         * @returns A Promise that resolves to a new or existing entity
         * instance matching the given id, if the subscription is successful
         */
        this.subscribe = this.entityService.subscribe.bind(this.entityService);
        /**
         * Unsubscribe to pose updates for the given entity id
         */
        this.unsubscribe = this.entityService.unsubscribe.bind(this.entityService);
        this._frameIndex = -1;
        this._scratchFrameState = {
            time: {},
            entities: {},
            viewport: {},
            subviews: []
        };
        this._getSerializedEntityState = getSerializedEntityState;
        this._getEntityPositionInReferenceFrame = getEntityPositionInReferenceFrame;
        this._getEntityOrientationInReferenceFrame = getEntityOrientationInReferenceFrame;
        this._eastUpSouthToFixedFrame = eastUpSouthToFixedFrame;
        this._eastNorthUpToFixedFrame = Transforms.eastNorthUpToFixedFrame;
        this._getReachableAncestorReferenceFrames = getReachableAncestorReferenceFrames;
        this._scratchArray = [];
        this._scratchMatrix3 = new Matrix3;
        this._scratchMatrix4 = new Matrix4;
        this._convertEntityReferenceFrame = convertEntityReferenceFrame;
        this.sessionService.manager.on['ar.context.update'] = function (state) {
            var scratchFrustum = _this._scratchFrustum;
            // backwards-compat
            if (typeof state.reality !== 'string') {
                state.reality = state.reality && state.reality['uri'];
            }
            if (!state.viewport && state['view'] && state['view'].viewport) {
                state.viewport = state['view'].viewport;
            }
            if (!state.subviews && state['view'] && state['view'].subviews) {
                state.subviews = state['view'].subviews;
                scratchFrustum.near = DEFAULT_NEAR_PLANE;
                scratchFrustum.far = DEFAULT_FAR_PLANE;
                for (var _i = 0, _a = state.subviews; _i < _a.length; _i++) {
                    var s = _a[_i];
                    var frustum = s['frustum'];
                    scratchFrustum.xOffset = frustum.xOffset || 0;
                    scratchFrustum.yOffset = frustum.yOffset || 0;
                    scratchFrustum.fov = frustum.fov || CesiumMath.PI_OVER_THREE;
                    scratchFrustum.aspectRatio = frustum.aspectRatio || 1;
                    s.projectionMatrix = Matrix4.clone(scratchFrustum.projectionMatrix, s.projectionMatrix);
                }
            }
            if (!state.entities[_this.user.id] && state['view'] && state['view'].pose) {
                state.entities[_this.user.id] = state['view'].pose;
            }
            // end backwards-compat
            // the `skipEvents` flag skips update/render events,
            // allowing a reality to process 'ar.context.update' so it knows 
            // what the current state of the system is, while maintaining control
            // over it's frame timing (by calling submitFrameState)
            var skipEvents = _this.sessionService.isRealityViewer;
            _this._update(state, skipEvents);
        };
        this._scratchFrustum.near = DEFAULT_NEAR_PLANE;
        this._scratchFrustum.far = DEFAULT_FAR_PLANE;
        this._scratchFrustum.fov = CesiumMath.PI_OVER_THREE;
        this._scratchFrustum.aspectRatio = 1;
        this._serializedFrameState = {
            reality: undefined,
            time: JulianDate.now(),
            entities: {},
            viewport: new CanvasViewport,
            subviews: [{
                    type: SubviewType.SINGULAR,
                    viewport: new Viewport,
                    projectionMatrix: this._scratchFrustum.projectionMatrix
                }],
        };
    }
    Object.defineProperty(ContextService.prototype, "entities", {
        get: function () { return this.entityService.collection; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ContextService.prototype, "localOriginChangeEvent", {
        /**
         * An event that fires when the local origin changes.
         */
        get: function () { return this.originChangeEvent; },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(ContextService.prototype, "userTracking", {
        /**
         * Returns the DOF support of the reality.
         * "none"|"3DOF"|"6DOF"
         */
        get: function () {
            return this._serializedFrameState && this._serializedFrameState.userTracking || '3DOF';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ContextService.prototype, "localOrigin", {
        /** alias for origin */
        get: function () { return this._localOrigin; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ContextService.prototype, "localOriginEastUpSouth", {
        // To be removed. This is no longer useful.
        get: function () { return this._localOrigin; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ContextService.prototype, "localOriginEastNorthUp", {
        // To be removed. This is no longer useful.
        get: function () { return this._localOriginEastNorthUp; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ContextService.prototype, "serializedFrameState", {
        /**
         * The serialized frame state for this frame
         */
        get: function () {
            return this._serializedFrameState;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ContextService.prototype, "systemTime", {
        /**
         * Deprecated. Use timestamp property.
         * @private
         */
        get: function () {
            return this.timestamp;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Deprecated. To be removed.
     * @private
     */
    ContextService.prototype.getTime = function () {
        return this.time;
    };
    /**
     * Deprecated. To be removed. Use the defaultReferenceFrame property if necessary.
     * @private
     */
    ContextService.prototype.setDefaultReferenceFrame = function (origin) {
        this.defaultReferenceFrame = origin;
    };
    /**
     * Deprecated. To be removed.  Use the defaultReferenceFrame property.
     * @private
     */
    ContextService.prototype.getDefaultReferenceFrame = function () {
        return this.defaultReferenceFrame;
    };
    /**
     * Subscribe to pose updates for an entity specified by the given id
     *
     * @deprecated Use [[ContextService#subscribe]]
     * @param id - the id of the desired entity
     * @returns A new or existing entity instance matching the given id
     */
    ContextService.prototype.subscribeToEntityById = function (id) {
        this.subscribe(id);
        return this.entities.getOrCreateEntity(id);
    };
    /**
     * Get the cartographic position of an Entity for the current context time
     */
    ContextService.prototype.getEntityCartographic = function (entity, result) {
        return this.entityService.getCartographic(entity, this.time, result);
    };
    /**
     * Deprecated. Use `EntityService.createFixed` (`app.entity.createFixed`);
     */
    ContextService.prototype.createGeoEntity = function (cartographic, localToFixed) {
        return this.entityService.createFixed(cartographic, localToFixed);
    };
    /**
     * Create a new EntityPose instance to represent the pose of an entity
     * relative to a given reference frame. If no reference frame is specified,
     * then the pose is based on the context's defaultReferenceFrame.
     *
     * @param entityOrId - the entity to track
     * @param referenceFrameOrId - The intended reference frame. Defaults to `this.defaultReferenceFrame`.
     */
    ContextService.prototype.createEntityPose = function (entityOrId, referenceFrameOrId) {
        if (referenceFrameOrId === void 0) { referenceFrameOrId = this.defaultReferenceFrame; }
        return this.entityService.createEntityPose(entityOrId, referenceFrameOrId);
    };
    /**
     * Gets the current pose of an entity, relative to a given reference frame.
     *
     * @param entityOrId - The entity whose state is to be queried.
     * @param referenceFrameOrId - The intended reference frame. Defaults to `this.defaultReferenceFrame`.
     */
    ContextService.prototype.getEntityPose = function (entityOrId, referenceFrameOrId) {
        if (referenceFrameOrId === void 0) { referenceFrameOrId = this.defaultReferenceFrame; }
        return this.entityService.getEntityPose(entityOrId, referenceFrameOrId, this.time);
    };
    /**
     * Process the next frame state (which should come from the current reality viewer)
     */
    ContextService.prototype.submitFrameState = function (frameState) {
        frameState.index = ++this._frameIndex;
        this._update(frameState);
    };
    /**
     * Create a frame state.
     *
     * @param time
     * @param viewport
     * @param subviewList
     * @param userTracking
     * @param entityOptions
     */
    ContextService.prototype.createFrameState = function (time, viewport, subviewList, options) {
        var overrideUser = options && options.overrideUser;
        if (this.deviceService.strict) {
            if (overrideUser) {
                overrideUser = false;
            }
        }
        var frameState = this._scratchFrameState;
        frameState.time = JulianDate.clone(time, frameState.time);
        frameState.viewport = CanvasViewport.clone(viewport, frameState.viewport);
        frameState.subviews = SerializedSubviewList.clone(subviewList, frameState.subviews);
        var entities = frameState.entities = {};
        var getSerializedEntityState = this._getSerializedEntityState;
        // stage
        var stage = this.stage;
        if (options && options.overrideStage) {
            entities[stage.id] = getSerializedEntityState(stage, time, undefined);
        }
        // user
        var user = this.user;
        if (overrideUser) {
            entities[user.id] = getSerializedEntityState(user, time, stage);
        }
        // view
        var view = this.view;
        if (options && options.overrideView) {
            entities[view.id] = getSerializedEntityState(view, time, user);
        }
        // subviews
        if (options && options.overrideSubviews) {
            for (var index = 0; index < subviewList.length; index++) {
                // check for valid projection matrices
                var subview = subviewList[index];
                if (!isFinite(subview.projectionMatrix[0]))
                    throw new Error('Invalid projection matrix (contains non-finite values)');
                // subview
                var subviewEntity = this.getSubviewEntity(index);
                entities[subviewEntity.id] = getSerializedEntityState(subviewEntity, time, view);
            }
        }
        // floor
        var floorOffset = options && options.floorOffset || 0;
        var floor = this.floor;
        floor.position.setValue(Cartesian3.fromElements(0, floorOffset, 0, this._scratchCartesian), stage);
        if (floorOffset !== 0) {
            frameState.entities[this.floor.id] = getSerializedEntityState(floor, time, stage);
        }
        // user tracking
        frameState.userTracking = options && options.userTracking;
        return frameState;
    };
    // All of the following work is only necessary when running in an old manager (version === 0)
    ContextService.prototype._updateBackwardsCompatability = function (frameState) {
        this._knownEntities.clear();
        // update the entities the manager knows about
        var entityService = this.entityService;
        for (var id in frameState.entities) {
            entityService.updateEntityFromSerializedState(id, frameState.entities[id]);
            this._updatingEntities.add(id);
            this._knownEntities.add(id);
        }
        // if the mangager didn't send us an update for a particular entity,
        // assume the manager no longer knows about it
        for (var _i = 0, _a = this._updatingEntities; _i < _a.length; _i++) {
            var id = _a[_i];
            if (!this._knownEntities.has(id)) {
                var entity = this.entities.getById(id);
                if (entity) {
                    if (entity.position)
                        entity.position.setValue(undefined);
                    if (entity.orientation)
                        entity.orientation.setValue(undefined);
                }
                this._updatingEntities.delete(id);
            }
        }
        // If running within an older manager, we have to set the stage based on the user pose. 
        var userPositionFixed = this._getEntityPositionInReferenceFrame(this.user, frameState.time, ReferenceFrame.FIXED, this._scratchCartesian);
        if (userPositionFixed) {
            var eusToFixedFrameTransform = eastUpSouthToFixedFrame(userPositionFixed, undefined, this._scratchMatrix4);
            var eusRotationMatrix = Matrix4.getRotation(eusToFixedFrameTransform, this._scratchMatrix3);
            var eusOrientation = Quaternion.fromRotationMatrix(eusRotationMatrix);
            this.stage.position.setValue(userPositionFixed, ReferenceFrame.FIXED);
            this.stage.orientation.setValue(eusOrientation);
        }
        else {
            this.stage.position.setValue(Cartesian3.fromElements(0, -this.deviceService.suggestedUserHeight, 0, this._scratchCartesian), this.user.position.referenceFrame);
            this.stage.orientation.setValue(Quaternion.IDENTITY);
        }
        frameState.entities[this.stage.id] = true; // assume overriden for _update
    };
    // TODO: This function is called a lot. Potential for optimization. 
    ContextService.prototype._update = function (frameState, skipEvents) {
        this._serializedFrameState = frameState;
        // update our time values
        var timestamp = performance.now();
        this.deltaTime = Math.min(timestamp - this.timestamp, this.maxDeltaTime);
        this.timestamp = timestamp;
        JulianDate.clone(frameState.time, this.time);
        // update provided entities
        if (this.sessionService.manager.isConnected && this.sessionService.manager.version[0] === 0) {
            this._updateBackwardsCompatability(frameState);
        }
        else {
            this._updateEntities(frameState.entities);
        }
        // update device entities (device service needs to know if manager is overriding it's entities)
        this.deviceService._processContextFrameState(frameState);
        // update context entities
        this._updateContextEntities(frameState);
        this._updateStageGeo();
        // update view and reality service
        this.viewService._processContextFrameState(frameState, this);
        this.realityService._processContextFrameState(frameState);
        // exit early if onlyUpdate flag is set
        if (skipEvents)
            return;
        // raise origin change event if necessary
        this._checkOriginChange();
        // raise events for the user to update and render the scene
        this.updateEvent.raiseEvent(this);
        this.renderEvent.raiseEvent(this);
        this.postRenderEvent.raiseEvent(this);
        // publish frameState to the manager (noop if this session is not a reality)
        this.realityService._publishContextFrameState(frameState);
        // submit frame if necessary
        this._trySubmitFrame();
    };
    ContextService.prototype._updateEntities = function (entities) {
        var entityService = this.entityService;
        for (var id in entities) {
            entityService.updateEntityFromSerializedState(id, entities[id]);
        }
    };
    ContextService.prototype._updateContextEntities = function (frameState) {
        var time = frameState.time;
        var entities = frameState.entities;
        // If the reality did not override the stage, then set the origin to the device origin.
        // Otherwise, find the appropriate origin pose. 
        var contextOrigin = this.origin;
        var contextStage = this.stage;
        var deviceOrigin = this.deviceService.origin;
        var deviceStage = this.deviceService.stage;
        var contextStagePosition = contextStage.position;
        var contextStageOrientation = contextStage.orientation;
        var contextOriginPosition = contextOrigin.position;
        var contextOriginOrientation = contextOrigin.orientation;
        if (!entities[contextStage.id]) {
            contextStagePosition.setValue(Cartesian3.ZERO, deviceStage);
            contextStageOrientation.setValue(Quaternion.IDENTITY);
            contextOriginPosition.setValue(Cartesian3.ZERO, deviceOrigin);
            contextOriginOrientation.setValue(Quaternion.IDENTITY);
        }
        else {
            // save stage relative to origin
            var stageRelativeToOrigin = this.getEntityPose(deviceStage, deviceOrigin);
            // first figure out where the origin should be
            var originRelativeToStage = this.getEntityPose(deviceOrigin, deviceStage);
            contextOriginPosition.setValue(originRelativeToStage.position, contextStage);
            contextOriginOrientation.setValue(originRelativeToStage.orientation);
            // convert origin to the same frame used by the overridden stage
            var rootFrame = getReachableAncestorReferenceFrames(contextStage, time, this._scratchArray)[0];
            if (!defined(rootFrame))
                throw new Error("Stage frame must have a reachable parent reference frame!");
            var originRelativeToRoot = this.getEntityPose(contextOrigin, rootFrame);
            contextOriginPosition.setValue(originRelativeToRoot.position, rootFrame);
            contextOriginOrientation.setValue(originRelativeToRoot.orientation);
            // convert stage to be relative to origin
            contextStagePosition.setValue(stageRelativeToOrigin.position, contextOrigin);
            contextStageOrientation.setValue(stageRelativeToOrigin.orientation);
        }
        // update user entity (relative to origin) based on device user (relative to device origin) if the reality did not override it
        var deviceUser = this.deviceService.user;
        var contextUser = this.user;
        if (!entities[contextUser.id]) {
            var userRelativeToOrigin = this.getEntityPose(deviceUser, deviceOrigin);
            var contextUserPosition = contextUser.position;
            var contextUserOrientation = contextUser.orientation;
            contextUserPosition.setValue(userRelativeToOrigin.position, contextOrigin);
            contextUserOrientation.setValue(userRelativeToOrigin.orientation);
        }
        else {
            this._convertEntityReferenceFrame(contextUser, time, contextStage);
        }
        // update view entity (if the reality did not set it)
        var contextView = this.view;
        if (!entities[contextView.id]) {
            var contextViewPosition = contextView.position;
            var contextViewOrientation = contextView.orientation;
            contextViewPosition.setValue(Cartesian3.ZERO, contextUser);
            contextViewOrientation.setValue(Quaternion.IDENTITY);
        }
        else {
            this._convertEntityReferenceFrame(contextView, time, contextUser);
        }
        // update subview entities (if the reality did not set them)
        for (var i = 0; i < frameState.subviews.length; i++) {
            if (!entities['ar.view_' + i]) {
                var deviceSubview = this.deviceService.getSubviewEntity(i);
                var contextSubview = this.getSubviewEntity(i);
                var subviewPositionValue = this._getEntityPositionInReferenceFrame(deviceSubview, time, deviceUser, this._scratchCartesian);
                var subviewOrientationValue = this._getEntityOrientationInReferenceFrame(deviceSubview, time, deviceUser, this._scratchQuaternion);
                var contextSubviewPosition = contextSubview.position;
                var contextSubviewOrientation = contextSubview.orientation;
                contextSubviewPosition.setValue(subviewPositionValue, contextView);
                contextSubviewOrientation.setValue(subviewOrientationValue);
            }
        }
        // update floor entity (if the reality did not set it)
        if (!entities[this.floor.id]) {
            var floorPosition = this.floor.position;
            floorPosition.setValue(Cartesian3.ZERO, contextStage);
        }
        else {
            this._convertEntityReferenceFrame(this.floor, time, contextStage);
        }
    };
    ContextService.prototype._updateStageGeo = function () {
        // update stageEUS and stageENU
        var time = this.time;
        var contextStage = this.stage;
        var stageFixedPosition = this._getEntityPositionInReferenceFrame(contextStage, time, ReferenceFrame.FIXED, this._scratchCartesian);
        if (stageFixedPosition) {
            // EUS
            var eusTransform = this._eastUpSouthToFixedFrame(stageFixedPosition, undefined, this._scratchMatrix4);
            var eusRotation = Matrix4.getRotation(eusTransform, this._scratchMatrix3);
            var eusOrientation = Quaternion.fromRotationMatrix(eusRotation, this._scratchQuaternion);
            this.stageEUS.position.setValue(stageFixedPosition, ReferenceFrame.FIXED);
            this.stageEUS.orientation.setValue(eusOrientation);
            // ENU
            var enuTransform = this._eastNorthUpToFixedFrame(stageFixedPosition, undefined, this._scratchMatrix4);
            var enuRotation = Matrix4.getRotation(enuTransform, this._scratchMatrix3);
            var enuOrientation = Quaternion.fromRotationMatrix(enuRotation, this._scratchQuaternion);
            this.stageENU.position.setValue(stageFixedPosition, ReferenceFrame.FIXED);
            this.stageENU.orientation.setValue(enuOrientation);
        }
        else {
            this.stageEUS.position.setValue(undefined, ReferenceFrame.FIXED);
            this.stageEUS.orientation.setValue(undefined);
            this.stageENU.position.setValue(undefined, ReferenceFrame.FIXED);
            this.stageENU.orientation.setValue(undefined);
        }
    };
    ContextService.prototype._checkOriginChange = function () {
        var time = this.time;
        var originReferenceFrame = this._getReachableAncestorReferenceFrames(this.origin, time, this._scratchArray)[0] || ReferenceFrame.FIXED;
        var originPose = this.getEntityPose(this.origin, originReferenceFrame);
        if (originReferenceFrame !== this._previousOriginReferenceFrame || originPose.status & PoseStatus.CHANGED) {
            this._previousOriginReferenceFrame = originReferenceFrame;
            if (this.sessionService.isRealityAugmenter)
                console.log('Updated context origin to ' + JSON.stringify(originPose.position) + " at " + stringIdentifierFromReferenceFrame(originReferenceFrame));
            this.originChangeEvent.raiseEvent(undefined);
        }
    };
    ContextService.prototype._trySubmitFrame = function () {
        var vrDisplay = this.deviceService.vrDisplay;
        if (this.deviceService.autoSubmitFrame &&
            vrDisplay && vrDisplay.isPresenting &&
            !this.sessionService.isRealityViewer) {
            vrDisplay.submitFrame();
        }
    };
    ContextService.prototype.getSubviewEntity = function (index) {
        var subviewEntity = this.entityService.collection.getOrCreateEntity('ar.view_' + index);
        if (!subviewEntity.position) {
            subviewEntity.position = new DynamicPositionProperty(Cartesian3.ZERO, this.user);
        }
        if (!subviewEntity.orientation) {
            subviewEntity.orientation = new DynamicProperty(Quaternion.IDENTITY);
        }
        return subviewEntity;
    };
    ContextService.prototype.subscribeGeolocation = function (options) {
        var _this = this;
        return this.sessionService.manager.whenConnected().then(function () {
            if (_this.sessionService.manager.versionNumber >= 1.4)
                return _this.entityService.subscribe(_this.origin.id, options).then(function () { });
            else
                return _this.entityService.subscribe(_this.stage.id, options).then(function () { });
        });
    };
    ContextService.prototype.unsubscribeGeolocation = function () {
        var _this = this;
        this.sessionService.manager.whenConnected().then(function () {
            if (_this.sessionService.manager.versionNumber >= 1.4)
                _this.entityService.unsubscribe(_this.origin.id);
            else
                _this.entityService.unsubscribe(_this.stage.id);
        });
    };
    ContextService.prototype._getInheritedMetaProperty = function (entity, metaPropKey) {
        var referenceFrame = entity.position.referenceFrame;
        while (referenceFrame) {
            var metaProp = referenceFrame['meta'] && referenceFrame['meta'][metaPropKey];
            if (defined(metaProp))
                return metaProp;
            referenceFrame = referenceFrame.position && referenceFrame.position.referenceFrame;
        }
    };
    Object.defineProperty(ContextService.prototype, "geoHeadingAccuracy", {
        /**
         * If geopose is available, this is the accuracy of the user heading
         */
        get: function () {
            return this._getInheritedMetaProperty(this.user, 'geoHeadingAccuracy');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ContextService.prototype, "geoHorizontalAccuracy", {
        /**
         * If geopose is available, this is the horizontal accuracy of the user geolocation
         */
        get: function () {
            return this._getInheritedMetaProperty(this.stage, 'geoHorizontalAccuracy');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ContextService.prototype, "geoVerticalAccuracy", {
        /**
         * If geopose is available, this is the vertical accuracy of the user geolocation
         */
        get: function () {
            return this._getInheritedMetaProperty(this.stage, 'geoVerticalAccuracy');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ContextService.prototype, "geoposeHeadingAccuracy", {
        /**
         * @deprecated
         */
        get: function () {
            return this.geoHeadingAccuracy;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ContextService.prototype, "geoposeHorizontalAccuracy", {
        /**
         * @deprecated
         */
        get: function () {
            return this.geoHorizontalAccuracy;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ContextService.prototype, "geoposeVerticalAccuracy", {
        /**
         * @deprecated
         */
        get: function () {
            return this.geoVerticalAccuracy;
        },
        enumerable: true,
        configurable: true
    });
    __decorate([
        deprecated('originChangeEvent'),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [])
    ], ContextService.prototype, "localOriginChangeEvent", null);
    __decorate([
        deprecated('origin'),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [])
    ], ContextService.prototype, "localOrigin", null);
    __decorate([
        deprecated(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [])
    ], ContextService.prototype, "localOriginEastUpSouth", null);
    __decorate([
        deprecated(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [])
    ], ContextService.prototype, "localOriginEastNorthUp", null);
    __decorate([
        deprecated('timestamp'),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [])
    ], ContextService.prototype, "systemTime", null);
    __decorate([
        deprecated('time'),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", JulianDate)
    ], ContextService.prototype, "getTime", null);
    __decorate([
        deprecated(),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], ContextService.prototype, "setDefaultReferenceFrame", null);
    __decorate([
        deprecated('defaultReferenceFrame'),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", Object)
    ], ContextService.prototype, "getDefaultReferenceFrame", null);
    __decorate([
        deprecated('subscribe'),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [String]),
        __metadata("design:returntype", Entity)
    ], ContextService.prototype, "subscribeToEntityById", null);
    __decorate([
        deprecated('EntityService.createFixed'),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Cartographic, Object]),
        __metadata("design:returntype", void 0)
    ], ContextService.prototype, "createGeoEntity", null);
    ContextService = __decorate([
        autoinject(),
        __metadata("design:paramtypes", [EntityService,
            SessionService,
            DeviceService,
            ViewService,
            RealityService])
    ], ContextService);
    return ContextService;
}());
export { ContextService };
var ContextServiceProvider = (function () {
    function ContextServiceProvider(sessionService, contextService, deviceService, entityServiceProvider, permissionServiceProvider, realityServiceProvider, device) {
        var _this = this;
        this.sessionService = sessionService;
        this.contextService = contextService;
        this.deviceService = deviceService;
        this.entityServiceProvider = entityServiceProvider;
        this.permissionServiceProvider = permissionServiceProvider;
        this.realityServiceProvider = realityServiceProvider;
        this.device = device;
        this._cacheTime = new JulianDate(0, 0);
        this._sessionEntities = {};
        // private _temp:any = {};
        this._includedFrames = {};
        this._excludedFrames = {};
        this.desiredGeolocationOptions = {};
        this.sessionGeolocationOptions = new Map();
        // subscribe to context geolocation if any child sessions have subscribed
        this.entityServiceProvider.sessionSubscribedEvent.addEventListener(function (evt) {
            if (evt.id === _this.contextService.stage.id && evt.session !== _this.sessionService.manager) {
                _this._setGeolocationOptions(evt.session, evt.options);
                _this.contextService.subscribeGeolocation(_this.desiredGeolocationOptions);
            }
        });
        // unsubscribe from context geolocation if all child sessions are unsubscribed
        this.entityServiceProvider.sessionUnsubscribedEvent.addEventListener(function () {
            var subscribers = _this.entityServiceProvider.subscribersByEntity.get(_this.contextService.stage.id);
            if (subscribers && subscribers.size === 1 && subscribers.has(_this.sessionService.manager)) {
                _this.contextService.unsubscribeGeolocation();
            }
        });
        this.sessionService.connectEvent.addEventListener(function (session) {
            var subscriptions = _this.entityServiceProvider.subscriptionsBySubscriber.get(session);
            subscriptions[_this.contextService.user.id] = {};
            subscriptions[_this.contextService.stage.id] = {};
            subscriptions[_this.deviceService.user.id] = {};
            subscriptions[_this.deviceService.stage.id] = {};
        });
        // submit frame state from reality
        this.realityServiceProvider.nextFrameStateEvent.addEventListener(function (frameState) {
            _this.contextService.submitFrameState(frameState);
            _this._publishFrameState(); // publish frame state to child sessions
        });
    }
    ContextServiceProvider.prototype._publishFrameState = function () {
        var state = this.contextService.serializedFrameState;
        this._cacheTime = JulianDate.clone(state.time, this._cacheTime);
        for (var _i = 0, _a = this.sessionService.managedSessions; _i < _a.length; _i++) {
            var session = _a[_i];
            this._sendUpdateForSession(state, session);
        }
    };
    ContextServiceProvider.prototype._sendUpdateForSession = function (state, session) {
        if (Role.isRealityViewer(session.info.role) && session.versionNumber < 1.4) {
            return; // older reality versions don't expect to receive update events from manager
        }
        var sessionEntities = this._sessionEntities;
        var entityServiceProvider = this.entityServiceProvider;
        // clear session entities
        for (var id in sessionEntities) {
            delete sessionEntities[id];
        }
        // reference all entities from the primary frame state.
        if (state.entities) {
            for (var id in state.entities) {
                sessionEntities[id] = state.entities[id];
            }
        }
        // identity frames to provide to the session
        var includedFrames = this._includedFrames;
        for (id in includedFrames)
            delete includedFrames[id]; //clear
        var subscriptions = entityServiceProvider.subscriptionsBySubscriber.get(session);
        if (subscriptions) {
            for (var id in subscriptions) {
                includedFrames[id] = true;
            }
        }
        var deviceService = this.deviceService;
        var deviceOriginId = deviceService.origin.id;
        var deviceStageId = deviceService.stage.id;
        var deviceUserId = deviceService.stage.id;
        var contextService = this.contextService;
        var contextOriginId = contextService.origin.id;
        var contextStageId = contextService.stage.id;
        var contextUserId = contextService.stage.id;
        includedFrames[deviceOriginId] = true;
        includedFrames[deviceStageId] = true;
        includedFrames[deviceUserId] = true;
        includedFrames[contextOriginId] = true;
        includedFrames[contextStageId] = true;
        includedFrames[contextUserId] = true;
        includedFrames[contextService.view.id] = true;
        for (var i = 0; i < state.subviews.length; i++) {
            includedFrames['ar.view_' + i] = true;
            includedFrames['ar.device.view_' + i] = true;
        }
        // identify frames to hide from the session
        var excludedFrames = this._excludedFrames;
        for (id in excludedFrames)
            delete excludedFrames[id]; //clear
        // exclude geolocated frames if necessary 
        if (this.permissionServiceProvider.getPermissionState(session, 'geolocation') != PermissionState.GRANTED) {
            excludedFrames[deviceOriginId] = true;
            excludedFrames[contextOriginId] = true;
        }
        // get states for all included frames, minus excluded frames
        entityServiceProvider.fillEntityStateMap(sessionEntities, state.time, includedFrames, excludedFrames);
        // remove device orientation frame since each session can get this directly
        if (session.versionNumber >= 1.4)
            delete sessionEntities[this.device.deviceOrientation.id];
        // recycle the frame state object, but with the session entities
        var parentEntities = state.entities;
        state.entities = sessionEntities;
        state.time = state.time;
        state.sendTime = JulianDate.now(state.sendTime);
        // send
        session.send('ar.context.update', state);
        // restore the parent entities
        state.entities = parentEntities;
    };
    ContextServiceProvider.prototype._setGeolocationOptions = function (session, options) {
        var _this = this;
        this.sessionGeolocationOptions.set(session, options);
        session.closeEvent.addEventListener(function () {
            _this.sessionGeolocationOptions.delete(session);
            _this._updateDesiredGeolocationOptions();
        });
        this._updateDesiredGeolocationOptions();
    };
    ContextServiceProvider.prototype._updateDesiredGeolocationOptions = function () {
        var reducedOptions = {};
        this.sessionGeolocationOptions.forEach(function (options, session) {
            reducedOptions.enableHighAccuracy =
                reducedOptions.enableHighAccuracy || (options && options.enableHighAccuracy) || false;
        });
        if (this.desiredGeolocationOptions.enableHighAccuracy !== reducedOptions.enableHighAccuracy) {
            this.desiredGeolocationOptions = reducedOptions;
        }
    };
    ContextServiceProvider = __decorate([
        autoinject(),
        __metadata("design:paramtypes", [SessionService,
            ContextService,
            DeviceService,
            EntityServiceProvider,
            PermissionServiceProvider,
            RealityServiceProvider,
            Device])
    ], ContextServiceProvider);
    return ContextServiceProvider;
}());
export { ContextServiceProvider };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udGV4dC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImNvbnRleHQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLDhCQUE4QixDQUFBO0FBQ3pELE9BQU8sRUFDSCxPQUFPLEVBQ1AsTUFBTSxFQUVOLFlBQVksRUFDWix1QkFBdUIsRUFDdkIsZUFBZSxFQUNmLFVBQVUsRUFDVixVQUFVLEVBQ1YsT0FBTyxFQUNQLE9BQU8sRUFDUCxVQUFVLEVBQ1YsVUFBVSxFQUNWLFVBQVUsRUFDVixjQUFjLEVBQ2Qsa0JBQWtCLEVBQ3JCLE1BQU0seUJBQXlCLENBQUE7QUFDaEMsT0FBTyxFQUNILGtCQUFrQixFQUNsQixpQkFBaUIsRUFFakIscUJBQXFCLEVBQ3JCLFdBQVcsRUFHWCxjQUFjLEVBQ2QsUUFBUSxFQUNSLElBQUksRUFDUCxNQUFNLFVBQVUsQ0FBQTtBQUNqQixPQUFPLEVBQUUsY0FBYyxFQUFlLE1BQU0sV0FBVyxDQUFBO0FBQ3ZELE9BQU8sRUFDSCxLQUFLLEVBQ0wsa0NBQWtDLEVBQ2xDLG1DQUFtQyxFQUNuQyx3QkFBd0IsRUFDeEIsaUNBQWlDLEVBQ2pDLG9DQUFvQyxFQUNwQyxVQUFVLEVBQ1YsdUJBQXVCLEVBQ3ZCLDJCQUEyQixFQUM5QixNQUFNLFNBQVMsQ0FBQTtBQUNoQixPQUFPLEVBQUUsYUFBYSxFQUFFLHFCQUFxQixFQUFjLFVBQVUsRUFBRSxNQUFNLFVBQVUsQ0FBQTtBQUN2RixPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sRUFBRSxNQUFNLFVBQVUsQ0FBQTtBQUNoRCxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sUUFBUSxDQUFBO0FBQ3BDLE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxlQUFlLEVBQUUsTUFBTSxjQUFjLENBQUE7QUFDekUsT0FBTyxFQUFFLGNBQWMsRUFBRSxzQkFBc0IsRUFBRSxNQUFNLFdBQVcsQ0FBQTtBQUVsRTs7R0FFRztBQUVIO0lB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O1FBQ0gsSUFBSSxDQUFDLGdDQUFnQyxFQUFFLENBQUM7SUFDNUMsQ0FBQztJQUVPLGlFQUFnQyxHQUF4QztRQUNJLElBQU0sY0FBYyxHQUFzQixFQUFFLENBQUM7UUFDN0MsSUFBSSxDQUFDLHlCQUF5QixDQUFDLE9BQU8sQ0FBQyxVQUFDLE9BQU8sRUFBRSxPQUFPO1lBQ3BELGNBQWMsQ0FBQyxrQkFBa0I7Z0JBQzdCLGNBQWMsQ0FBQyxrQkFBa0IsSUFBSSxDQUFDLE9BQU8sSUFBSSxPQUFPLENBQUMsa0JBQWtCLENBQUMsSUFBSSxLQUFLLENBQUM7UUFDOUYsQ0FBQyxDQUFDLENBQUM7UUFDSCxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMseUJBQXlCLENBQUMsa0JBQWtCLEtBQUssY0FBYyxDQUFDLGtCQUFrQixDQUFDLENBQUMsQ0FBQztZQUMxRixJQUFJLENBQUMseUJBQXlCLEdBQUcsY0FBYyxDQUFDO1FBQ3BELENBQUM7SUFDTCxDQUFDO0lBcEtRLHNCQUFzQjtRQURsQyxVQUFVLEVBQUU7eUNBTW9CLGNBQWM7WUFDZCxjQUFjO1lBQ2YsYUFBYTtZQUNMLHFCQUFxQjtZQUNqQix5QkFBeUI7WUFDNUIsc0JBQXNCO1lBQ3RDLE1BQU07T0FYbEIsc0JBQXNCLENBcUtsQztJQUFELDZCQUFDO0NBQUEsQUFyS0QsSUFxS0M7U0FyS1ksc0JBQXNCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYXV0b2luamVjdCB9IGZyb20gJ2F1cmVsaWEtZGVwZW5kZW5jeS1pbmplY3Rpb24nXG5pbXBvcnQge1xuICAgIGRlZmluZWQsXG4gICAgRW50aXR5LFxuICAgIEVudGl0eUNvbGxlY3Rpb24sXG4gICAgQ2FydG9ncmFwaGljLFxuICAgIER5bmFtaWNQb3NpdGlvblByb3BlcnR5LFxuICAgIER5bmFtaWNQcm9wZXJ0eSxcbiAgICBDYXJ0ZXNpYW4zLFxuICAgIFF1YXRlcm5pb24sXG4gICAgTWF0cml4MyxcbiAgICBNYXRyaXg0LFxuICAgIENlc2l1bU1hdGgsXG4gICAgVHJhbnNmb3JtcyxcbiAgICBKdWxpYW5EYXRlLFxuICAgIFJlZmVyZW5jZUZyYW1lLFxuICAgIFBlcnNwZWN0aXZlRnJ1c3R1bVxufSBmcm9tICcuL2Nlc2l1bS9jZXNpdW0taW1wb3J0cydcbmltcG9ydCB7XG4gICAgREVGQVVMVF9ORUFSX1BMQU5FLFxuICAgIERFRkFVTFRfRkFSX1BMQU5FLFxuICAgIFNlcmlhbGl6ZWRFbnRpdHlTdGF0ZU1hcCxcbiAgICBTZXJpYWxpemVkU3Vidmlld0xpc3QsXG4gICAgU3Vidmlld1R5cGUsXG4gICAgQ29udGV4dEZyYW1lU3RhdGUsXG4gICAgR2VvbG9jYXRpb25PcHRpb25zLFxuICAgIENhbnZhc1ZpZXdwb3J0LFxuICAgIFZpZXdwb3J0LFxuICAgIFJvbGVcbn0gZnJvbSAnLi9jb21tb24nXG5pbXBvcnQgeyBTZXNzaW9uU2VydmljZSwgU2Vzc2lvblBvcnQgfSBmcm9tICcuL3Nlc3Npb24nXG5pbXBvcnQgeyBcbiAgICBFdmVudCxcbiAgICBzdHJpbmdJZGVudGlmaWVyRnJvbVJlZmVyZW5jZUZyYW1lLFxuICAgIGdldFJlYWNoYWJsZUFuY2VzdG9yUmVmZXJlbmNlRnJhbWVzLFxuICAgIGdldFNlcmlhbGl6ZWRFbnRpdHlTdGF0ZSxcbiAgICBnZXRFbnRpdHlQb3NpdGlvbkluUmVmZXJlbmNlRnJhbWUsXG4gICAgZ2V0RW50aXR5T3JpZW50YXRpb25JblJlZmVyZW5jZUZyYW1lLFxuICAgIGRlcHJlY2F0ZWQsXG4gICAgZWFzdFVwU291dGhUb0ZpeGVkRnJhbWUsXG4gICAgY29udmVydEVudGl0eVJlZmVyZW5jZUZyYW1lXG59IGZyb20gJy4vdXRpbHMnXG5pbXBvcnQgeyBFbnRpdHlTZXJ2aWNlLCBFbnRpdHlTZXJ2aWNlUHJvdmlkZXIsIEVudGl0eVBvc2UsIFBvc2VTdGF0dXMgfSBmcm9tICcuL2VudGl0eSdcbmltcG9ydCB7IERldmljZVNlcnZpY2UsIERldmljZSB9IGZyb20gJy4vZGV2aWNlJ1xuaW1wb3J0IHsgVmlld1NlcnZpY2UgfSBmcm9tICcuL3ZpZXcnXG5pbXBvcnQgeyBQZXJtaXNzaW9uU2VydmljZVByb3ZpZGVyLCBQZXJtaXNzaW9uU3RhdGUgfSBmcm9tICcuL3Blcm1pc3Npb24nXG5pbXBvcnQgeyBSZWFsaXR5U2VydmljZSwgUmVhbGl0eVNlcnZpY2VQcm92aWRlciB9IGZyb20gJy4vcmVhbGl0eSdcblxuLyoqXG4gKiBQcm92aWRlcyBhIG1lYW5zIG9mIHF1ZXJ5aW5nIHRoZSBjdXJyZW50IHN0YXRlIG9mIHJlYWxpdHkuXG4gKi9cbkBhdXRvaW5qZWN0KClcbmV4cG9ydCBjbGFzcyBDb250ZXh0U2VydmljZSB7XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHJvdGVjdGVkIGVudGl0eVNlcnZpY2U6IEVudGl0eVNlcnZpY2UsXG4gICAgICAgIHByb3RlY3RlZCBzZXNzaW9uU2VydmljZTogU2Vzc2lvblNlcnZpY2UsXG4gICAgICAgIHByb3RlY3RlZCBkZXZpY2VTZXJ2aWNlOiBEZXZpY2VTZXJ2aWNlLFxuICAgICAgICBwcm90ZWN0ZWQgdmlld1NlcnZpY2U6IFZpZXdTZXJ2aWNlLFxuICAgICAgICBwcm90ZWN0ZWQgcmVhbGl0eVNlcnZpY2U6IFJlYWxpdHlTZXJ2aWNlXG4gICAgKSB7XG4gICAgICAgIHRoaXMuc2Vzc2lvblNlcnZpY2UubWFuYWdlci5vblsnYXIuY29udGV4dC51cGRhdGUnXSA9IChzdGF0ZTogQ29udGV4dEZyYW1lU3RhdGUpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHNjcmF0Y2hGcnVzdHVtID0gdGhpcy5fc2NyYXRjaEZydXN0dW07XG5cbiAgICAgICAgICAgIC8vIGJhY2t3YXJkcy1jb21wYXRcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygc3RhdGUucmVhbGl0eSAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICBzdGF0ZS5yZWFsaXR5ID0gc3RhdGUucmVhbGl0eSAmJiBzdGF0ZS5yZWFsaXR5Wyd1cmknXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghc3RhdGUudmlld3BvcnQgJiYgc3RhdGVbJ3ZpZXcnXSAmJiBzdGF0ZVsndmlldyddLnZpZXdwb3J0KSB7XG4gICAgICAgICAgICAgICAgc3RhdGUudmlld3BvcnQgPSBzdGF0ZVsndmlldyddLnZpZXdwb3J0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFzdGF0ZS5zdWJ2aWV3cyAmJiBzdGF0ZVsndmlldyddICYmIHN0YXRlWyd2aWV3J10uc3Vidmlld3MpIHtcbiAgICAgICAgICAgICAgICBzdGF0ZS5zdWJ2aWV3cyA9IHN0YXRlWyd2aWV3J10uc3Vidmlld3M7XG4gICAgICAgICAgICAgICAgc2NyYXRjaEZydXN0dW0ubmVhciA9IERFRkFVTFRfTkVBUl9QTEFORTtcbiAgICAgICAgICAgICAgICBzY3JhdGNoRnJ1c3R1bS5mYXIgPSBERUZBVUxUX0ZBUl9QTEFORTtcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHMgb2Ygc3RhdGUuc3Vidmlld3MpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZnJ1c3R1bSA9IHNbJ2ZydXN0dW0nXTtcbiAgICAgICAgICAgICAgICAgICAgc2NyYXRjaEZydXN0dW0ueE9mZnNldCA9IGZydXN0dW0ueE9mZnNldCB8fCAwO1xuICAgICAgICAgICAgICAgICAgICBzY3JhdGNoRnJ1c3R1bS55T2Zmc2V0ID0gZnJ1c3R1bS55T2Zmc2V0IHx8IDA7XG4gICAgICAgICAgICAgICAgICAgIHNjcmF0Y2hGcnVzdHVtLmZvdiA9IGZydXN0dW0uZm92IHx8IENlc2l1bU1hdGguUElfT1ZFUl9USFJFRTtcbiAgICAgICAgICAgICAgICAgICAgc2NyYXRjaEZydXN0dW0uYXNwZWN0UmF0aW8gPSBmcnVzdHVtLmFzcGVjdFJhdGlvIHx8IDE7XG4gICAgICAgICAgICAgICAgICAgIHMucHJvamVjdGlvbk1hdHJpeCA9IE1hdHJpeDQuY2xvbmUoc2NyYXRjaEZydXN0dW0ucHJvamVjdGlvbk1hdHJpeCwgcy5wcm9qZWN0aW9uTWF0cml4KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIXN0YXRlLmVudGl0aWVzIVt0aGlzLnVzZXIuaWRdICYmIHN0YXRlWyd2aWV3J10gJiYgc3RhdGVbJ3ZpZXcnXS5wb3NlKSB7XG4gICAgICAgICAgICAgICAgc3RhdGUuZW50aXRpZXMhW3RoaXMudXNlci5pZF0gPSBzdGF0ZVsndmlldyddLnBvc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBlbmQgYmFja3dhcmRzLWNvbXBhdFxuXG4gICAgICAgICAgICAvLyB0aGUgYHNraXBFdmVudHNgIGZsYWcgc2tpcHMgdXBkYXRlL3JlbmRlciBldmVudHMsXG4gICAgICAgICAgICAvLyBhbGxvd2luZyBhIHJlYWxpdHkgdG8gcHJvY2VzcyAnYXIuY29udGV4dC51cGRhdGUnIHNvIGl0IGtub3dzIFxuICAgICAgICAgICAgLy8gd2hhdCB0aGUgY3VycmVudCBzdGF0ZSBvZiB0aGUgc3lzdGVtIGlzLCB3aGlsZSBtYWludGFpbmluZyBjb250cm9sXG4gICAgICAgICAgICAvLyBvdmVyIGl0J3MgZnJhbWUgdGltaW5nIChieSBjYWxsaW5nIHN1Ym1pdEZyYW1lU3RhdGUpXG4gICAgICAgICAgICBjb25zdCBza2lwRXZlbnRzID0gdGhpcy5zZXNzaW9uU2VydmljZS5pc1JlYWxpdHlWaWV3ZXJcbiAgICAgICAgICAgIHRoaXMuX3VwZGF0ZShzdGF0ZSwgc2tpcEV2ZW50cyk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHRoaXMuX3NjcmF0Y2hGcnVzdHVtLm5lYXIgPSBERUZBVUxUX05FQVJfUExBTkU7XG4gICAgICAgIHRoaXMuX3NjcmF0Y2hGcnVzdHVtLmZhciA9IERFRkFVTFRfRkFSX1BMQU5FO1xuICAgICAgICB0aGlzLl9zY3JhdGNoRnJ1c3R1bS5mb3YgPSBDZXNpdW1NYXRoLlBJX09WRVJfVEhSRUU7XG4gICAgICAgIHRoaXMuX3NjcmF0Y2hGcnVzdHVtLmFzcGVjdFJhdGlvID0gMTtcblxuICAgICAgICB0aGlzLl9zZXJpYWxpemVkRnJhbWVTdGF0ZSA9IHtcbiAgICAgICAgICAgIHJlYWxpdHk6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIHRpbWU6IEp1bGlhbkRhdGUubm93KCksXG4gICAgICAgICAgICBlbnRpdGllczoge30sXG4gICAgICAgICAgICB2aWV3cG9ydDogbmV3IENhbnZhc1ZpZXdwb3J0LFxuICAgICAgICAgICAgc3Vidmlld3M6ICBbe1xuICAgICAgICAgICAgICAgIHR5cGU6IFN1YnZpZXdUeXBlLlNJTkdVTEFSLFxuICAgICAgICAgICAgICAgIHZpZXdwb3J0OiBuZXcgVmlld3BvcnQsXG4gICAgICAgICAgICAgICAgcHJvamVjdGlvbk1hdHJpeDogdGhpcy5fc2NyYXRjaEZydXN0dW0ucHJvamVjdGlvbk1hdHJpeFxuICAgICAgICAgICAgfV0sXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgcHVibGljIGdldCBlbnRpdGllcygpIDogRW50aXR5Q29sbGVjdGlvbiB7IHJldHVybiB0aGlzLmVudGl0eVNlcnZpY2UuY29sbGVjdGlvbiB9XG5cbiAgICAvKipcbiAgICAgKiBBbiBldmVudCB0aGF0IGlzIHJhaXNlZCBhZnRlciBtYW5hZ2VkIGVudGl0aWVzIGhhdmUgYmVlbiB1cGRhdGVkIGZvciBcbiAgICAgKiB0aGUgY3VycmVudCBmcmFtZS4gXG4gICAgICovXG4gICAgcHVibGljIHVwZGF0ZUV2ZW50ID0gbmV3IEV2ZW50PENvbnRleHRTZXJ2aWNlPigpO1xuXG4gICAgLyoqXG4gICAgICogQW4gZXZlbnQgdGhhdCBpcyByYWlzZWQgd2hlbiBpdCBpcyBhbiBhcHByb3JpYXRlIHRpbWUgdG8gcmVuZGVyIGdyYXBoaWNzLiBcbiAgICAgKiBUaGlzIGV2ZW50IGZpcmVzIGFmdGVyIHRoZSB1cGRhdGUgZXZlbnQuIFxuICAgICAqL1xuICAgIHB1YmxpYyByZW5kZXJFdmVudCA9IG5ldyBFdmVudDxDb250ZXh0U2VydmljZT4oKTtcblxuICAgIC8qKlxuICAgICAqIEFuIGV2ZW50IHRoYXQgaXMgcmFpc2VkIGFmdGVyIHRoZSByZW5kZXIgZXZlbnQgXG4gICAgICovXG4gICAgcHVibGljIHBvc3RSZW5kZXJFdmVudCA9IG5ldyBFdmVudDxDb250ZXh0U2VydmljZT4oKTtcbiAgICBcbiAgICAvKipcbiAgICAgKiBBbiBldmVudCB0aGF0IGZpcmVzIHdoZW4gdGhlIG9yaWdpbiBjaGFuZ2VzLlxuICAgICAqL1xuICAgIHB1YmxpYyBvcmlnaW5DaGFuZ2VFdmVudCA9IG5ldyBFdmVudDx2b2lkPigpO1xuXG4gICAgLyoqXG4gICAgICogQW4gZXZlbnQgdGhhdCBmaXJlcyB3aGVuIHRoZSBsb2NhbCBvcmlnaW4gY2hhbmdlcy5cbiAgICAgKi9cbiAgICBAZGVwcmVjYXRlZCgnb3JpZ2luQ2hhbmdlRXZlbnQnKVxuICAgIHB1YmxpYyBnZXQgbG9jYWxPcmlnaW5DaGFuZ2VFdmVudCgpIHtyZXR1cm4gdGhpcy5vcmlnaW5DaGFuZ2VFdmVudH07XG5cbiAgICAvKipcbiAgICAgKiBBIG1vbm90b25pY2FsbHkgaW5jcmVhc2luZyB2YWx1ZSAoaW4gbWlsbGlzZWNvbmRzKSBmb3IgdGhlIGN1cnJlbnQgZnJhbWUgc3RhdGUuXG4gICAgICogVGhpcyB2YWx1ZSBpcyB1c2VmdWwgb25seSBmb3IgZG9pbmcgYWNjdXJhdGUgKnRpbWluZyosIG5vdCBmb3IgZGV0ZXJtaW5pbmcgXG4gICAgICogdGhlIGFic29sdXRlIHRpbWUuIFVzZSBbW0NvbnRleHRTZXJ2aWNlLnRpbWVdXSBmb3IgYWJzb2x1dGUgdGltZS4gXG4gICAgICogVGhpcyB2YWx1ZSBpcyAtMSB1bnRpbCB0aGUgZmlyc3QgW1tDb250ZXh0U2VydmljZS51cGRhdGVFdmVudF1dLiBcbiAgICAgKi9cbiAgICBwdWJsaWMgdGltZXN0YW1wID0gLTE7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgdGltZSBpbiBtaWxsaXNlY29uZHMgc2luY2UgdGhlIHByZXZpb3VzIHRpbWVzdGFtcCwgXG4gICAgICogY2FwcGVkIHRvIFtbQ29udGV4dFNlcnZpY2UubWF4RGVsdGFUaW1lXV1cbiAgICAgKi9cbiAgICBwdWJsaWMgZGVsdGFUaW1lID0gMDtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgdmFsdWUgY2FwcyB0aGUgZGVsdGFUaW1lIGZvciBlYWNoIGZyYW1lLiBCeSBkZWZhdWx0LCBcbiAgICAgKiB0aGUgdmFsdWUgaXMgMS8zcyAoMzMzLjNtcylcbiAgICAgKi9cbiAgICBwdWJsaWMgbWF4RGVsdGFUaW1lID0gMSAvIDMgKiAxMDAwO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGN1cnJlbnQgKGFic29sdXRlKSB0aW1lIGFjY29yZGluZyB0byB0aGUgY3VycmVudCByZWFsaXR5LlxuICAgICAqIFRoaXMgdmFsdWUgaXMgYXJiaXRyYXJ5IHVudGlsIHRoZSBmaXJzdCBbW0NvbnRleHRTZXJ2aWNlLnVwZGF0ZUV2ZW50XV0uIFxuICAgICAqL1xuICAgIHB1YmxpYyB0aW1lID0gbmV3IEp1bGlhbkRhdGUoMCwwKTtcblxuICAgICAvKipcbiAgICAgKiBBbiBlbnRpdHkgcmVwcmVzZW50aW5nIHRoZSBvcmlnaW4sIHdoaWNoIGlzIG9yaWVudGVkIFxuICAgICAqIHdpdGggK1kgdXAuIFRoZSBvcmlnaW4gY2hhbmdlcyBpbmZyZXF1ZW50bHksIGlzIHBsYXRmb3JtIGRlcGVuZGVudCxcbiAgICAgKiBhbmQgaXMgdGhlIHN1Z2dlc3RlZCBvcmlnaW4gZm9yIGEgcmVuZGVyaW5nIHNjZW5lZ3JhcGguIFxuICAgICAqIFxuICAgICAqIEFueSB0aW1lIHRoZSBvcmlnaW4gY2hhbmdlcywgdGhlIG9yaWdpbkNoYW5nZSBldmVudCBpcyByYWlzZWQuIFxuICAgICAqL1xuICAgIHB1YmxpYyBvcmlnaW46IEVudGl0eSA9IHRoaXMuZW50aXRpZXMuYWRkKG5ldyBFbnRpdHkoe1xuICAgICAgICBpZDogJ2FyLm9yaWdpbicsXG4gICAgICAgIG5hbWU6ICdPcmlnaW4nLFxuICAgICAgICBwb3NpdGlvbjogbmV3IER5bmFtaWNQb3NpdGlvblByb3BlcnR5KHVuZGVmaW5lZCwgUmVmZXJlbmNlRnJhbWUuRklYRUQpLFxuICAgICAgICBvcmllbnRhdGlvbjogbmV3IER5bmFtaWNQcm9wZXJ0eSh1bmRlZmluZWQpXG4gICAgfSkpO1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgRE9GIHN1cHBvcnQgb2YgdGhlIHJlYWxpdHkuXG4gICAgICogXCJub25lXCJ8XCIzRE9GXCJ8XCI2RE9GXCJcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0IHVzZXJUcmFja2luZygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NlcmlhbGl6ZWRGcmFtZVN0YXRlICYmIHRoaXMuX3NlcmlhbGl6ZWRGcmFtZVN0YXRlLnVzZXJUcmFja2luZyB8fCAnM0RPRic7XG4gICAgfVxuXG4gICAgLyoqIGFsaWFzIGZvciBvcmlnaW4gKi9cbiAgICBAZGVwcmVjYXRlZCgnb3JpZ2luJylcbiAgICBwdWJsaWMgZ2V0IGxvY2FsT3JpZ2luKCkgeyByZXR1cm4gdGhpcy5fbG9jYWxPcmlnaW4gfVxuICAgIHByaXZhdGUgX2xvY2FsT3JpZ2luID0gdGhpcy5lbnRpdGllcy5hZGQobmV3IEVudGl0eSh7XG4gICAgICAgIGlkOiAnYXIubG9jYWxPcmlnaW4nLFxuICAgICAgICBuYW1lOiAnTG9jYWwgT3JpZ2luJyxcbiAgICAgICAgcG9zaXRpb246IG5ldyBEeW5hbWljUG9zaXRpb25Qcm9wZXJ0eShDYXJ0ZXNpYW4zLlpFUk8sIHRoaXMub3JpZ2luKSxcbiAgICAgICAgb3JpZW50YXRpb246IG5ldyBEeW5hbWljUHJvcGVydHkoUXVhdGVybmlvbi5JREVOVElUWSlcbiAgICB9KSk7XG5cbiAgICAvLyBUbyBiZSByZW1vdmVkLiBUaGlzIGlzIG5vIGxvbmdlciB1c2VmdWwuXG4gICAgQGRlcHJlY2F0ZWQoKVxuICAgIHB1YmxpYyBnZXQgbG9jYWxPcmlnaW5FYXN0VXBTb3V0aCgpIHtyZXR1cm4gdGhpcy5fbG9jYWxPcmlnaW47fVxuXG4gICAgLy8gVG8gYmUgcmVtb3ZlZC4gVGhpcyBpcyBubyBsb25nZXIgdXNlZnVsLlxuICAgIEBkZXByZWNhdGVkKClcbiAgICBwdWJsaWMgZ2V0IGxvY2FsT3JpZ2luRWFzdE5vcnRoVXAoKSB7IHJldHVybiB0aGlzLl9sb2NhbE9yaWdpbkVhc3ROb3J0aFVwOyB9XG4gICAgcHJpdmF0ZSBfbG9jYWxPcmlnaW5FYXN0Tm9ydGhVcDogRW50aXR5ID0gdGhpcy5lbnRpdGllcy5hZGQobmV3IEVudGl0eSh7XG4gICAgICAgIGlkOiAnYXIubG9jYWxPcmlnaW5FTlUnLFxuICAgICAgICBuYW1lOiAnTG9jYWwgT3JpZ2luIChFTlUpJyxcbiAgICAgICAgcG9zaXRpb246IG5ldyBEeW5hbWljUG9zaXRpb25Qcm9wZXJ0eShDYXJ0ZXNpYW4zLlpFUk8sIHRoaXMub3JpZ2luKSxcbiAgICAgICAgb3JpZW50YXRpb246IG5ldyBEeW5hbWljUHJvcGVydHkoUXVhdGVybmlvbi5mcm9tQXhpc0FuZ2xlKENhcnRlc2lhbjMuVU5JVF9YLCAtTWF0aC5QSSAvIDIpKVxuICAgIH0pKTtcblxuICAgIC8qKlxuICAgICAqIEEgY29vcmRpbmF0ZSBzeXN0ZW0gcmVwcmVzZW50aW5nIHRoZSBwaHlzaWNhbCBzcGFjZSBpbiB3aGljaCB0aGUgdXNlciBpcyBmcmVlIHRvIG1vdmUgXG4gICAgICogYXJvdW5kIHdpdGggaGlnaC1wcmVjaXNpb24gdHJhY2tpbmcsIGFuZCBwb3NpdGlvbmVkIG9uIHRoZSBzdXJmYWNlIHRoZSB1c2VyIGlzIHN0YW5kaW5nIG9uLiBcbiAgICAgKiBUaGlzIHNwYWNlIGlzIG9yaWVudGVkIHN1Y2ggdGhhdCBhIHBsYXRmb3JtLWRlcGVuZGVudCBcImZvcndhcmRcIiBjb3JyZXNwb25kcyB0byAtWi5cbiAgICAgKi9cbiAgICBwdWJsaWMgc3RhZ2U6IEVudGl0eSA9IHRoaXMuZW50aXRpZXMuYWRkKG5ldyBFbnRpdHkoe1xuICAgICAgICBpZDogJ2FyLnN0YWdlJyxcbiAgICAgICAgbmFtZTogJ1N0YWdlJyxcbiAgICAgICAgcG9zaXRpb246IG5ldyBEeW5hbWljUG9zaXRpb25Qcm9wZXJ0eSh1bmRlZmluZWQsIFJlZmVyZW5jZUZyYW1lLkZJWEVEKSxcbiAgICAgICAgb3JpZW50YXRpb246IG5ldyBEeW5hbWljUHJvcGVydHkodW5kZWZpbmVkKVxuICAgIH0pKTtcblxuICAgIC8qKlxuICAgICAqIEEgY29vcmRpbmF0ZSBzeXN0ZW0gcG9zaXRpb25lZCBhdCB0aGUgc3RhZ2UsIFxuICAgICAqIHdoZXJlICtYIGlzIGVhc3QsICtZIGlzIHVwLCBhbmQgK1ogaXMgc291dGggKEVhc3QtVXAtU291dGgpLCBpZiBnZW9sb2NhdGlvbiBpcyBrbm93bi5cbiAgICAgKiBJZiBnZW9sb2NhdGlvbiBpcyB1bmtub3duLCB0aGlzIGVudGl0eSBoYXMgYW4gdW5kZWZpbmVkIHBvc2UuIFxuICAgICAqL1xuICAgIHB1YmxpYyBzdGFnZUVVUzogRW50aXR5ID0gdGhpcy5lbnRpdGllcy5hZGQobmV3IEVudGl0eSh7XG4gICAgICAgIGlkOiAnYXIuc3RhZ2VFVVMnLFxuICAgICAgICBuYW1lOiAnU3RhZ2UgKEVVUyknLFxuICAgICAgICBwb3NpdGlvbjogbmV3IER5bmFtaWNQb3NpdGlvblByb3BlcnR5KHVuZGVmaW5lZCwgdGhpcy5zdGFnZSksXG4gICAgICAgIG9yaWVudGF0aW9uOiBuZXcgRHluYW1pY1Byb3BlcnR5KHVuZGVmaW5lZClcbiAgICB9KSlcblxuICAgIC8qKlxuICAgICAqIEEgY29vcmRpbmF0ZSBzeXN0ZW0gcG9zaXRpb25lZCBhdCB0aGUgc3RhZ2UsIFxuICAgICAqIHdoZXJlICtYIGlzIGVhc3QsICtZIGlzIG5vcnRoLCBhbmQgK1ogaXMgdXAgKEVhc3QtTm9ydGgtVXApLCBpZiBnZW9sb2NhdGlvbiBpcyBrbm93bi5cbiAgICAgKiBJZiBnZW9sb2NhdGlvbiBpcyB1bmtub3duLCB0aGlzIGVudGl0eSBoYXMgYW4gdW5kZWZpbmVkIHBvc2UuIFxuICAgICAqL1xuICAgIHB1YmxpYyBzdGFnZUVOVTogRW50aXR5ID0gdGhpcy5lbnRpdGllcy5hZGQobmV3IEVudGl0eSh7XG4gICAgICAgIGlkOiAnYXIuc3RhZ2VFTlUnLFxuICAgICAgICBuYW1lOiAnU3RhZ2UgKEVOVSknLFxuICAgICAgICBwb3NpdGlvbjogbmV3IER5bmFtaWNQb3NpdGlvblByb3BlcnR5KHVuZGVmaW5lZCwgdGhpcy5zdGFnZSksXG4gICAgICAgIG9yaWVudGF0aW9uOiBuZXcgRHluYW1pY1Byb3BlcnR5KHVuZGVmaW5lZClcbiAgICB9KSlcblxuICAgIC8qKlxuICAgICAqIEEgY29vcmRpbmF0ZSBzeXN0ZW0gcmVwcmVzZW50aW5nIHRoZSBmbG9vci5cbiAgICAgKiBXaGlsZSB0aGUgYHN0YWdlYCBhbHdheXMgcmVwcmVzZW50cyBhIHBoeXNpY2FsIHN1cmZhY2UsIFxuICAgICAqIHRoZSBgZmxvb3JgIGVudGl0eSBtYXkgcmVwcmVzZW50IGEgdmlydHVhbCBmbG9vci5cbiAgICAgKi9cbiAgICBwdWJsaWMgZmxvb3I6IEVudGl0eSA9IHRoaXMuZW50aXRpZXMuYWRkKG5ldyBFbnRpdHkoe1xuICAgICAgICBpZDogJ2FyLmZsb29yJyxcbiAgICAgICAgbmFtZTogJ0Zsb29yJyxcbiAgICAgICAgcG9zaXRpb246IG5ldyBEeW5hbWljUG9zaXRpb25Qcm9wZXJ0eShDYXJ0ZXNpYW4zLlpFUk8sIHRoaXMuc3RhZ2UpLFxuICAgICAgICBvcmllbnRhdGlvbjogbmV3IER5bmFtaWNQcm9wZXJ0eShRdWF0ZXJuaW9uLklERU5USVRZKVxuICAgIH0pKTtcblxuICAgIC8qKlxuICAgICAqIEFuIGNvb3JkaW5hdGUgc3lzdGVtIHJlcHJlc2VudGluZyB0aGUgdXNlcixcbiAgICAgKiB3aGVyZSArWCBpcyByaWdodCwgK1kgaXMgdXAsIGFuZCAtWiBpcyB0aGUgZGlyZWN0aW9uIHRoZSB1c2VyIGlzIGZhY2luZ1xuICAgICAqL1xuICAgIHB1YmxpYyB1c2VyOiBFbnRpdHkgPSB0aGlzLmVudGl0aWVzLmFkZChuZXcgRW50aXR5KHtcbiAgICAgICAgaWQ6ICdhci51c2VyJyxcbiAgICAgICAgbmFtZTogJ1VzZXInLFxuICAgICAgICBwb3NpdGlvbjogbmV3IER5bmFtaWNQb3NpdGlvblByb3BlcnR5KHVuZGVmaW5lZCwgdGhpcy5zdGFnZSksXG4gICAgICAgIG9yaWVudGF0aW9uOiBuZXcgRHluYW1pY1Byb3BlcnR5KHVuZGVmaW5lZClcbiAgICB9KSk7XG4gICAgXG4gICAgLyoqXG4gICAgICogQW4gY29vcmRpbmF0ZSBzeXN0ZW0gcmVwcmVzZW50aW5nIHRoZSByZW5kZXJpbmcgdmlldywgXG4gICAgICogd2hlcmUgK1ggaXMgcmlnaHQsICtZIGlzIHVwLCBhbmQgLVogaXMgdGhlIGRpcmVjdGlvbiBvZiB0aGUgdmlldy5cbiAgICAgKi9cbiAgICBwdWJsaWMgdmlldzogRW50aXR5ID0gdGhpcy5lbnRpdGllcy5hZGQobmV3IEVudGl0eSh7XG4gICAgICAgIGlkOiAnYXIudmlldycsXG4gICAgICAgIG5hbWU6ICdWaWV3JyxcbiAgICAgICAgcG9zaXRpb246IG5ldyBEeW5hbWljUG9zaXRpb25Qcm9wZXJ0eShDYXJ0ZXNpYW4zLlpFUk8sIHRoaXMudXNlciksXG4gICAgICAgIG9yaWVudGF0aW9uOiBuZXcgRHluYW1pY1Byb3BlcnR5KFF1YXRlcm5pb24uSURFTlRJVFkpXG4gICAgfSkpO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGRlZmF1bHQgcmVmZXJlbmNlIGZyYW1lIHRvIHVzZSB3aGVuIGNhbGxpbmcgYGdldEVudGl0eVBvc2VgLlxuICAgICAqIEJ5IGRlZmF1bHQsIHRoaXMgaXMgdGhlIGBvcmlnaW5gIHJlZmVyZW5jZSBmcmFtZS5cbiAgICAgKi9cbiAgICBwdWJsaWMgZGVmYXVsdFJlZmVyZW5jZUZyYW1lOiBFbnRpdHl8UmVmZXJlbmNlRnJhbWUgPSB0aGlzLm9yaWdpbjtcblxuICAgIC8qKlxuICAgICAqIFRoZSBzZXJpYWxpemVkIGZyYW1lIHN0YXRlIGZvciB0aGlzIGZyYW1lXG4gICAgICovXG4gICAgcHVibGljIGdldCBzZXJpYWxpemVkRnJhbWVTdGF0ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NlcmlhbGl6ZWRGcmFtZVN0YXRlO1xuICAgIH1cblxuICAgIC8vIHRoZSBjdXJyZW50IHNlcmlhbGl6ZWQgZnJhbWUgc3RhdGVcbiAgICBwcml2YXRlIF9zZXJpYWxpemVkRnJhbWVTdGF0ZTogQ29udGV4dEZyYW1lU3RhdGU7XG5cbiAgICBwcml2YXRlIF91cGRhdGluZ0VudGl0aWVzID0gbmV3IFNldDxzdHJpbmc+KCk7XG4gICAgcHJpdmF0ZSBfa25vd25FbnRpdGllcyA9IG5ldyBTZXQ8c3RyaW5nPigpO1xuXG4gICAgcHJpdmF0ZSBfc2NyYXRjaENhcnRlc2lhbiA9IG5ldyBDYXJ0ZXNpYW4zO1xuICAgIHByaXZhdGUgX3NjcmF0Y2hRdWF0ZXJuaW9uID0gbmV3IFF1YXRlcm5pb247XG4gICAgcHJpdmF0ZSBfc2NyYXRjaEZydXN0dW0gPSBuZXcgUGVyc3BlY3RpdmVGcnVzdHVtKCk7XG5cbiAgICAvKipcbiAgICAgKiBEZXByZWNhdGVkLiBVc2UgdGltZXN0YW1wIHByb3BlcnR5LlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgQGRlcHJlY2F0ZWQoJ3RpbWVzdGFtcCcpXG4gICAgcHVibGljIGdldCBzeXN0ZW1UaW1lKCkge1xuICAgICAgICByZXR1cm4gdGhpcy50aW1lc3RhbXA7XG4gICAgfSBcblxuICAgIC8qKlxuICAgICAqIERlcHJlY2F0ZWQuIFRvIGJlIHJlbW92ZWQuIFxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgQGRlcHJlY2F0ZWQoJ3RpbWUnKVxuICAgIHB1YmxpYyBnZXRUaW1lKCk6IEp1bGlhbkRhdGUge1xuICAgICAgICByZXR1cm4gdGhpcy50aW1lO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIERlcHJlY2F0ZWQuIFRvIGJlIHJlbW92ZWQuIFVzZSB0aGUgZGVmYXVsdFJlZmVyZW5jZUZyYW1lIHByb3BlcnR5IGlmIG5lY2Vzc2FyeS4gXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBAZGVwcmVjYXRlZCgpXG4gICAgcHVibGljIHNldERlZmF1bHRSZWZlcmVuY2VGcmFtZShvcmlnaW46IEVudGl0eXxSZWZlcmVuY2VGcmFtZSkge1xuICAgICAgICB0aGlzLmRlZmF1bHRSZWZlcmVuY2VGcmFtZSA9IG9yaWdpbjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEZXByZWNhdGVkLiBUbyBiZSByZW1vdmVkLiAgVXNlIHRoZSBkZWZhdWx0UmVmZXJlbmNlRnJhbWUgcHJvcGVydHkuIFxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgQGRlcHJlY2F0ZWQoJ2RlZmF1bHRSZWZlcmVuY2VGcmFtZScpXG4gICAgcHVibGljIGdldERlZmF1bHRSZWZlcmVuY2VGcmFtZSgpOiBFbnRpdHl8UmVmZXJlbmNlRnJhbWUge1xuICAgICAgICByZXR1cm4gdGhpcy5kZWZhdWx0UmVmZXJlbmNlRnJhbWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU3Vic2NyaWJlIHRvIHBvc2UgdXBkYXRlcyBmb3IgYW4gZW50aXR5IHNwZWNpZmllZCBieSB0aGUgZ2l2ZW4gaWRcbiAgICAgKiBcbiAgICAgKiBAZGVwcmVjYXRlZCBVc2UgW1tDb250ZXh0U2VydmljZSNzdWJzY3JpYmVdXVxuICAgICAqIEBwYXJhbSBpZCAtIHRoZSBpZCBvZiB0aGUgZGVzaXJlZCBlbnRpdHlcbiAgICAgKiBAcmV0dXJucyBBIG5ldyBvciBleGlzdGluZyBlbnRpdHkgaW5zdGFuY2UgbWF0Y2hpbmcgdGhlIGdpdmVuIGlkXG4gICAgICovXG4gICAgQGRlcHJlY2F0ZWQoJ3N1YnNjcmliZScpXG4gICAgcHVibGljIHN1YnNjcmliZVRvRW50aXR5QnlJZChpZDogc3RyaW5nKTogRW50aXR5IHtcbiAgICAgICAgdGhpcy5zdWJzY3JpYmUoaWQpO1xuICAgICAgICByZXR1cm4gdGhpcy5lbnRpdGllcy5nZXRPckNyZWF0ZUVudGl0eShpZCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU3Vic2NyaWJlIHRvIHBvc2UgdXBkYXRlcyBmb3IgdGhlIGdpdmVuIGVudGl0eSBpZFxuICAgICAqIFxuICAgICAqIEByZXR1cm5zIEEgUHJvbWlzZSB0aGF0IHJlc29sdmVzIHRvIGEgbmV3IG9yIGV4aXN0aW5nIGVudGl0eSBcbiAgICAgKiBpbnN0YW5jZSBtYXRjaGluZyB0aGUgZ2l2ZW4gaWQsIGlmIHRoZSBzdWJzY3JpcHRpb24gaXMgc3VjY2Vzc2Z1bFxuICAgICAqL1xuICAgIHB1YmxpYyBzdWJzY3JpYmU6IChpZE9yRW50aXR5OiBzdHJpbmd8RW50aXR5LCBvcHRpb25zPzp7fSwgc2Vzc2lvbj86U2Vzc2lvblBvcnQpID0+IFByb21pc2U8RW50aXR5PiA9IHRoaXMuZW50aXR5U2VydmljZS5zdWJzY3JpYmUuYmluZCh0aGlzLmVudGl0eVNlcnZpY2UpO1xuXG4gICAgLyoqXG4gICAgICogVW5zdWJzY3JpYmUgdG8gcG9zZSB1cGRhdGVzIGZvciB0aGUgZ2l2ZW4gZW50aXR5IGlkXG4gICAgICovXG4gICAgcHVibGljIHVuc3Vic2NyaWJlOiAoaWRPckVudGl0eTogc3RyaW5nfEVudGl0eSwgc2Vzc2lvbj86U2Vzc2lvblBvcnQpID0+IHZvaWQgPSB0aGlzLmVudGl0eVNlcnZpY2UudW5zdWJzY3JpYmUuYmluZCh0aGlzLmVudGl0eVNlcnZpY2UpO1xuXG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBjYXJ0b2dyYXBoaWMgcG9zaXRpb24gb2YgYW4gRW50aXR5IGZvciB0aGUgY3VycmVudCBjb250ZXh0IHRpbWVcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0RW50aXR5Q2FydG9ncmFwaGljKGVudGl0eTpFbnRpdHksIHJlc3VsdD86Q2FydG9ncmFwaGljKSA6IENhcnRvZ3JhcGhpY3x1bmRlZmluZWQge1xuICAgICAgICByZXR1cm4gdGhpcy5lbnRpdHlTZXJ2aWNlLmdldENhcnRvZ3JhcGhpYyhlbnRpdHksIHRoaXMudGltZSwgcmVzdWx0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEZXByZWNhdGVkLiBVc2UgYEVudGl0eVNlcnZpY2UuY3JlYXRlRml4ZWRgIChgYXBwLmVudGl0eS5jcmVhdGVGaXhlZGApO1xuICAgICAqL1xuICAgIEBkZXByZWNhdGVkKCdFbnRpdHlTZXJ2aWNlLmNyZWF0ZUZpeGVkJylcbiAgICBwdWJsaWMgY3JlYXRlR2VvRW50aXR5KGNhcnRvZ3JhcGhpYzpDYXJ0b2dyYXBoaWMsIGxvY2FsVG9GaXhlZDp0eXBlb2YgVHJhbnNmb3Jtcy5lYXN0Tm9ydGhVcFRvRml4ZWRGcmFtZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5lbnRpdHlTZXJ2aWNlLmNyZWF0ZUZpeGVkKGNhcnRvZ3JhcGhpYywgbG9jYWxUb0ZpeGVkKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBuZXcgRW50aXR5UG9zZSBpbnN0YW5jZSB0byByZXByZXNlbnQgdGhlIHBvc2Ugb2YgYW4gZW50aXR5XG4gICAgICogcmVsYXRpdmUgdG8gYSBnaXZlbiByZWZlcmVuY2UgZnJhbWUuIElmIG5vIHJlZmVyZW5jZSBmcmFtZSBpcyBzcGVjaWZpZWQsXG4gICAgICogdGhlbiB0aGUgcG9zZSBpcyBiYXNlZCBvbiB0aGUgY29udGV4dCdzIGRlZmF1bHRSZWZlcmVuY2VGcmFtZS5cbiAgICAgKiBcbiAgICAgKiBAcGFyYW0gZW50aXR5T3JJZCAtIHRoZSBlbnRpdHkgdG8gdHJhY2tcbiAgICAgKiBAcGFyYW0gcmVmZXJlbmNlRnJhbWVPcklkIC0gVGhlIGludGVuZGVkIHJlZmVyZW5jZSBmcmFtZS4gRGVmYXVsdHMgdG8gYHRoaXMuZGVmYXVsdFJlZmVyZW5jZUZyYW1lYC5cbiAgICAgKi9cbiAgICBwdWJsaWMgY3JlYXRlRW50aXR5UG9zZShlbnRpdHlPcklkOiBFbnRpdHl8c3RyaW5nLCByZWZlcmVuY2VGcmFtZU9ySWQ6IHN0cmluZyB8IFJlZmVyZW5jZUZyYW1lIHwgRW50aXR5ID0gdGhpcy5kZWZhdWx0UmVmZXJlbmNlRnJhbWUpIDogRW50aXR5UG9zZSB7ICAgICAgICAgICAgXG4gICAgICAgIHJldHVybiB0aGlzLmVudGl0eVNlcnZpY2UuY3JlYXRlRW50aXR5UG9zZShlbnRpdHlPcklkLCByZWZlcmVuY2VGcmFtZU9ySWQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGN1cnJlbnQgcG9zZSBvZiBhbiBlbnRpdHksIHJlbGF0aXZlIHRvIGEgZ2l2ZW4gcmVmZXJlbmNlIGZyYW1lLlxuICAgICAqXG4gICAgICogQHBhcmFtIGVudGl0eU9ySWQgLSBUaGUgZW50aXR5IHdob3NlIHN0YXRlIGlzIHRvIGJlIHF1ZXJpZWQuXG4gICAgICogQHBhcmFtIHJlZmVyZW5jZUZyYW1lT3JJZCAtIFRoZSBpbnRlbmRlZCByZWZlcmVuY2UgZnJhbWUuIERlZmF1bHRzIHRvIGB0aGlzLmRlZmF1bHRSZWZlcmVuY2VGcmFtZWAuXG4gICAgICovXG4gICAgcHVibGljIGdldEVudGl0eVBvc2UoZW50aXR5T3JJZDogRW50aXR5fHN0cmluZywgcmVmZXJlbmNlRnJhbWVPcklkOiBzdHJpbmcgfCBSZWZlcmVuY2VGcmFtZSB8IEVudGl0eSA9IHRoaXMuZGVmYXVsdFJlZmVyZW5jZUZyYW1lKTogRW50aXR5UG9zZSB7XG4gICAgICAgIHJldHVybiB0aGlzLmVudGl0eVNlcnZpY2UuZ2V0RW50aXR5UG9zZShlbnRpdHlPcklkLCByZWZlcmVuY2VGcmFtZU9ySWQsIHRoaXMudGltZSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBfZnJhbWVJbmRleCA9IC0xO1xuXG4gICAgLyoqXG4gICAgICogUHJvY2VzcyB0aGUgbmV4dCBmcmFtZSBzdGF0ZSAod2hpY2ggc2hvdWxkIGNvbWUgZnJvbSB0aGUgY3VycmVudCByZWFsaXR5IHZpZXdlcilcbiAgICAgKi9cbiAgICBwdWJsaWMgc3VibWl0RnJhbWVTdGF0ZShmcmFtZVN0YXRlOiBDb250ZXh0RnJhbWVTdGF0ZSkge1xuICAgICAgICBmcmFtZVN0YXRlLmluZGV4ID0gKyt0aGlzLl9mcmFtZUluZGV4O1xuICAgICAgICB0aGlzLl91cGRhdGUoZnJhbWVTdGF0ZSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBfc2NyYXRjaEZyYW1lU3RhdGU6Q29udGV4dEZyYW1lU3RhdGUgPSB7XG4gICAgICAgIHRpbWU6PGFueT57fSxcbiAgICAgICAgZW50aXRpZXM6IHt9LFxuICAgICAgICB2aWV3cG9ydDogPGFueT57fSxcbiAgICAgICAgc3Vidmlld3M6IFtdXG4gICAgfVxuXG4gICAgcHJpdmF0ZSBfZ2V0U2VyaWFsaXplZEVudGl0eVN0YXRlID0gZ2V0U2VyaWFsaXplZEVudGl0eVN0YXRlO1xuICAgIHByaXZhdGUgX2dldEVudGl0eVBvc2l0aW9uSW5SZWZlcmVuY2VGcmFtZSA9IGdldEVudGl0eVBvc2l0aW9uSW5SZWZlcmVuY2VGcmFtZTtcbiAgICBwcml2YXRlIF9nZXRFbnRpdHlPcmllbnRhdGlvbkluUmVmZXJlbmNlRnJhbWUgPSBnZXRFbnRpdHlPcmllbnRhdGlvbkluUmVmZXJlbmNlRnJhbWU7XG4gICAgcHJpdmF0ZSBfZWFzdFVwU291dGhUb0ZpeGVkRnJhbWUgPSBlYXN0VXBTb3V0aFRvRml4ZWRGcmFtZTtcbiAgICBwcml2YXRlIF9lYXN0Tm9ydGhVcFRvRml4ZWRGcmFtZSA9IFRyYW5zZm9ybXMuZWFzdE5vcnRoVXBUb0ZpeGVkRnJhbWU7XG4gICAgcHJpdmF0ZSBfZ2V0UmVhY2hhYmxlQW5jZXN0b3JSZWZlcmVuY2VGcmFtZXMgPSBnZXRSZWFjaGFibGVBbmNlc3RvclJlZmVyZW5jZUZyYW1lcztcbiAgICBwcml2YXRlIF9zY3JhdGNoQXJyYXkgPSBbXTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIGZyYW1lIHN0YXRlLlxuICAgICAqIFxuICAgICAqIEBwYXJhbSB0aW1lIFxuICAgICAqIEBwYXJhbSB2aWV3cG9ydCBcbiAgICAgKiBAcGFyYW0gc3Vidmlld0xpc3QgXG4gICAgICogQHBhcmFtIHVzZXJUcmFja2luZ1xuICAgICAqIEBwYXJhbSBlbnRpdHlPcHRpb25zIFxuICAgICAqL1xuICAgIHB1YmxpYyBjcmVhdGVGcmFtZVN0YXRlKFxuICAgICAgICB0aW1lOkp1bGlhbkRhdGUsXG4gICAgICAgIHZpZXdwb3J0OkNhbnZhc1ZpZXdwb3J0LFxuICAgICAgICBzdWJ2aWV3TGlzdDpTZXJpYWxpemVkU3Vidmlld0xpc3QsXG4gICAgICAgIG9wdGlvbnM/OiB7b3ZlcnJpZGVTdGFnZT86Ym9vbGVhbiwgb3ZlcnJpZGVVc2VyPzpib29sZWFuLCBvdmVycmlkZVZpZXc/OmJvb2xlYW4sIG92ZXJyaWRlU3Vidmlld3M/OmJvb2xlYW4sIGZsb29yT2Zmc2V0PzpudW1iZXIsIHVzZXJUcmFja2luZz86XCJub25lXCJ8XCIzRE9GXCJ8XCI2RE9GXCJ9XG4gICAgKSA6IENvbnRleHRGcmFtZVN0YXRlIHtcblxuICAgICAgICBsZXQgb3ZlcnJpZGVVc2VyID0gb3B0aW9ucyAmJiBvcHRpb25zLm92ZXJyaWRlVXNlcjtcbiAgICAgICAgaWYgKHRoaXMuZGV2aWNlU2VydmljZS5zdHJpY3QpIHtcbiAgICAgICAgICAgIGlmIChvdmVycmlkZVVzZXIpIHtcbiAgICAgICAgICAgICAgICBvdmVycmlkZVVzZXIgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGZyYW1lU3RhdGU6Q29udGV4dEZyYW1lU3RhdGUgPSB0aGlzLl9zY3JhdGNoRnJhbWVTdGF0ZTtcbiAgICAgICAgZnJhbWVTdGF0ZS50aW1lID0gSnVsaWFuRGF0ZS5jbG9uZSh0aW1lLCBmcmFtZVN0YXRlLnRpbWUpO1xuICAgICAgICBmcmFtZVN0YXRlLnZpZXdwb3J0ID0gQ2FudmFzVmlld3BvcnQuY2xvbmUodmlld3BvcnQsIGZyYW1lU3RhdGUudmlld3BvcnQpITtcbiAgICAgICAgZnJhbWVTdGF0ZS5zdWJ2aWV3cyA9IFNlcmlhbGl6ZWRTdWJ2aWV3TGlzdC5jbG9uZShzdWJ2aWV3TGlzdCwgZnJhbWVTdGF0ZS5zdWJ2aWV3cykhO1xuICAgICAgICBjb25zdCBlbnRpdGllcyA9IGZyYW1lU3RhdGUuZW50aXRpZXMgPSB7fTtcblxuICAgICAgICBjb25zdCBnZXRTZXJpYWxpemVkRW50aXR5U3RhdGUgPSB0aGlzLl9nZXRTZXJpYWxpemVkRW50aXR5U3RhdGU7XG5cbiAgICAgICAgLy8gc3RhZ2VcbiAgICAgICAgY29uc3Qgc3RhZ2UgPSB0aGlzLnN0YWdlO1xuICAgICAgICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLm92ZXJyaWRlU3RhZ2UpIHtcbiAgICAgICAgICAgIGVudGl0aWVzW3N0YWdlLmlkXSA9IGdldFNlcmlhbGl6ZWRFbnRpdHlTdGF0ZShzdGFnZSwgdGltZSwgdW5kZWZpbmVkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHVzZXJcbiAgICAgICAgY29uc3QgdXNlciA9IHRoaXMudXNlcjtcbiAgICAgICAgaWYgKG92ZXJyaWRlVXNlcikge1xuICAgICAgICAgICAgZW50aXRpZXNbdXNlci5pZF0gPSBnZXRTZXJpYWxpemVkRW50aXR5U3RhdGUodXNlciwgdGltZSwgc3RhZ2UpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gdmlld1xuICAgICAgICBjb25zdCB2aWV3ID0gdGhpcy52aWV3O1xuICAgICAgICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLm92ZXJyaWRlVmlldykge1xuICAgICAgICAgICAgZW50aXRpZXNbdmlldy5pZF0gPSBnZXRTZXJpYWxpemVkRW50aXR5U3RhdGUodmlldywgdGltZSwgdXNlcik7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC8vIHN1YnZpZXdzXG4gICAgICAgIGlmIChvcHRpb25zICYmIG9wdGlvbnMub3ZlcnJpZGVTdWJ2aWV3cykge1xuICAgICAgICAgICAgZm9yIChsZXQgaW5kZXg9MDsgaW5kZXggPCBzdWJ2aWV3TGlzdC5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgICAgICAgICAvLyBjaGVjayBmb3IgdmFsaWQgcHJvamVjdGlvbiBtYXRyaWNlc1xuICAgICAgICAgICAgICAgIGNvbnN0IHN1YnZpZXcgPSBzdWJ2aWV3TGlzdFtpbmRleF07XG4gICAgICAgICAgICAgICAgaWYgKCFpc0Zpbml0ZShzdWJ2aWV3LnByb2plY3Rpb25NYXRyaXhbMF0pKVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgcHJvamVjdGlvbiBtYXRyaXggKGNvbnRhaW5zIG5vbi1maW5pdGUgdmFsdWVzKScpO1xuICAgICAgICAgICAgICAgIC8vIHN1YnZpZXdcbiAgICAgICAgICAgICAgICBjb25zdCBzdWJ2aWV3RW50aXR5ID0gdGhpcy5nZXRTdWJ2aWV3RW50aXR5KGluZGV4KTtcbiAgICAgICAgICAgICAgICBlbnRpdGllc1tzdWJ2aWV3RW50aXR5LmlkXSA9IGdldFNlcmlhbGl6ZWRFbnRpdHlTdGF0ZShzdWJ2aWV3RW50aXR5LCB0aW1lLCB2aWV3KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGZsb29yXG4gICAgICAgIGNvbnN0IGZsb29yT2Zmc2V0ID0gb3B0aW9ucyAmJiBvcHRpb25zLmZsb29yT2Zmc2V0IHx8IDA7XG4gICAgICAgIGNvbnN0IGZsb29yID0gdGhpcy5mbG9vcjtcbiAgICAgICAgKGZsb29yLnBvc2l0aW9uIGFzIER5bmFtaWNQb3NpdGlvblByb3BlcnR5KS5zZXRWYWx1ZShDYXJ0ZXNpYW4zLmZyb21FbGVtZW50cygwLGZsb29yT2Zmc2V0LDAsIHRoaXMuX3NjcmF0Y2hDYXJ0ZXNpYW4pLCBzdGFnZSk7XG4gICAgICAgIGlmIChmbG9vck9mZnNldCAhPT0gMCkge1xuICAgICAgICAgICAgZnJhbWVTdGF0ZS5lbnRpdGllc1t0aGlzLmZsb29yLmlkXSA9IGdldFNlcmlhbGl6ZWRFbnRpdHlTdGF0ZShmbG9vciwgdGltZSwgc3RhZ2UpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gdXNlciB0cmFja2luZ1xuICAgICAgICBmcmFtZVN0YXRlLnVzZXJUcmFja2luZyA9IG9wdGlvbnMgJiYgb3B0aW9ucy51c2VyVHJhY2tpbmc7XG5cbiAgICAgICAgcmV0dXJuIGZyYW1lU3RhdGU7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBfc2NyYXRjaE1hdHJpeDMgPSBuZXcgTWF0cml4MztcbiAgICBwcml2YXRlIF9zY3JhdGNoTWF0cml4NCA9IG5ldyBNYXRyaXg0O1xuXG4gICAgLy8gQWxsIG9mIHRoZSBmb2xsb3dpbmcgd29yayBpcyBvbmx5IG5lY2Vzc2FyeSB3aGVuIHJ1bm5pbmcgaW4gYW4gb2xkIG1hbmFnZXIgKHZlcnNpb24gPT09IDApXG4gICAgcHJpdmF0ZSBfdXBkYXRlQmFja3dhcmRzQ29tcGF0YWJpbGl0eShmcmFtZVN0YXRlOkNvbnRleHRGcmFtZVN0YXRlKSB7XG4gICAgICAgIHRoaXMuX2tub3duRW50aXRpZXMuY2xlYXIoKTtcblxuICAgICAgICAvLyB1cGRhdGUgdGhlIGVudGl0aWVzIHRoZSBtYW5hZ2VyIGtub3dzIGFib3V0XG4gICAgICAgIGNvbnN0IGVudGl0eVNlcnZpY2UgPSB0aGlzLmVudGl0eVNlcnZpY2U7XG4gICAgICAgIGZvciAoY29uc3QgaWQgaW4gZnJhbWVTdGF0ZS5lbnRpdGllcykge1xuICAgICAgICAgICAgZW50aXR5U2VydmljZS51cGRhdGVFbnRpdHlGcm9tU2VyaWFsaXplZFN0YXRlKGlkLCBmcmFtZVN0YXRlLmVudGl0aWVzW2lkXSk7XG4gICAgICAgICAgICB0aGlzLl91cGRhdGluZ0VudGl0aWVzLmFkZChpZCk7XG4gICAgICAgICAgICB0aGlzLl9rbm93bkVudGl0aWVzLmFkZChpZCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBpZiB0aGUgbWFuZ2FnZXIgZGlkbid0IHNlbmQgdXMgYW4gdXBkYXRlIGZvciBhIHBhcnRpY3VsYXIgZW50aXR5LFxuICAgICAgICAvLyBhc3N1bWUgdGhlIG1hbmFnZXIgbm8gbG9uZ2VyIGtub3dzIGFib3V0IGl0XG4gICAgICAgIGZvciAoY29uc3QgaWQgb2YgPHN0cmluZ1tdPjxhbnk+dGhpcy5fdXBkYXRpbmdFbnRpdGllcykge1xuICAgICAgICAgICAgaWYgKCF0aGlzLl9rbm93bkVudGl0aWVzLmhhcyhpZCkpIHtcbiAgICAgICAgICAgICAgICBsZXQgZW50aXR5ID0gdGhpcy5lbnRpdGllcy5nZXRCeUlkKGlkKTtcbiAgICAgICAgICAgICAgICBpZiAoZW50aXR5KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlbnRpdHkucG9zaXRpb24pIChlbnRpdHkucG9zaXRpb24gYXMgRHluYW1pY1Bvc2l0aW9uUHJvcGVydHkpLnNldFZhbHVlKHVuZGVmaW5lZCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlbnRpdHkub3JpZW50YXRpb24pIChlbnRpdHkub3JpZW50YXRpb24gYXMgRHluYW1pY1Byb3BlcnR5KS5zZXRWYWx1ZSh1bmRlZmluZWQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLl91cGRhdGluZ0VudGl0aWVzLmRlbGV0ZShpZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBJZiBydW5uaW5nIHdpdGhpbiBhbiBvbGRlciBtYW5hZ2VyLCB3ZSBoYXZlIHRvIHNldCB0aGUgc3RhZ2UgYmFzZWQgb24gdGhlIHVzZXIgcG9zZS4gXG4gICAgICAgIGNvbnN0IHVzZXJQb3NpdGlvbkZpeGVkID0gdGhpcy5fZ2V0RW50aXR5UG9zaXRpb25JblJlZmVyZW5jZUZyYW1lKFxuICAgICAgICAgICAgdGhpcy51c2VyLFxuICAgICAgICAgICAgZnJhbWVTdGF0ZS50aW1lLFxuICAgICAgICAgICAgUmVmZXJlbmNlRnJhbWUuRklYRUQsXG4gICAgICAgICAgICB0aGlzLl9zY3JhdGNoQ2FydGVzaWFuXG4gICAgICAgICk7XG4gICAgICAgIGlmICh1c2VyUG9zaXRpb25GaXhlZCkge1xuICAgICAgICAgICAgY29uc3QgZXVzVG9GaXhlZEZyYW1lVHJhbnNmb3JtID0gZWFzdFVwU291dGhUb0ZpeGVkRnJhbWUodXNlclBvc2l0aW9uRml4ZWQsIHVuZGVmaW5lZCwgdGhpcy5fc2NyYXRjaE1hdHJpeDQpO1xuICAgICAgICAgICAgY29uc3QgZXVzUm90YXRpb25NYXRyaXggPSBNYXRyaXg0LmdldFJvdGF0aW9uKGV1c1RvRml4ZWRGcmFtZVRyYW5zZm9ybSwgdGhpcy5fc2NyYXRjaE1hdHJpeDMpO1xuICAgICAgICAgICAgY29uc3QgZXVzT3JpZW50YXRpb24gPSBRdWF0ZXJuaW9uLmZyb21Sb3RhdGlvbk1hdHJpeChldXNSb3RhdGlvbk1hdHJpeCk7XG4gICAgICAgICAgICAodGhpcy5zdGFnZS5wb3NpdGlvbiBhcyBEeW5hbWljUG9zaXRpb25Qcm9wZXJ0eSkuc2V0VmFsdWUodXNlclBvc2l0aW9uRml4ZWQsIFJlZmVyZW5jZUZyYW1lLkZJWEVEKTtcbiAgICAgICAgICAgICh0aGlzLnN0YWdlLm9yaWVudGF0aW9uIGFzIER5bmFtaWNQcm9wZXJ0eSkuc2V0VmFsdWUoZXVzT3JpZW50YXRpb24pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgKHRoaXMuc3RhZ2UucG9zaXRpb24gYXMgRHluYW1pY1Bvc2l0aW9uUHJvcGVydHkpLnNldFZhbHVlKENhcnRlc2lhbjMuZnJvbUVsZW1lbnRzKDAsLXRoaXMuZGV2aWNlU2VydmljZS5zdWdnZXN0ZWRVc2VySGVpZ2h0LCAwLCB0aGlzLl9zY3JhdGNoQ2FydGVzaWFuKSwgdGhpcy51c2VyLnBvc2l0aW9uIS5yZWZlcmVuY2VGcmFtZSk7XG4gICAgICAgICAgICAodGhpcy5zdGFnZS5vcmllbnRhdGlvbiBhcyBEeW5hbWljUHJvcGVydHkpLnNldFZhbHVlKFF1YXRlcm5pb24uSURFTlRJVFkpO1xuICAgICAgICB9XG4gICAgICAgIGZyYW1lU3RhdGUuZW50aXRpZXNbdGhpcy5zdGFnZS5pZF0gPSA8YW55PnRydWU7IC8vIGFzc3VtZSBvdmVycmlkZW4gZm9yIF91cGRhdGVcbiAgICB9XG5cbiAgICAvLyBUT0RPOiBUaGlzIGZ1bmN0aW9uIGlzIGNhbGxlZCBhIGxvdC4gUG90ZW50aWFsIGZvciBvcHRpbWl6YXRpb24uIFxuICAgIHByaXZhdGUgX3VwZGF0ZShmcmFtZVN0YXRlOiBDb250ZXh0RnJhbWVTdGF0ZSwgc2tpcEV2ZW50cz86Ym9vbGVhbikge1xuICAgICAgICB0aGlzLl9zZXJpYWxpemVkRnJhbWVTdGF0ZSA9IGZyYW1lU3RhdGU7XG5cbiAgICAgICAgLy8gdXBkYXRlIG91ciB0aW1lIHZhbHVlc1xuICAgICAgICBjb25zdCB0aW1lc3RhbXAgPSBwZXJmb3JtYW5jZS5ub3coKTtcbiAgICAgICAgdGhpcy5kZWx0YVRpbWUgPSBNYXRoLm1pbih0aW1lc3RhbXAgLSB0aGlzLnRpbWVzdGFtcCwgdGhpcy5tYXhEZWx0YVRpbWUpO1xuICAgICAgICB0aGlzLnRpbWVzdGFtcCA9IHRpbWVzdGFtcDtcbiAgICAgICAgSnVsaWFuRGF0ZS5jbG9uZSg8SnVsaWFuRGF0ZT5mcmFtZVN0YXRlLnRpbWUsIHRoaXMudGltZSk7XG5cbiAgICAgICAgLy8gdXBkYXRlIHByb3ZpZGVkIGVudGl0aWVzXG4gICAgICAgIGlmICh0aGlzLnNlc3Npb25TZXJ2aWNlLm1hbmFnZXIuaXNDb25uZWN0ZWQgJiYgdGhpcy5zZXNzaW9uU2VydmljZS5tYW5hZ2VyLnZlcnNpb25bMF0gPT09IDApIHtcbiAgICAgICAgICAgIHRoaXMuX3VwZGF0ZUJhY2t3YXJkc0NvbXBhdGFiaWxpdHkoZnJhbWVTdGF0ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl91cGRhdGVFbnRpdGllcyhmcmFtZVN0YXRlLmVudGl0aWVzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHVwZGF0ZSBkZXZpY2UgZW50aXRpZXMgKGRldmljZSBzZXJ2aWNlIG5lZWRzIHRvIGtub3cgaWYgbWFuYWdlciBpcyBvdmVycmlkaW5nIGl0J3MgZW50aXRpZXMpXG4gICAgICAgIHRoaXMuZGV2aWNlU2VydmljZS5fcHJvY2Vzc0NvbnRleHRGcmFtZVN0YXRlKGZyYW1lU3RhdGUpO1xuXG4gICAgICAgIC8vIHVwZGF0ZSBjb250ZXh0IGVudGl0aWVzXG4gICAgICAgIHRoaXMuX3VwZGF0ZUNvbnRleHRFbnRpdGllcyhmcmFtZVN0YXRlKTtcbiAgICAgICAgdGhpcy5fdXBkYXRlU3RhZ2VHZW8oKTtcblxuICAgICAgICAvLyB1cGRhdGUgdmlldyBhbmQgcmVhbGl0eSBzZXJ2aWNlXG4gICAgICAgIHRoaXMudmlld1NlcnZpY2UuX3Byb2Nlc3NDb250ZXh0RnJhbWVTdGF0ZShmcmFtZVN0YXRlLCB0aGlzKTtcbiAgICAgICAgdGhpcy5yZWFsaXR5U2VydmljZS5fcHJvY2Vzc0NvbnRleHRGcmFtZVN0YXRlKGZyYW1lU3RhdGUpOyBcblxuICAgICAgICAvLyBleGl0IGVhcmx5IGlmIG9ubHlVcGRhdGUgZmxhZyBpcyBzZXRcbiAgICAgICAgaWYgKHNraXBFdmVudHMpIHJldHVybjtcblxuICAgICAgICAvLyByYWlzZSBvcmlnaW4gY2hhbmdlIGV2ZW50IGlmIG5lY2Vzc2FyeVxuICAgICAgICB0aGlzLl9jaGVja09yaWdpbkNoYW5nZSgpO1xuXG4gICAgICAgIC8vIHJhaXNlIGV2ZW50cyBmb3IgdGhlIHVzZXIgdG8gdXBkYXRlIGFuZCByZW5kZXIgdGhlIHNjZW5lXG4gICAgICAgIHRoaXMudXBkYXRlRXZlbnQucmFpc2VFdmVudCh0aGlzKTtcbiAgICAgICAgdGhpcy5yZW5kZXJFdmVudC5yYWlzZUV2ZW50KHRoaXMpO1xuICAgICAgICB0aGlzLnBvc3RSZW5kZXJFdmVudC5yYWlzZUV2ZW50KHRoaXMpO1xuXG4gICAgICAgIC8vIHB1Ymxpc2ggZnJhbWVTdGF0ZSB0byB0aGUgbWFuYWdlciAobm9vcCBpZiB0aGlzIHNlc3Npb24gaXMgbm90IGEgcmVhbGl0eSlcbiAgICAgICAgdGhpcy5yZWFsaXR5U2VydmljZS5fcHVibGlzaENvbnRleHRGcmFtZVN0YXRlKGZyYW1lU3RhdGUpO1xuXG4gICAgICAgIC8vIHN1Ym1pdCBmcmFtZSBpZiBuZWNlc3NhcnlcbiAgICAgICAgdGhpcy5fdHJ5U3VibWl0RnJhbWUoKTtcbiAgICB9XG5cbiAgICBfdXBkYXRlRW50aXRpZXMoZW50aXRpZXM6U2VyaWFsaXplZEVudGl0eVN0YXRlTWFwKSB7XG4gICAgICAgIGNvbnN0IGVudGl0eVNlcnZpY2UgPSB0aGlzLmVudGl0eVNlcnZpY2U7XG4gICAgICAgIGZvciAoY29uc3QgaWQgaW4gZW50aXRpZXMpIHtcbiAgICAgICAgICAgIGVudGl0eVNlcnZpY2UudXBkYXRlRW50aXR5RnJvbVNlcmlhbGl6ZWRTdGF0ZShpZCwgZW50aXRpZXNbaWRdKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIF9jb252ZXJ0RW50aXR5UmVmZXJlbmNlRnJhbWUgPSBjb252ZXJ0RW50aXR5UmVmZXJlbmNlRnJhbWU7XG5cbiAgICBfdXBkYXRlQ29udGV4dEVudGl0aWVzKGZyYW1lU3RhdGU6Q29udGV4dEZyYW1lU3RhdGUpIHtcbiAgICAgICAgY29uc3QgdGltZSA9IGZyYW1lU3RhdGUudGltZTtcbiAgICAgICAgY29uc3QgZW50aXRpZXMgPSBmcmFtZVN0YXRlLmVudGl0aWVzO1xuICAgICAgICBcbiAgICAgICAgLy8gSWYgdGhlIHJlYWxpdHkgZGlkIG5vdCBvdmVycmlkZSB0aGUgc3RhZ2UsIHRoZW4gc2V0IHRoZSBvcmlnaW4gdG8gdGhlIGRldmljZSBvcmlnaW4uXG4gICAgICAgIC8vIE90aGVyd2lzZSwgZmluZCB0aGUgYXBwcm9wcmlhdGUgb3JpZ2luIHBvc2UuIFxuICAgICAgICBjb25zdCBjb250ZXh0T3JpZ2luID0gdGhpcy5vcmlnaW47XG4gICAgICAgIGNvbnN0IGNvbnRleHRTdGFnZSA9IHRoaXMuc3RhZ2U7XG4gICAgICAgIGNvbnN0IGRldmljZU9yaWdpbiA9IHRoaXMuZGV2aWNlU2VydmljZS5vcmlnaW47XG4gICAgICAgIGNvbnN0IGRldmljZVN0YWdlID0gdGhpcy5kZXZpY2VTZXJ2aWNlLnN0YWdlO1xuICAgICAgICBjb25zdCBjb250ZXh0U3RhZ2VQb3NpdGlvbiA9IGNvbnRleHRTdGFnZS5wb3NpdGlvbiBhcyBEeW5hbWljUG9zaXRpb25Qcm9wZXJ0eTtcbiAgICAgICAgY29uc3QgY29udGV4dFN0YWdlT3JpZW50YXRpb24gPSBjb250ZXh0U3RhZ2Uub3JpZW50YXRpb24gYXMgRHluYW1pY1Byb3BlcnR5O1xuICAgICAgICBjb25zdCBjb250ZXh0T3JpZ2luUG9zaXRpb24gPSBjb250ZXh0T3JpZ2luLnBvc2l0aW9uIGFzIER5bmFtaWNQb3NpdGlvblByb3BlcnR5O1xuICAgICAgICBjb25zdCBjb250ZXh0T3JpZ2luT3JpZW50YXRpb24gPSBjb250ZXh0T3JpZ2luLm9yaWVudGF0aW9uIGFzIER5bmFtaWNQcm9wZXJ0eTtcbiAgICAgICAgaWYgKCFlbnRpdGllc1tjb250ZXh0U3RhZ2UuaWRdKSB7XG4gICAgICAgICAgICBjb250ZXh0U3RhZ2VQb3NpdGlvbi5zZXRWYWx1ZShDYXJ0ZXNpYW4zLlpFUk8sIGRldmljZVN0YWdlKTtcbiAgICAgICAgICAgIGNvbnRleHRTdGFnZU9yaWVudGF0aW9uLnNldFZhbHVlKFF1YXRlcm5pb24uSURFTlRJVFkpO1xuICAgICAgICAgICAgY29udGV4dE9yaWdpblBvc2l0aW9uLnNldFZhbHVlKENhcnRlc2lhbjMuWkVSTywgZGV2aWNlT3JpZ2luKTtcbiAgICAgICAgICAgIGNvbnRleHRPcmlnaW5PcmllbnRhdGlvbi5zZXRWYWx1ZShRdWF0ZXJuaW9uLklERU5USVRZKTtcbiAgICAgICAgfSBlbHNlIHsgXG4gICAgICAgICAgICAvLyBzYXZlIHN0YWdlIHJlbGF0aXZlIHRvIG9yaWdpblxuICAgICAgICAgICAgY29uc3Qgc3RhZ2VSZWxhdGl2ZVRvT3JpZ2luID0gdGhpcy5nZXRFbnRpdHlQb3NlKGRldmljZVN0YWdlLCBkZXZpY2VPcmlnaW4pO1xuICAgICAgICAgICAgLy8gZmlyc3QgZmlndXJlIG91dCB3aGVyZSB0aGUgb3JpZ2luIHNob3VsZCBiZVxuICAgICAgICAgICAgY29uc3Qgb3JpZ2luUmVsYXRpdmVUb1N0YWdlID0gdGhpcy5nZXRFbnRpdHlQb3NlKGRldmljZU9yaWdpbiwgZGV2aWNlU3RhZ2UpO1xuICAgICAgICAgICAgY29udGV4dE9yaWdpblBvc2l0aW9uLnNldFZhbHVlKG9yaWdpblJlbGF0aXZlVG9TdGFnZS5wb3NpdGlvbiwgY29udGV4dFN0YWdlKTtcbiAgICAgICAgICAgIGNvbnRleHRPcmlnaW5PcmllbnRhdGlvbi5zZXRWYWx1ZShvcmlnaW5SZWxhdGl2ZVRvU3RhZ2Uub3JpZW50YXRpb24pO1xuICAgICAgICAgICAgLy8gY29udmVydCBvcmlnaW4gdG8gdGhlIHNhbWUgZnJhbWUgdXNlZCBieSB0aGUgb3ZlcnJpZGRlbiBzdGFnZVxuICAgICAgICAgICAgY29uc3Qgcm9vdEZyYW1lID0gZ2V0UmVhY2hhYmxlQW5jZXN0b3JSZWZlcmVuY2VGcmFtZXMoY29udGV4dFN0YWdlLCB0aW1lLCB0aGlzLl9zY3JhdGNoQXJyYXkpWzBdO1xuICAgICAgICAgICAgaWYgKCFkZWZpbmVkKHJvb3RGcmFtZSkpIHRocm93IG5ldyBFcnJvcihcIlN0YWdlIGZyYW1lIG11c3QgaGF2ZSBhIHJlYWNoYWJsZSBwYXJlbnQgcmVmZXJlbmNlIGZyYW1lIVwiKTtcbiAgICAgICAgICAgIGNvbnN0IG9yaWdpblJlbGF0aXZlVG9Sb290ID0gdGhpcy5nZXRFbnRpdHlQb3NlKGNvbnRleHRPcmlnaW4sIHJvb3RGcmFtZSk7XG4gICAgICAgICAgICBjb250ZXh0T3JpZ2luUG9zaXRpb24uc2V0VmFsdWUob3JpZ2luUmVsYXRpdmVUb1Jvb3QucG9zaXRpb24sIHJvb3RGcmFtZSk7XG4gICAgICAgICAgICBjb250ZXh0T3JpZ2luT3JpZW50YXRpb24uc2V0VmFsdWUob3JpZ2luUmVsYXRpdmVUb1Jvb3Qub3JpZW50YXRpb24pO1xuICAgICAgICAgICAgLy8gY29udmVydCBzdGFnZSB0byBiZSByZWxhdGl2ZSB0byBvcmlnaW5cbiAgICAgICAgICAgIGNvbnRleHRTdGFnZVBvc2l0aW9uLnNldFZhbHVlKHN0YWdlUmVsYXRpdmVUb09yaWdpbi5wb3NpdGlvbiwgY29udGV4dE9yaWdpbik7XG4gICAgICAgICAgICBjb250ZXh0U3RhZ2VPcmllbnRhdGlvbi5zZXRWYWx1ZShzdGFnZVJlbGF0aXZlVG9PcmlnaW4ub3JpZW50YXRpb24pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gdXBkYXRlIHVzZXIgZW50aXR5IChyZWxhdGl2ZSB0byBvcmlnaW4pIGJhc2VkIG9uIGRldmljZSB1c2VyIChyZWxhdGl2ZSB0byBkZXZpY2Ugb3JpZ2luKSBpZiB0aGUgcmVhbGl0eSBkaWQgbm90IG92ZXJyaWRlIGl0XG4gICAgICAgIGNvbnN0IGRldmljZVVzZXIgPSB0aGlzLmRldmljZVNlcnZpY2UudXNlcjtcbiAgICAgICAgY29uc3QgY29udGV4dFVzZXIgPSB0aGlzLnVzZXI7XG4gICAgICAgIGlmICghZW50aXRpZXNbY29udGV4dFVzZXIuaWRdKSB7XG4gICAgICAgICAgICBjb25zdCB1c2VyUmVsYXRpdmVUb09yaWdpbiA9IHRoaXMuZ2V0RW50aXR5UG9zZShkZXZpY2VVc2VyLCBkZXZpY2VPcmlnaW4pO1xuICAgICAgICAgICAgY29uc3QgY29udGV4dFVzZXJQb3NpdGlvbiA9IGNvbnRleHRVc2VyLnBvc2l0aW9uIGFzIER5bmFtaWNQb3NpdGlvblByb3BlcnR5O1xuICAgICAgICAgICAgY29uc3QgY29udGV4dFVzZXJPcmllbnRhdGlvbiA9IGNvbnRleHRVc2VyLm9yaWVudGF0aW9uIGFzIER5bmFtaWNQcm9wZXJ0eTtcbiAgICAgICAgICAgIGNvbnRleHRVc2VyUG9zaXRpb24uc2V0VmFsdWUodXNlclJlbGF0aXZlVG9PcmlnaW4ucG9zaXRpb24sIGNvbnRleHRPcmlnaW4pO1xuICAgICAgICAgICAgY29udGV4dFVzZXJPcmllbnRhdGlvbi5zZXRWYWx1ZSh1c2VyUmVsYXRpdmVUb09yaWdpbi5vcmllbnRhdGlvbik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9jb252ZXJ0RW50aXR5UmVmZXJlbmNlRnJhbWUoY29udGV4dFVzZXIsIHRpbWUsIGNvbnRleHRTdGFnZSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyB1cGRhdGUgdmlldyBlbnRpdHkgKGlmIHRoZSByZWFsaXR5IGRpZCBub3Qgc2V0IGl0KVxuICAgICAgICBjb25zdCBjb250ZXh0VmlldyA9IHRoaXMudmlldztcbiAgICAgICAgaWYgKCFlbnRpdGllc1tjb250ZXh0Vmlldy5pZF0pIHtcbiAgICAgICAgICAgIGNvbnN0IGNvbnRleHRWaWV3UG9zaXRpb24gPSBjb250ZXh0Vmlldy5wb3NpdGlvbiBhcyBEeW5hbWljUG9zaXRpb25Qcm9wZXJ0eTtcbiAgICAgICAgICAgIGNvbnN0IGNvbnRleHRWaWV3T3JpZW50YXRpb24gPSBjb250ZXh0Vmlldy5vcmllbnRhdGlvbiBhcyBEeW5hbWljUHJvcGVydHk7XG4gICAgICAgICAgICBjb250ZXh0Vmlld1Bvc2l0aW9uLnNldFZhbHVlKENhcnRlc2lhbjMuWkVSTywgY29udGV4dFVzZXIpO1xuICAgICAgICAgICAgY29udGV4dFZpZXdPcmllbnRhdGlvbi5zZXRWYWx1ZShRdWF0ZXJuaW9uLklERU5USVRZKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX2NvbnZlcnRFbnRpdHlSZWZlcmVuY2VGcmFtZShjb250ZXh0VmlldywgdGltZSwgY29udGV4dFVzZXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gdXBkYXRlIHN1YnZpZXcgZW50aXRpZXMgKGlmIHRoZSByZWFsaXR5IGRpZCBub3Qgc2V0IHRoZW0pXG4gICAgICAgIGZvciAobGV0IGk9MDsgaTxmcmFtZVN0YXRlLnN1YnZpZXdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoIWVudGl0aWVzWydhci52aWV3XycgKyBpXSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGRldmljZVN1YnZpZXcgPSB0aGlzLmRldmljZVNlcnZpY2UuZ2V0U3Vidmlld0VudGl0eShpKTtcbiAgICAgICAgICAgICAgICBjb25zdCBjb250ZXh0U3VidmlldyA9IHRoaXMuZ2V0U3Vidmlld0VudGl0eShpKTtcbiAgICAgICAgICAgICAgICBjb25zdCBzdWJ2aWV3UG9zaXRpb25WYWx1ZSA9IHRoaXMuX2dldEVudGl0eVBvc2l0aW9uSW5SZWZlcmVuY2VGcmFtZShkZXZpY2VTdWJ2aWV3LCB0aW1lLCBkZXZpY2VVc2VyLCB0aGlzLl9zY3JhdGNoQ2FydGVzaWFuKTtcbiAgICAgICAgICAgICAgICBjb25zdCBzdWJ2aWV3T3JpZW50YXRpb25WYWx1ZSA9IHRoaXMuX2dldEVudGl0eU9yaWVudGF0aW9uSW5SZWZlcmVuY2VGcmFtZShkZXZpY2VTdWJ2aWV3LCB0aW1lLCBkZXZpY2VVc2VyLCB0aGlzLl9zY3JhdGNoUXVhdGVybmlvbik7XG4gICAgICAgICAgICAgICAgY29uc3QgY29udGV4dFN1YnZpZXdQb3NpdGlvbiA9IGNvbnRleHRTdWJ2aWV3LnBvc2l0aW9uIGFzIER5bmFtaWNQb3NpdGlvblByb3BlcnR5O1xuICAgICAgICAgICAgICAgIGNvbnN0IGNvbnRleHRTdWJ2aWV3T3JpZW50YXRpb24gPSBjb250ZXh0U3Vidmlldy5vcmllbnRhdGlvbiBhcyBEeW5hbWljUHJvcGVydHk7XG4gICAgICAgICAgICAgICAgY29udGV4dFN1YnZpZXdQb3NpdGlvbi5zZXRWYWx1ZShzdWJ2aWV3UG9zaXRpb25WYWx1ZSwgY29udGV4dFZpZXcpO1xuICAgICAgICAgICAgICAgIGNvbnRleHRTdWJ2aWV3T3JpZW50YXRpb24uc2V0VmFsdWUoc3Vidmlld09yaWVudGF0aW9uVmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gdXBkYXRlIGZsb29yIGVudGl0eSAoaWYgdGhlIHJlYWxpdHkgZGlkIG5vdCBzZXQgaXQpXG4gICAgICAgIGlmICghZW50aXRpZXNbdGhpcy5mbG9vci5pZF0pIHtcbiAgICAgICAgICAgIGNvbnN0IGZsb29yUG9zaXRpb24gPSB0aGlzLmZsb29yLnBvc2l0aW9uIGFzIER5bmFtaWNQb3NpdGlvblByb3BlcnR5O1xuICAgICAgICAgICAgZmxvb3JQb3NpdGlvbi5zZXRWYWx1ZShDYXJ0ZXNpYW4zLlpFUk8sIGNvbnRleHRTdGFnZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9jb252ZXJ0RW50aXR5UmVmZXJlbmNlRnJhbWUodGhpcy5mbG9vciwgdGltZSwgY29udGV4dFN0YWdlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIF91cGRhdGVTdGFnZUdlbygpIHtcbiAgICAgICAgLy8gdXBkYXRlIHN0YWdlRVVTIGFuZCBzdGFnZUVOVVxuICAgICAgICBjb25zdCB0aW1lID0gdGhpcy50aW1lO1xuICAgICAgICBjb25zdCBjb250ZXh0U3RhZ2UgPSB0aGlzLnN0YWdlO1xuICAgICAgICBjb25zdCBzdGFnZUZpeGVkUG9zaXRpb24gPSB0aGlzLl9nZXRFbnRpdHlQb3NpdGlvbkluUmVmZXJlbmNlRnJhbWUoY29udGV4dFN0YWdlLCB0aW1lLCBSZWZlcmVuY2VGcmFtZS5GSVhFRCwgdGhpcy5fc2NyYXRjaENhcnRlc2lhbik7XG4gICAgICAgIGlmIChzdGFnZUZpeGVkUG9zaXRpb24pIHsgLy8gVE9ETzogb25seSBkbyB0aGlzIG1hdGggaWYgZml4ZWQgcG9zaXRpb24gZGlmZmVycyBmcm9tIHByZXZpb3VzIGZyYW1lXG4gICAgICAgICAgICAvLyBFVVNcbiAgICAgICAgICAgIGNvbnN0IGV1c1RyYW5zZm9ybSA9IHRoaXMuX2Vhc3RVcFNvdXRoVG9GaXhlZEZyYW1lKHN0YWdlRml4ZWRQb3NpdGlvbiwgdW5kZWZpbmVkLCB0aGlzLl9zY3JhdGNoTWF0cml4NCk7XG4gICAgICAgICAgICBjb25zdCBldXNSb3RhdGlvbiA9IE1hdHJpeDQuZ2V0Um90YXRpb24oZXVzVHJhbnNmb3JtLCB0aGlzLl9zY3JhdGNoTWF0cml4Myk7XG4gICAgICAgICAgICBjb25zdCBldXNPcmllbnRhdGlvbiA9IFF1YXRlcm5pb24uZnJvbVJvdGF0aW9uTWF0cml4KGV1c1JvdGF0aW9uLCB0aGlzLl9zY3JhdGNoUXVhdGVybmlvbik7XG4gICAgICAgICAgICAodGhpcy5zdGFnZUVVUy5wb3NpdGlvbiBhcyBEeW5hbWljUG9zaXRpb25Qcm9wZXJ0eSkuc2V0VmFsdWUoc3RhZ2VGaXhlZFBvc2l0aW9uLCBSZWZlcmVuY2VGcmFtZS5GSVhFRCk7XG4gICAgICAgICAgICAodGhpcy5zdGFnZUVVUy5vcmllbnRhdGlvbiBhcyBEeW5hbWljUHJvcGVydHkpLnNldFZhbHVlKGV1c09yaWVudGF0aW9uKTtcbiAgICAgICAgICAgIC8vIEVOVVxuICAgICAgICAgICAgY29uc3QgZW51VHJhbnNmb3JtID0gdGhpcy5fZWFzdE5vcnRoVXBUb0ZpeGVkRnJhbWUoc3RhZ2VGaXhlZFBvc2l0aW9uLCB1bmRlZmluZWQsIHRoaXMuX3NjcmF0Y2hNYXRyaXg0KTtcbiAgICAgICAgICAgIGNvbnN0IGVudVJvdGF0aW9uID0gTWF0cml4NC5nZXRSb3RhdGlvbihlbnVUcmFuc2Zvcm0sIHRoaXMuX3NjcmF0Y2hNYXRyaXgzKTtcbiAgICAgICAgICAgIGNvbnN0IGVudU9yaWVudGF0aW9uID0gUXVhdGVybmlvbi5mcm9tUm90YXRpb25NYXRyaXgoZW51Um90YXRpb24sIHRoaXMuX3NjcmF0Y2hRdWF0ZXJuaW9uKTtcbiAgICAgICAgICAgICh0aGlzLnN0YWdlRU5VLnBvc2l0aW9uIGFzIER5bmFtaWNQb3NpdGlvblByb3BlcnR5KS5zZXRWYWx1ZShzdGFnZUZpeGVkUG9zaXRpb24sIFJlZmVyZW5jZUZyYW1lLkZJWEVEKTtcbiAgICAgICAgICAgICh0aGlzLnN0YWdlRU5VLm9yaWVudGF0aW9uIGFzIER5bmFtaWNQcm9wZXJ0eSkuc2V0VmFsdWUoZW51T3JpZW50YXRpb24pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgKHRoaXMuc3RhZ2VFVVMucG9zaXRpb24gYXMgRHluYW1pY1Bvc2l0aW9uUHJvcGVydHkpLnNldFZhbHVlKHVuZGVmaW5lZCwgUmVmZXJlbmNlRnJhbWUuRklYRUQpO1xuICAgICAgICAgICAgKHRoaXMuc3RhZ2VFVVMub3JpZW50YXRpb24gYXMgRHluYW1pY1Byb3BlcnR5KS5zZXRWYWx1ZSh1bmRlZmluZWQpO1xuICAgICAgICAgICAgKHRoaXMuc3RhZ2VFTlUucG9zaXRpb24gYXMgRHluYW1pY1Bvc2l0aW9uUHJvcGVydHkpLnNldFZhbHVlKHVuZGVmaW5lZCwgUmVmZXJlbmNlRnJhbWUuRklYRUQpO1xuICAgICAgICAgICAgKHRoaXMuc3RhZ2VFTlUub3JpZW50YXRpb24gYXMgRHluYW1pY1Byb3BlcnR5KS5zZXRWYWx1ZSh1bmRlZmluZWQpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBfcHJldmlvdXNPcmlnaW5SZWZlcmVuY2VGcmFtZT8gOiBSZWZlcmVuY2VGcmFtZXxFbnRpdHk7XG4gICAgX2NoZWNrT3JpZ2luQ2hhbmdlKCkge1xuICAgICAgICBjb25zdCB0aW1lID0gdGhpcy50aW1lO1xuICAgICAgICBjb25zdCBvcmlnaW5SZWZlcmVuY2VGcmFtZSA9IHRoaXMuX2dldFJlYWNoYWJsZUFuY2VzdG9yUmVmZXJlbmNlRnJhbWVzKHRoaXMub3JpZ2luLCB0aW1lLCB0aGlzLl9zY3JhdGNoQXJyYXkpWzBdIHx8IFJlZmVyZW5jZUZyYW1lLkZJWEVEO1xuICAgICAgICBjb25zdCBvcmlnaW5Qb3NlID0gdGhpcy5nZXRFbnRpdHlQb3NlKHRoaXMub3JpZ2luLCBvcmlnaW5SZWZlcmVuY2VGcmFtZSk7XG4gICAgICAgIGlmIChvcmlnaW5SZWZlcmVuY2VGcmFtZSAhPT0gdGhpcy5fcHJldmlvdXNPcmlnaW5SZWZlcmVuY2VGcmFtZSB8fCBvcmlnaW5Qb3NlLnN0YXR1cyAmIFBvc2VTdGF0dXMuQ0hBTkdFRCkge1xuICAgICAgICAgICAgdGhpcy5fcHJldmlvdXNPcmlnaW5SZWZlcmVuY2VGcmFtZSA9IG9yaWdpblJlZmVyZW5jZUZyYW1lO1xuICAgICAgICAgICAgaWYgKHRoaXMuc2Vzc2lvblNlcnZpY2UuaXNSZWFsaXR5QXVnbWVudGVyKSBjb25zb2xlLmxvZygnVXBkYXRlZCBjb250ZXh0IG9yaWdpbiB0byAnICsgSlNPTi5zdHJpbmdpZnkob3JpZ2luUG9zZS5wb3NpdGlvbikgKyBcIiBhdCBcIiArIHN0cmluZ0lkZW50aWZpZXJGcm9tUmVmZXJlbmNlRnJhbWUob3JpZ2luUmVmZXJlbmNlRnJhbWUpKTtcbiAgICAgICAgICAgIHRoaXMub3JpZ2luQ2hhbmdlRXZlbnQucmFpc2VFdmVudCh1bmRlZmluZWQpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgX3RyeVN1Ym1pdEZyYW1lKCkge1xuICAgICAgICBjb25zdCB2ckRpc3BsYXk6VlJEaXNwbGF5fHVuZGVmaW5lZCA9IHRoaXMuZGV2aWNlU2VydmljZS52ckRpc3BsYXk7XG4gICAgICAgIGlmICh0aGlzLmRldmljZVNlcnZpY2UuYXV0b1N1Ym1pdEZyYW1lICYmIFxuICAgICAgICAgICAgdnJEaXNwbGF5ICYmIHZyRGlzcGxheS5pc1ByZXNlbnRpbmcgJiYgXG4gICAgICAgICAgICAhdGhpcy5zZXNzaW9uU2VydmljZS5pc1JlYWxpdHlWaWV3ZXIpIHtcbiAgICAgICAgICAgIHZyRGlzcGxheS5zdWJtaXRGcmFtZSgpO1xuICAgICAgICB9XG4gICAgfVxuICAgICAgICBcbiAgICBnZXRTdWJ2aWV3RW50aXR5KGluZGV4Om51bWJlcikge1xuICAgICAgICBjb25zdCBzdWJ2aWV3RW50aXR5ID0gdGhpcy5lbnRpdHlTZXJ2aWNlLmNvbGxlY3Rpb24uZ2V0T3JDcmVhdGVFbnRpdHkoJ2FyLnZpZXdfJytpbmRleCk7XG4gICAgICAgIGlmICghc3Vidmlld0VudGl0eS5wb3NpdGlvbikge1xuICAgICAgICAgICAgc3Vidmlld0VudGl0eS5wb3NpdGlvbiA9IG5ldyBEeW5hbWljUG9zaXRpb25Qcm9wZXJ0eShDYXJ0ZXNpYW4zLlpFUk8sIHRoaXMudXNlcik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFzdWJ2aWV3RW50aXR5Lm9yaWVudGF0aW9uKSB7XG4gICAgICAgICAgICBzdWJ2aWV3RW50aXR5Lm9yaWVudGF0aW9uID0gbmV3IER5bmFtaWNQcm9wZXJ0eShRdWF0ZXJuaW9uLklERU5USVRZKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3Vidmlld0VudGl0eTtcbiAgICB9XG5cblxuICAgIHN1YnNjcmliZUdlb2xvY2F0aW9uKG9wdGlvbnM/Okdlb2xvY2F0aW9uT3B0aW9ucykgOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2Vzc2lvblNlcnZpY2UubWFuYWdlci53aGVuQ29ubmVjdGVkKCkudGhlbigoKT0+e1xuICAgICAgICAgICAgaWYgKHRoaXMuc2Vzc2lvblNlcnZpY2UubWFuYWdlci52ZXJzaW9uTnVtYmVyID49IDEuNClcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5lbnRpdHlTZXJ2aWNlLnN1YnNjcmliZSh0aGlzLm9yaWdpbi5pZCwgb3B0aW9ucykudGhlbigoKT0+e30pO1xuICAgICAgICAgICAgZWxzZSBcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5lbnRpdHlTZXJ2aWNlLnN1YnNjcmliZSh0aGlzLnN0YWdlLmlkLCBvcHRpb25zKS50aGVuKCgpPT57fSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHVuc3Vic2NyaWJlR2VvbG9jYXRpb24oKSA6IHZvaWQge1xuICAgICAgICB0aGlzLnNlc3Npb25TZXJ2aWNlLm1hbmFnZXIud2hlbkNvbm5lY3RlZCgpLnRoZW4oKCk9PntcbiAgICAgICAgICAgIGlmICh0aGlzLnNlc3Npb25TZXJ2aWNlLm1hbmFnZXIudmVyc2lvbk51bWJlciA+PSAxLjQpXG4gICAgICAgICAgICAgICAgdGhpcy5lbnRpdHlTZXJ2aWNlLnVuc3Vic2NyaWJlKHRoaXMub3JpZ2luLmlkKTtcbiAgICAgICAgICAgIGVsc2UgXG4gICAgICAgICAgICAgICAgdGhpcy5lbnRpdHlTZXJ2aWNlLnVuc3Vic2NyaWJlKHRoaXMuc3RhZ2UuaWQpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwcml2YXRlIF9nZXRJbmhlcml0ZWRNZXRhUHJvcGVydHkoZW50aXR5LCBtZXRhUHJvcEtleTpzdHJpbmcpIHtcbiAgICAgICAgbGV0IHJlZmVyZW5jZUZyYW1lID0gPEVudGl0eXx1bmRlZmluZWQ+ZW50aXR5LnBvc2l0aW9uIS5yZWZlcmVuY2VGcmFtZTtcbiAgICAgICAgd2hpbGUgKHJlZmVyZW5jZUZyYW1lKSB7XG4gICAgICAgICAgICBjb25zdCBtZXRhUHJvcCA9IHJlZmVyZW5jZUZyYW1lWydtZXRhJ10gJiYgcmVmZXJlbmNlRnJhbWVbJ21ldGEnXVttZXRhUHJvcEtleV07XG4gICAgICAgICAgICBpZiAoZGVmaW5lZChtZXRhUHJvcCkpIHJldHVybiBtZXRhUHJvcDtcbiAgICAgICAgICAgIHJlZmVyZW5jZUZyYW1lID0gcmVmZXJlbmNlRnJhbWUucG9zaXRpb24gJiYgPEVudGl0eT5yZWZlcmVuY2VGcmFtZS5wb3NpdGlvbi5yZWZlcmVuY2VGcmFtZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIElmIGdlb3Bvc2UgaXMgYXZhaWxhYmxlLCB0aGlzIGlzIHRoZSBhY2N1cmFjeSBvZiB0aGUgdXNlciBoZWFkaW5nXG4gICAgICovXG4gICAgcHVibGljIGdldCBnZW9IZWFkaW5nQWNjdXJhY3koKSA6IG51bWJlcnx1bmRlZmluZWQge1xuICAgICAgICByZXR1cm4gdGhpcy5fZ2V0SW5oZXJpdGVkTWV0YVByb3BlcnR5KHRoaXMudXNlciwgJ2dlb0hlYWRpbmdBY2N1cmFjeScpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIElmIGdlb3Bvc2UgaXMgYXZhaWxhYmxlLCB0aGlzIGlzIHRoZSBob3Jpem9udGFsIGFjY3VyYWN5IG9mIHRoZSB1c2VyIGdlb2xvY2F0aW9uXG4gICAgICovXG4gICAgcHVibGljIGdldCBnZW9Ib3Jpem9udGFsQWNjdXJhY3koKSA6IG51bWJlcnx1bmRlZmluZWQge1xuICAgICAgICByZXR1cm4gdGhpcy5fZ2V0SW5oZXJpdGVkTWV0YVByb3BlcnR5KHRoaXMuc3RhZ2UsICdnZW9Ib3Jpem9udGFsQWNjdXJhY3knKTtcbiAgICB9XG4gICAgXG4gICAgLyoqXG4gICAgICogSWYgZ2VvcG9zZSBpcyBhdmFpbGFibGUsIHRoaXMgaXMgdGhlIHZlcnRpY2FsIGFjY3VyYWN5IG9mIHRoZSB1c2VyIGdlb2xvY2F0aW9uXG4gICAgICovXG4gICAgcHVibGljIGdldCBnZW9WZXJ0aWNhbEFjY3VyYWN5KCkgOiBudW1iZXJ8dW5kZWZpbmVkIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2dldEluaGVyaXRlZE1ldGFQcm9wZXJ0eSh0aGlzLnN0YWdlLCAnZ2VvVmVydGljYWxBY2N1cmFjeScpO1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICogQGRlcHJlY2F0ZWRcbiAgICAgKi9cbiAgICBwcml2YXRlIGdldCBnZW9wb3NlSGVhZGluZ0FjY3VyYWN5KCkgOiBudW1iZXJ8dW5kZWZpbmVkIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2VvSGVhZGluZ0FjY3VyYWN5O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBkZXByZWNhdGVkXG4gICAgICovXG4gICAgcHJpdmF0ZSBnZXQgZ2VvcG9zZUhvcml6b250YWxBY2N1cmFjeSgpIDogbnVtYmVyfHVuZGVmaW5lZCB7XG4gICAgICAgIHJldHVybiB0aGlzLmdlb0hvcml6b250YWxBY2N1cmFjeTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAZGVwcmVjYXRlZFxuICAgICAqL1xuICAgIHByaXZhdGUgZ2V0IGdlb3Bvc2VWZXJ0aWNhbEFjY3VyYWN5KCkgOiBudW1iZXJ8dW5kZWZpbmVkIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2VvVmVydGljYWxBY2N1cmFjeTtcbiAgICB9XG5cbn1cblxuQGF1dG9pbmplY3QoKVxuZXhwb3J0IGNsYXNzIENvbnRleHRTZXJ2aWNlUHJvdmlkZXIge1xuICAgIFxuICAgIHByaXZhdGUgX2NhY2hlVGltZSA9IG5ldyBKdWxpYW5EYXRlKDAsMCk7XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHJvdGVjdGVkIHNlc3Npb25TZXJ2aWNlOlNlc3Npb25TZXJ2aWNlLFxuICAgICAgICBwcm90ZWN0ZWQgY29udGV4dFNlcnZpY2U6Q29udGV4dFNlcnZpY2UsXG4gICAgICAgIHByb3RlY3RlZCBkZXZpY2VTZXJ2aWNlOkRldmljZVNlcnZpY2UsXG4gICAgICAgIHByb3RlY3RlZCBlbnRpdHlTZXJ2aWNlUHJvdmlkZXI6RW50aXR5U2VydmljZVByb3ZpZGVyLFxuICAgICAgICBwcm90ZWN0ZWQgcGVybWlzc2lvblNlcnZpY2VQcm92aWRlcjpQZXJtaXNzaW9uU2VydmljZVByb3ZpZGVyLFxuICAgICAgICBwcm90ZWN0ZWQgcmVhbGl0eVNlcnZpY2VQcm92aWRlcjpSZWFsaXR5U2VydmljZVByb3ZpZGVyLFxuICAgICAgICBwcm90ZWN0ZWQgZGV2aWNlOkRldmljZVxuICAgICkge1xuICAgICAgICAvLyBzdWJzY3JpYmUgdG8gY29udGV4dCBnZW9sb2NhdGlvbiBpZiBhbnkgY2hpbGQgc2Vzc2lvbnMgaGF2ZSBzdWJzY3JpYmVkXG4gICAgICAgIHRoaXMuZW50aXR5U2VydmljZVByb3ZpZGVyLnNlc3Npb25TdWJzY3JpYmVkRXZlbnQuYWRkRXZlbnRMaXN0ZW5lcigoZXZ0KT0+e1xuICAgICAgICAgICAgaWYgKGV2dC5pZCA9PT0gdGhpcy5jb250ZXh0U2VydmljZS5zdGFnZS5pZCAmJiBldnQuc2Vzc2lvbiAhPT0gdGhpcy5zZXNzaW9uU2VydmljZS5tYW5hZ2VyKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fc2V0R2VvbG9jYXRpb25PcHRpb25zKGV2dC5zZXNzaW9uLCBldnQub3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0U2VydmljZS5zdWJzY3JpYmVHZW9sb2NhdGlvbih0aGlzLmRlc2lyZWRHZW9sb2NhdGlvbk9wdGlvbnMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KVxuXG4gICAgICAgIC8vIHVuc3Vic2NyaWJlIGZyb20gY29udGV4dCBnZW9sb2NhdGlvbiBpZiBhbGwgY2hpbGQgc2Vzc2lvbnMgYXJlIHVuc3Vic2NyaWJlZFxuICAgICAgICB0aGlzLmVudGl0eVNlcnZpY2VQcm92aWRlci5zZXNzaW9uVW5zdWJzY3JpYmVkRXZlbnQuYWRkRXZlbnRMaXN0ZW5lcigoKT0+e1xuICAgICAgICAgICAgY29uc3Qgc3Vic2NyaWJlcnMgPSB0aGlzLmVudGl0eVNlcnZpY2VQcm92aWRlci5zdWJzY3JpYmVyc0J5RW50aXR5LmdldCh0aGlzLmNvbnRleHRTZXJ2aWNlLnN0YWdlLmlkKTtcbiAgICAgICAgICAgIGlmIChzdWJzY3JpYmVycyAmJiBzdWJzY3JpYmVycy5zaXplID09PSAxICYmIHN1YnNjcmliZXJzLmhhcyh0aGlzLnNlc3Npb25TZXJ2aWNlLm1hbmFnZXIpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0U2VydmljZS51bnN1YnNjcmliZUdlb2xvY2F0aW9uKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuc2Vzc2lvblNlcnZpY2UuY29ubmVjdEV2ZW50LmFkZEV2ZW50TGlzdGVuZXIoKHNlc3Npb24pPT57XG4gICAgICAgICAgICBjb25zdCBzdWJzY3JpcHRpb25zID0gdGhpcy5lbnRpdHlTZXJ2aWNlUHJvdmlkZXIuc3Vic2NyaXB0aW9uc0J5U3Vic2NyaWJlci5nZXQoc2Vzc2lvbikhO1xuICAgICAgICAgICAgc3Vic2NyaXB0aW9uc1t0aGlzLmNvbnRleHRTZXJ2aWNlLnVzZXIuaWRdID0ge307XG4gICAgICAgICAgICBzdWJzY3JpcHRpb25zW3RoaXMuY29udGV4dFNlcnZpY2Uuc3RhZ2UuaWRdID0ge307XG4gICAgICAgICAgICBzdWJzY3JpcHRpb25zW3RoaXMuZGV2aWNlU2VydmljZS51c2VyLmlkXSA9IHt9O1xuICAgICAgICAgICAgc3Vic2NyaXB0aW9uc1t0aGlzLmRldmljZVNlcnZpY2Uuc3RhZ2UuaWRdID0ge307XG4gICAgICAgIH0pXG4gICAgICAgIFxuICAgICAgICAvLyBzdWJtaXQgZnJhbWUgc3RhdGUgZnJvbSByZWFsaXR5XG4gICAgICAgIHRoaXMucmVhbGl0eVNlcnZpY2VQcm92aWRlci5uZXh0RnJhbWVTdGF0ZUV2ZW50LmFkZEV2ZW50TGlzdGVuZXIoKGZyYW1lU3RhdGUpPT57XG4gICAgICAgICAgICB0aGlzLmNvbnRleHRTZXJ2aWNlLnN1Ym1pdEZyYW1lU3RhdGUoZnJhbWVTdGF0ZSk7XG4gICAgICAgICAgICB0aGlzLl9wdWJsaXNoRnJhbWVTdGF0ZSgpOyAvLyBwdWJsaXNoIGZyYW1lIHN0YXRlIHRvIGNoaWxkIHNlc3Npb25zXG4gICAgICAgIH0pXG4gICAgfVxuICAgIFxuICAgIHByaXZhdGUgX3B1Ymxpc2hGcmFtZVN0YXRlKCkge1xuICAgICAgICBjb25zdCBzdGF0ZSA9IHRoaXMuY29udGV4dFNlcnZpY2Uuc2VyaWFsaXplZEZyYW1lU3RhdGUhO1xuICAgICAgICB0aGlzLl9jYWNoZVRpbWUgPSBKdWxpYW5EYXRlLmNsb25lKHN0YXRlLnRpbWUsIHRoaXMuX2NhY2hlVGltZSk7XG4gICAgICAgIGZvciAoY29uc3Qgc2Vzc2lvbiBvZiB0aGlzLnNlc3Npb25TZXJ2aWNlLm1hbmFnZWRTZXNzaW9ucykge1xuICAgICAgICAgICAgdGhpcy5fc2VuZFVwZGF0ZUZvclNlc3Npb24oc3RhdGUsIHNlc3Npb24pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBfc2Vzc2lvbkVudGl0aWVzOlNlcmlhbGl6ZWRFbnRpdHlTdGF0ZU1hcCA9IHt9O1xuICAgIC8vIHByaXZhdGUgX3RlbXA6YW55ID0ge307XG5cbiAgICBwcml2YXRlIF9pbmNsdWRlZEZyYW1lcyA9IHt9O1xuICAgIHByaXZhdGUgX2V4Y2x1ZGVkRnJhbWVzID0ge307XG5cbiAgICBwcml2YXRlIF9zZW5kVXBkYXRlRm9yU2Vzc2lvbihzdGF0ZTpDb250ZXh0RnJhbWVTdGF0ZSwgc2Vzc2lvbjogU2Vzc2lvblBvcnQpIHtcblxuICAgICAgICBpZiAoUm9sZS5pc1JlYWxpdHlWaWV3ZXIoc2Vzc2lvbi5pbmZvLnJvbGUpICYmIHNlc3Npb24udmVyc2lvbk51bWJlciA8IDEuNCkge1xuICAgICAgICAgICAgcmV0dXJuOyAvLyBvbGRlciByZWFsaXR5IHZlcnNpb25zIGRvbid0IGV4cGVjdCB0byByZWNlaXZlIHVwZGF0ZSBldmVudHMgZnJvbSBtYW5hZ2VyXG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBzZXNzaW9uRW50aXRpZXMgPSB0aGlzLl9zZXNzaW9uRW50aXRpZXM7XG4gICAgICAgIGNvbnN0IGVudGl0eVNlcnZpY2VQcm92aWRlciA9IHRoaXMuZW50aXR5U2VydmljZVByb3ZpZGVyXG5cbiAgICAgICAgLy8gY2xlYXIgc2Vzc2lvbiBlbnRpdGllc1xuICAgICAgICBmb3IgKHZhciBpZCBpbiBzZXNzaW9uRW50aXRpZXMpIHtcbiAgICAgICAgICAgIGRlbGV0ZSBzZXNzaW9uRW50aXRpZXNbaWRdO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gcmVmZXJlbmNlIGFsbCBlbnRpdGllcyBmcm9tIHRoZSBwcmltYXJ5IGZyYW1lIHN0YXRlLlxuICAgICAgICBpZiAoc3RhdGUuZW50aXRpZXMpIHtcbiAgICAgICAgICAgIGZvciAodmFyIGlkIGluIHN0YXRlLmVudGl0aWVzKSB7XG4gICAgICAgICAgICAgICAgc2Vzc2lvbkVudGl0aWVzW2lkXSA9IHN0YXRlLmVudGl0aWVzW2lkXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLy8gaWRlbnRpdHkgZnJhbWVzIHRvIHByb3ZpZGUgdG8gdGhlIHNlc3Npb25cblxuICAgICAgICBjb25zdCBpbmNsdWRlZEZyYW1lcyA9IHRoaXMuX2luY2x1ZGVkRnJhbWVzO1xuICAgICAgICBmb3IgKGlkIGluIGluY2x1ZGVkRnJhbWVzKSBkZWxldGUgaW5jbHVkZWRGcmFtZXNbaWRdOyAvL2NsZWFyXG5cbiAgICAgICAgY29uc3Qgc3Vic2NyaXB0aW9ucyA9IGVudGl0eVNlcnZpY2VQcm92aWRlci5zdWJzY3JpcHRpb25zQnlTdWJzY3JpYmVyLmdldChzZXNzaW9uKTtcbiAgICAgICAgaWYgKHN1YnNjcmlwdGlvbnMpIHtcbiAgICAgICAgICAgIGZvciAodmFyIGlkIGluIHN1YnNjcmlwdGlvbnMpIHtcbiAgICAgICAgICAgICAgICBpbmNsdWRlZEZyYW1lc1tpZF0gPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgZGV2aWNlU2VydmljZSA9IHRoaXMuZGV2aWNlU2VydmljZTtcbiAgICAgICAgY29uc3QgZGV2aWNlT3JpZ2luSWQgPSBkZXZpY2VTZXJ2aWNlLm9yaWdpbi5pZDtcbiAgICAgICAgY29uc3QgZGV2aWNlU3RhZ2VJZCA9IGRldmljZVNlcnZpY2Uuc3RhZ2UuaWQ7XG4gICAgICAgIGNvbnN0IGRldmljZVVzZXJJZCA9IGRldmljZVNlcnZpY2Uuc3RhZ2UuaWQ7XG4gICAgICAgIGNvbnN0IGNvbnRleHRTZXJ2aWNlID0gdGhpcy5jb250ZXh0U2VydmljZTtcbiAgICAgICAgY29uc3QgY29udGV4dE9yaWdpbklkID0gY29udGV4dFNlcnZpY2Uub3JpZ2luLmlkO1xuICAgICAgICBjb25zdCBjb250ZXh0U3RhZ2VJZCA9IGNvbnRleHRTZXJ2aWNlLnN0YWdlLmlkO1xuICAgICAgICBjb25zdCBjb250ZXh0VXNlcklkID0gY29udGV4dFNlcnZpY2Uuc3RhZ2UuaWQ7XG4gICAgICAgIGluY2x1ZGVkRnJhbWVzW2RldmljZU9yaWdpbklkXSA9IHRydWU7XG4gICAgICAgIGluY2x1ZGVkRnJhbWVzW2RldmljZVN0YWdlSWRdID0gdHJ1ZTtcbiAgICAgICAgaW5jbHVkZWRGcmFtZXNbZGV2aWNlVXNlcklkXSA9IHRydWU7XG4gICAgICAgIGluY2x1ZGVkRnJhbWVzW2NvbnRleHRPcmlnaW5JZF0gPSB0cnVlO1xuICAgICAgICBpbmNsdWRlZEZyYW1lc1tjb250ZXh0U3RhZ2VJZF0gPSB0cnVlO1xuICAgICAgICBpbmNsdWRlZEZyYW1lc1tjb250ZXh0VXNlcklkXSA9IHRydWU7XG4gICAgICAgIGluY2x1ZGVkRnJhbWVzW2NvbnRleHRTZXJ2aWNlLnZpZXcuaWRdID0gdHJ1ZTtcblxuICAgICAgICBmb3IgKHZhciBpPTA7IGkgPCBzdGF0ZS5zdWJ2aWV3cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaW5jbHVkZWRGcmFtZXNbJ2FyLnZpZXdfJyArIGldID0gdHJ1ZTtcbiAgICAgICAgICAgIGluY2x1ZGVkRnJhbWVzWydhci5kZXZpY2Uudmlld18nICsgaV0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAvLyBpZGVudGlmeSBmcmFtZXMgdG8gaGlkZSBmcm9tIHRoZSBzZXNzaW9uXG5cbiAgICAgICAgY29uc3QgZXhjbHVkZWRGcmFtZXMgPSB0aGlzLl9leGNsdWRlZEZyYW1lcztcbiAgICAgICAgZm9yIChpZCBpbiBleGNsdWRlZEZyYW1lcykgZGVsZXRlIGV4Y2x1ZGVkRnJhbWVzW2lkXTsgLy9jbGVhclxuXG4gICAgICAgIC8vIGV4Y2x1ZGUgZ2VvbG9jYXRlZCBmcmFtZXMgaWYgbmVjZXNzYXJ5IFxuICAgICAgICBpZiAodGhpcy5wZXJtaXNzaW9uU2VydmljZVByb3ZpZGVyLmdldFBlcm1pc3Npb25TdGF0ZShzZXNzaW9uLCAnZ2VvbG9jYXRpb24nKSAhPSBQZXJtaXNzaW9uU3RhdGUuR1JBTlRFRCkge1xuICAgICAgICAgICAgZXhjbHVkZWRGcmFtZXNbZGV2aWNlT3JpZ2luSWRdID0gdHJ1ZTtcbiAgICAgICAgICAgIGV4Y2x1ZGVkRnJhbWVzW2NvbnRleHRPcmlnaW5JZF0gPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gZ2V0IHN0YXRlcyBmb3IgYWxsIGluY2x1ZGVkIGZyYW1lcywgbWludXMgZXhjbHVkZWQgZnJhbWVzXG4gICAgICAgIGVudGl0eVNlcnZpY2VQcm92aWRlci5maWxsRW50aXR5U3RhdGVNYXAoc2Vzc2lvbkVudGl0aWVzLCBzdGF0ZS50aW1lLCBpbmNsdWRlZEZyYW1lcywgZXhjbHVkZWRGcmFtZXMpO1xuICAgICAgICAgICAgIFxuICAgICAgICAvLyByZW1vdmUgZGV2aWNlIG9yaWVudGF0aW9uIGZyYW1lIHNpbmNlIGVhY2ggc2Vzc2lvbiBjYW4gZ2V0IHRoaXMgZGlyZWN0bHlcbiAgICAgICAgaWYgKHNlc3Npb24udmVyc2lvbk51bWJlciA+PSAxLjQpXG4gICAgICAgICAgICBkZWxldGUgc2Vzc2lvbkVudGl0aWVzW3RoaXMuZGV2aWNlLmRldmljZU9yaWVudGF0aW9uLmlkXTsgXG5cbiAgICAgICAgLy8gcmVjeWNsZSB0aGUgZnJhbWUgc3RhdGUgb2JqZWN0LCBidXQgd2l0aCB0aGUgc2Vzc2lvbiBlbnRpdGllc1xuICAgICAgICBjb25zdCBwYXJlbnRFbnRpdGllcyA9IHN0YXRlLmVudGl0aWVzO1xuICAgICAgICBzdGF0ZS5lbnRpdGllcyA9IHNlc3Npb25FbnRpdGllcztcbiAgICAgICAgc3RhdGUudGltZSA9IHN0YXRlLnRpbWU7XG4gICAgICAgIHN0YXRlLnNlbmRUaW1lID0gSnVsaWFuRGF0ZS5ub3coc3RhdGUuc2VuZFRpbWUpO1xuXG4gICAgICAgIC8vIHNlbmRcbiAgICAgICAgc2Vzc2lvbi5zZW5kKCdhci5jb250ZXh0LnVwZGF0ZScsIHN0YXRlKTtcblxuICAgICAgICAvLyByZXN0b3JlIHRoZSBwYXJlbnQgZW50aXRpZXNcbiAgICAgICAgc3RhdGUuZW50aXRpZXMgPSBwYXJlbnRFbnRpdGllcztcbiAgICB9XG5cbiAgICBwdWJsaWMgZGVzaXJlZEdlb2xvY2F0aW9uT3B0aW9uczpHZW9sb2NhdGlvbk9wdGlvbnMgPSB7fTtcbiAgICBwdWJsaWMgc2Vzc2lvbkdlb2xvY2F0aW9uT3B0aW9ucyA9IG5ldyBNYXA8U2Vzc2lvblBvcnQsIEdlb2xvY2F0aW9uT3B0aW9uc3x1bmRlZmluZWQ+KCk7XG5cbiAgICBwcml2YXRlIF9zZXRHZW9sb2NhdGlvbk9wdGlvbnMoc2Vzc2lvbjpTZXNzaW9uUG9ydCwgb3B0aW9ucz86R2VvbG9jYXRpb25PcHRpb25zKSB7XG4gICAgICAgIHRoaXMuc2Vzc2lvbkdlb2xvY2F0aW9uT3B0aW9ucy5zZXQoc2Vzc2lvbiwgb3B0aW9ucyk7XG4gICAgICAgIHNlc3Npb24uY2xvc2VFdmVudC5hZGRFdmVudExpc3RlbmVyKCgpPT57XG4gICAgICAgICAgICB0aGlzLnNlc3Npb25HZW9sb2NhdGlvbk9wdGlvbnMuZGVsZXRlKHNlc3Npb24pO1xuICAgICAgICAgICAgdGhpcy5fdXBkYXRlRGVzaXJlZEdlb2xvY2F0aW9uT3B0aW9ucygpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5fdXBkYXRlRGVzaXJlZEdlb2xvY2F0aW9uT3B0aW9ucygpO1xuICAgIH1cblxuICAgIHByaXZhdGUgX3VwZGF0ZURlc2lyZWRHZW9sb2NhdGlvbk9wdGlvbnMoKSB7XG4gICAgICAgIGNvbnN0IHJlZHVjZWRPcHRpb25zOkdlb2xvY2F0aW9uT3B0aW9ucyA9IHt9O1xuICAgICAgICB0aGlzLnNlc3Npb25HZW9sb2NhdGlvbk9wdGlvbnMuZm9yRWFjaCgob3B0aW9ucywgc2Vzc2lvbik9PntcbiAgICAgICAgICAgIHJlZHVjZWRPcHRpb25zLmVuYWJsZUhpZ2hBY2N1cmFjeSA9IFxuICAgICAgICAgICAgICAgIHJlZHVjZWRPcHRpb25zLmVuYWJsZUhpZ2hBY2N1cmFjeSB8fCAob3B0aW9ucyAmJiBvcHRpb25zLmVuYWJsZUhpZ2hBY2N1cmFjeSkgfHwgZmFsc2U7XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAodGhpcy5kZXNpcmVkR2VvbG9jYXRpb25PcHRpb25zLmVuYWJsZUhpZ2hBY2N1cmFjeSAhPT0gcmVkdWNlZE9wdGlvbnMuZW5hYmxlSGlnaEFjY3VyYWN5KSB7XG4gICAgICAgICAgICB0aGlzLmRlc2lyZWRHZW9sb2NhdGlvbk9wdGlvbnMgPSByZWR1Y2VkT3B0aW9ucztcbiAgICAgICAgfVxuICAgIH1cbn0iXX0=