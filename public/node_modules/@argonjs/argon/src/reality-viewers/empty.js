var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { inject, Container } from 'aurelia-dependency-injection';
import { CameraEventAggregator, CameraEventType, ReferenceFrame, Cartesian3, Quaternion, Matrix3, Matrix4, PerspectiveFrustum, CesiumMath } from '../cesium/cesium-imports';
import { Configuration, Role, SerializedSubviewList, AVERAGE_EYE_HEIGHT } from '../common';
import { SessionService, ConnectService, SessionConnectService } from '../session';
import { eastUpSouthToFixedFrame, decomposePerspectiveProjectionMatrix, getEntityPositionInReferenceFrame, getEntityOrientationInReferenceFrame, isIOS, isAndroid } from '../utils';
import { EntityService } from '../entity';
import { ContextService } from '../context';
import { DeviceService } from '../device';
import { ViewService } from '../view';
import { PoseStatus } from '../entity';
import { RealityViewer } from './base';
import { RealityService } from '../reality';
import { VisibilityService } from '../visibility';
var EmptyRealityViewer = (function (_super) {
    __extends(EmptyRealityViewer, _super);
    function EmptyRealityViewer(sessionService, viewService, container, uri) {
        var _this = _super.call(this, uri) || this;
        _this.sessionService = sessionService;
        _this.viewService = viewService;
        _this.container = container;
        _this.uri = uri;
        _this.type = 'empty';
        _this._moveFlags = {
            moveForward: false,
            moveBackward: false,
            moveUp: false,
            moveDown: false,
            moveLeft: false,
            moveRight: false
        };
        _this._scratchMatrix3 = new Matrix3;
        _this._scratchMatrix4 = new Matrix4;
        function getFlagForKeyCode(keyCode) {
            switch (keyCode) {
                case 'W'.charCodeAt(0):
                    return 'moveForward';
                case 'S'.charCodeAt(0):
                    return 'moveBackward';
                case 'E'.charCodeAt(0):
                    return 'moveUp';
                case 'R'.charCodeAt(0):
                    return 'moveDown';
                case 'D'.charCodeAt(0):
                    return 'moveRight';
                case 'A'.charCodeAt(0):
                    return 'moveLeft';
                default:
                    return undefined;
            }
        }
        var keydownListener = function (e) {
            var flagName = getFlagForKeyCode(e.keyCode);
            if (typeof flagName !== 'undefined') {
                _this._moveFlags[flagName] = true;
            }
        };
        var keyupListener = function (e) {
            var flagName = getFlagForKeyCode(e.keyCode);
            if (typeof flagName !== 'undefined') {
                _this._moveFlags[flagName] = false;
            }
        };
        if (typeof document !== 'undefined') {
            _this.presentChangeEvent.addEventListener(function () {
                if (_this.isPresenting) {
                    _this.viewService.element.style.backgroundColor = 'white';
                    if (!_this._aggregator && _this.viewService.element) {
                        _this.viewService.element['disableRootEvents'] = true;
                        _this._aggregator = new CameraEventAggregator(_this.viewService.element);
                        document.addEventListener('keydown', keydownListener, false);
                        document && document.addEventListener('keyup', keyupListener, false);
                    }
                }
                else {
                    delete _this.viewService.element.style.backgroundColor;
                    _this._aggregator && _this._aggregator.destroy();
                    _this._aggregator = undefined;
                    document && document.removeEventListener('keydown', keydownListener);
                    document && document.removeEventListener('keyup', keyupListener);
                    for (var k in _this._moveFlags) {
                        _this._moveFlags[k] = false;
                    }
                }
            });
        }
        return _this;
    }
    EmptyRealityViewer.prototype.load = function () {
        var _this = this;
        // Create a child container so that we can conveniently setup all the services
        // that would exist in a normal hosted reality viewer 
        var child = this.container.createChild();
        // Create the session instance that will be used by the managerÂ to talk to the reality 
        var session = this.sessionService.addManagedSessionPort(this.uri);
        session.connectEvent.addEventListener(function () {
            _this.connectEvent.raiseEvent(session); // let the manager know the session is ready
        });
        // use a SessionConnectService to create a connection via the session instance we created
        child.registerInstance(ConnectService, new SessionConnectService(session, this.sessionService.configuration));
        // setup the configuration for our empty reality
        child.registerInstance(Configuration, {
            role: Role.REALITY_VIEWER,
            uri: this.uri,
            title: 'Empty',
            version: this.sessionService.configuration.version,
            supportsCustomProtocols: true,
            protocols: ['ar.configureStage@v1']
        });
        // Create the basic services that we need to use.
        child.autoRegisterAll([SessionService, EntityService, VisibilityService, ContextService, DeviceService, RealityService]);
        var childContextService = child.get(ContextService);
        var childDeviceService = child.get(DeviceService);
        var childSessionService = child.get(SessionService);
        var childRealityService = child.get(RealityService);
        var childViewService = child.get(ViewService);
        // the child device service should *not* submit frames to the vrdisplay. 
        childDeviceService.autoSubmitFrame = false;
        var customStagePosition;
        var customStageOrientation;
        // Create protocol handlers for `ar.configureStage` protocol
        childRealityService.connectEvent.addEventListener(function (session) {
            session.on['ar.configureStage.setStageGeolocation'] = function (_a) {
                var geolocation = _a.geolocation;
                customStagePosition = Cartesian3.fromRadians(geolocation.longitude, geolocation.latitude, geolocation.height, undefined, customStagePosition);
                var transformMatrix = eastUpSouthToFixedFrame(customStagePosition, undefined, _this._scratchMatrix4);
                var rotationMatrix = Matrix4.getRotation(transformMatrix, _this._scratchMatrix3);
                customStageOrientation = Quaternion.fromRotationMatrix(rotationMatrix, customStageOrientation);
            };
            session.on['ar.configureStage.resetStageGeolocation'] = function () {
                customStagePosition = undefined;
                customStageOrientation = undefined;
            };
        });
        // Setup everything after connected to the manager. The manager only connects once.
        childSessionService.manager.connectEvent.addEventListener(function () {
            // suppress any errors from not handling some messages
            childSessionService.manager.suppressErrorOnUnknownTopic = true;
            var heading = 0;
            var pitch = 0;
            var scratchQuaternion = new Quaternion;
            var scratchQuaternionPitch = new Quaternion;
            var scratchQuaternionHeading = new Quaternion;
            var positionScratchCartesian = new Cartesian3;
            var movementScratchCartesian = new Cartesian3;
            var orientationMatrix = new Matrix3;
            var up = new Cartesian3(0, 0, 1);
            var right = new Cartesian3(1, 0, 0);
            var forward = new Cartesian3(0, -1, 0);
            var frustum = new PerspectiveFrustum();
            var NEGATIVE_UNIT_Z = new Cartesian3(0, 0, -1);
            var deviceStage = childDeviceService.stage;
            var deviceUser = childDeviceService.user;
            var subviews = [];
            var deviceUserPose = childContextService.createEntityPose(deviceUser, deviceStage);
            var checkSuggestedGeolocationSubscription = function () {
                if (childDeviceService.suggestedGeolocationSubscription) {
                    childDeviceService.subscribeGeolocation(childDeviceService.suggestedGeolocationSubscription);
                }
                else {
                    childDeviceService.unsubscribeGeolocation();
                }
            };
            checkSuggestedGeolocationSubscription();
            var remove1 = childDeviceService.suggestedGeolocationSubscriptionChangeEvent.addEventListener(checkSuggestedGeolocationSubscription);
            var remove2 = childDeviceService.frameStateEvent.addEventListener(function (frameState) {
                if (childSessionService.manager.isClosed)
                    return;
                var aggregator = _this._aggregator;
                var flags = _this._moveFlags;
                if (!_this.isPresenting) {
                    aggregator && aggregator.reset();
                    return;
                }
                SerializedSubviewList.clone(frameState.subviews, subviews);
                // provide fov controls
                if (!childDeviceService.strict) {
                    decomposePerspectiveProjectionMatrix(subviews[0].projectionMatrix, frustum);
                    frustum.fov = childViewService.subviews[0] && childViewService.subviews[0].frustum.fov || CesiumMath.PI_OVER_THREE;
                    if (aggregator && aggregator.isMoving(CameraEventType.WHEEL)) {
                        var wheelMovement = aggregator.getMovement(CameraEventType.WHEEL);
                        var diff = wheelMovement.endPosition.y;
                        frustum.fov = Math.min(Math.max(frustum.fov - diff * 0.02, Math.PI / 8), Math.PI - Math.PI / 8);
                    }
                    if (aggregator && aggregator.isMoving(CameraEventType.PINCH)) {
                        var pinchMovement = aggregator.getMovement(CameraEventType.PINCH);
                        var diff = pinchMovement.distance.endPosition.y - pinchMovement.distance.startPosition.y;
                        frustum.fov = Math.min(Math.max(frustum.fov - diff * 0.02, Math.PI / 8), Math.PI - Math.PI / 8);
                    }
                    subviews.forEach(function (s) {
                        var aspect = s.viewport.width / s.viewport.height;
                        frustum.aspectRatio = isFinite(aspect) ? aspect : 1;
                        Matrix4.clone(frustum.projectionMatrix, s.projectionMatrix);
                    });
                }
                var time = frameState.time;
                deviceUserPose.update(time);
                var overrideUser = !(deviceUserPose.status & PoseStatus.KNOWN);
                var userTracking = overrideUser ?
                    (isIOS || isAndroid ? '3DOF' : '6DOF') :
                    childDeviceService.userTracking;
                // provide controls if the device does not have a physical pose
                if (overrideUser) {
                    var contextUser = childContextService.user;
                    var contextStage = childContextService.stage;
                    var position = getEntityPositionInReferenceFrame(contextUser, time, contextStage, positionScratchCartesian) ||
                        Cartesian3.fromElements(0, childDeviceService.displayMode === 'hand' ? AVERAGE_EYE_HEIGHT * 0.75 : AVERAGE_EYE_HEIGHT, 0, positionScratchCartesian);
                    var orientation_1 = getEntityOrientationInReferenceFrame(contextUser, time, contextStage, scratchQuaternion) ||
                        Quaternion.clone(Quaternion.IDENTITY, scratchQuaternion);
                    if (aggregator && aggregator.isMoving(CameraEventType.LEFT_DRAG)) {
                        var dragMovement = aggregator.getMovement(CameraEventType.LEFT_DRAG);
                        if (orientation_1) {
                            var viewport = frameState.viewport;
                            heading += frustum.fov * (dragMovement.endPosition.x - dragMovement.startPosition.x) / viewport.width;
                            pitch += frustum.fovy * (dragMovement.endPosition.y - dragMovement.startPosition.y) / viewport.height;
                            pitch = Math.min(Math.max(-CesiumMath.PI_OVER_TWO, pitch), CesiumMath.PI_OVER_TWO);
                            var pitchQuat = Quaternion.fromAxisAngle(Cartesian3.UNIT_X, pitch, scratchQuaternionPitch);
                            var headingQuat = Quaternion.fromAxisAngle(Cartesian3.UNIT_Y, heading, scratchQuaternionHeading);
                            var orientation_2 = Quaternion.multiply(headingQuat, pitchQuat, scratchQuaternion);
                            contextUser.orientation.setValue(orientation_2);
                        }
                    }
                    Matrix3.fromQuaternion(orientation_1, orientationMatrix);
                    Matrix3.multiplyByVector(orientationMatrix, Cartesian3.UNIT_Y, up);
                    Matrix3.multiplyByVector(orientationMatrix, Cartesian3.UNIT_X, right);
                    Matrix3.multiplyByVector(orientationMatrix, NEGATIVE_UNIT_Z, forward);
                    var moveRate = 0.02;
                    if (flags.moveForward) {
                        Cartesian3.multiplyByScalar(forward, moveRate, movementScratchCartesian);
                        Cartesian3.add(position, movementScratchCartesian, position);
                    }
                    if (flags.moveBackward) {
                        Cartesian3.multiplyByScalar(forward, -moveRate, movementScratchCartesian);
                        Cartesian3.add(position, movementScratchCartesian, position);
                    }
                    if (flags.moveUp) {
                        Cartesian3.multiplyByScalar(up, moveRate, movementScratchCartesian);
                        Cartesian3.add(position, movementScratchCartesian, position);
                    }
                    if (flags.moveDown) {
                        Cartesian3.multiplyByScalar(up, -moveRate, movementScratchCartesian);
                        Cartesian3.add(position, movementScratchCartesian, position);
                    }
                    if (flags.moveLeft) {
                        Cartesian3.multiplyByScalar(right, -moveRate, movementScratchCartesian);
                        Cartesian3.add(position, movementScratchCartesian, position);
                    }
                    if (flags.moveRight) {
                        Cartesian3.multiplyByScalar(right, moveRate, movementScratchCartesian);
                        Cartesian3.add(position, movementScratchCartesian, position);
                    }
                    contextUser.position.setValue(position, contextStage);
                    contextUser.orientation.setValue(orientation_1);
                }
                var overrideStage = customStagePosition && customStageOrientation ? true : false;
                if (overrideStage) {
                    var contextStage = childContextService.stage;
                    contextStage.position.setValue(customStagePosition, ReferenceFrame.FIXED);
                    contextStage.orientation.setValue(customStageOrientation);
                }
                var contextFrameState = childContextService.createFrameState(time, frameState.viewport, subviews, {
                    overrideUser: overrideUser,
                    overrideStage: overrideStage,
                    userTracking: userTracking,
                });
                childContextService.submitFrameState(contextFrameState);
                aggregator && aggregator.reset();
            });
            childSessionService.manager.closeEvent.addEventListener(function () {
                remove1();
                remove2();
            });
        });
        childSessionService.connect();
    };
    EmptyRealityViewer = __decorate([
        inject(SessionService, ViewService, Container),
        __metadata("design:paramtypes", [SessionService,
            ViewService,
            Container, String])
    ], EmptyRealityViewer);
    return EmptyRealityViewer;
}(RealityViewer));
export { EmptyRealityViewer };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW1wdHkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJlbXB0eS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQ0EsT0FBTyxFQUFFLE1BQU0sRUFBRSxTQUFTLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQTtBQUNoRSxPQUFPLEVBQ0gscUJBQXFCLEVBQ3JCLGVBQWUsRUFHZixjQUFjLEVBR2QsVUFBVSxFQUNWLFVBQVUsRUFDVixPQUFPLEVBQ1AsT0FBTyxFQUNQLGtCQUFrQixFQUNsQixVQUFVLEVBQ2IsTUFBTSwwQkFBMEIsQ0FBQTtBQUNqQyxPQUFPLEVBQUUsYUFBYSxFQUFFLElBQUksRUFBRSxxQkFBcUIsRUFBRSxrQkFBa0IsRUFBRSxNQUFNLFdBQVcsQ0FBQTtBQUMxRixPQUFPLEVBQUUsY0FBYyxFQUFFLGNBQWMsRUFBRSxxQkFBcUIsRUFBRSxNQUFNLFlBQVksQ0FBQTtBQUNsRixPQUFPLEVBQ0gsdUJBQXVCLEVBQ3ZCLG9DQUFvQyxFQUNwQyxpQ0FBaUMsRUFDakMsb0NBQW9DLEVBQ3BDLEtBQUssRUFDTCxTQUFTLEVBQ1osTUFBTSxVQUFVLENBQUE7QUFDakIsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLFdBQVcsQ0FBQTtBQUN6QyxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sWUFBWSxDQUFBO0FBQzNDLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxXQUFXLENBQUE7QUFDekMsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLFNBQVMsQ0FBQTtBQUNyQyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sV0FBVyxDQUFBO0FBQ3RDLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxRQUFRLENBQUE7QUFDdEMsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLFlBQVksQ0FBQTtBQUMzQyxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxlQUFlLENBQUE7QUFhakQ7SUFBd0Msc0NBQWE7SUFjakQsNEJBQ1ksY0FBOEIs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ZWN0LCBDb250YWluZXIgfSBmcm9tICdhdXJlbGlhLWRlcGVuZGVuY3ktaW5qZWN0aW9uJ1xuaW1wb3J0IHsgXG4gICAgQ2FtZXJhRXZlbnRBZ2dyZWdhdG9yLFxuICAgIENhbWVyYUV2ZW50VHlwZSxcbiAgICBDb25zdGFudFBvc2l0aW9uUHJvcGVydHksXG4gICAgQ29uc3RhbnRQcm9wZXJ0eSxcbiAgICBSZWZlcmVuY2VGcmFtZSxcbiAgICBDYXJ0b2dyYXBoaWMsXG4gICAgQ2FydGVzaWFuMixcbiAgICBDYXJ0ZXNpYW4zLFxuICAgIFF1YXRlcm5pb24sXG4gICAgTWF0cml4MyxcbiAgICBNYXRyaXg0LFxuICAgIFBlcnNwZWN0aXZlRnJ1c3R1bSxcbiAgICBDZXNpdW1NYXRoXG59IGZyb20gJy4uL2Nlc2l1bS9jZXNpdW0taW1wb3J0cydcbmltcG9ydCB7IENvbmZpZ3VyYXRpb24sIFJvbGUsIFNlcmlhbGl6ZWRTdWJ2aWV3TGlzdCwgQVZFUkFHRV9FWUVfSEVJR0hUIH0gZnJvbSAnLi4vY29tbW9uJ1xuaW1wb3J0IHsgU2Vzc2lvblNlcnZpY2UsIENvbm5lY3RTZXJ2aWNlLCBTZXNzaW9uQ29ubmVjdFNlcnZpY2UgfSBmcm9tICcuLi9zZXNzaW9uJ1xuaW1wb3J0IHsgXG4gICAgZWFzdFVwU291dGhUb0ZpeGVkRnJhbWUsIFxuICAgIGRlY29tcG9zZVBlcnNwZWN0aXZlUHJvamVjdGlvbk1hdHJpeCwgXG4gICAgZ2V0RW50aXR5UG9zaXRpb25JblJlZmVyZW5jZUZyYW1lLCBcbiAgICBnZXRFbnRpdHlPcmllbnRhdGlvbkluUmVmZXJlbmNlRnJhbWUsXG4gICAgaXNJT1MsXG4gICAgaXNBbmRyb2lkXG59IGZyb20gJy4uL3V0aWxzJ1xuaW1wb3J0IHsgRW50aXR5U2VydmljZSB9IGZyb20gJy4uL2VudGl0eSdcbmltcG9ydCB7IENvbnRleHRTZXJ2aWNlIH0gZnJvbSAnLi4vY29udGV4dCdcbmltcG9ydCB7IERldmljZVNlcnZpY2UgfSBmcm9tICcuLi9kZXZpY2UnXG5pbXBvcnQgeyBWaWV3U2VydmljZSB9IGZyb20gJy4uL3ZpZXcnXG5pbXBvcnQgeyBQb3NlU3RhdHVzIH0gZnJvbSAnLi4vZW50aXR5J1xuaW1wb3J0IHsgUmVhbGl0eVZpZXdlciB9IGZyb20gJy4vYmFzZSdcbmltcG9ydCB7IFJlYWxpdHlTZXJ2aWNlIH0gZnJvbSAnLi4vcmVhbGl0eSdcbmltcG9ydCB7IFZpc2liaWxpdHlTZXJ2aWNlIH0gZnJvbSAnLi4vdmlzaWJpbGl0eSdcblxuaW50ZXJmYWNlIE1vdmVtZW50IHtcbiAgICBzdGFydFBvc2l0aW9uOkNhcnRlc2lhbjI7IFxuICAgIGVuZFBvc2l0aW9uOkNhcnRlc2lhbjI7XG59XG5cbmludGVyZmFjZSBQaW5jaE1vdmVtZW50IHtcbiAgICBkaXN0YW5jZTogTW92ZW1lbnQ7XG4gICAgYW5nbGVBbmRIZWlnaHQ6IE1vdmVtZW50O1xufVxuXG5AaW5qZWN0KFNlc3Npb25TZXJ2aWNlLCBWaWV3U2VydmljZSwgQ29udGFpbmVyKVxuZXhwb3J0IGNsYXNzIEVtcHR5UmVhbGl0eVZpZXdlciBleHRlbmRzIFJlYWxpdHlWaWV3ZXIge1xuXG4gICAgcHVibGljIHR5cGUgPSAnZW1wdHknO1xuXG4gICAgcHJpdmF0ZSBfYWdncmVnYXRvcjpDYW1lcmFFdmVudEFnZ3JlZ2F0b3J8dW5kZWZpbmVkO1xuICAgIHByaXZhdGUgX21vdmVGbGFncyA9IHtcbiAgICAgICAgbW92ZUZvcndhcmQgOiBmYWxzZSxcbiAgICAgICAgbW92ZUJhY2t3YXJkIDogZmFsc2UsXG4gICAgICAgIG1vdmVVcCA6IGZhbHNlLFxuICAgICAgICBtb3ZlRG93biA6IGZhbHNlLFxuICAgICAgICBtb3ZlTGVmdCA6IGZhbHNlLFxuICAgICAgICBtb3ZlUmlnaHQgOiBmYWxzZVxuICAgIH1cblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBwcml2YXRlIHNlc3Npb25TZXJ2aWNlOiBTZXNzaW9uU2VydmljZSxcbiAgICAgICAgcHJpdmF0ZSB2aWV3U2VydmljZTogVmlld1NlcnZpY2UsXG4gICAgICAgIHByaXZhdGUgY29udGFpbmVyOiBDb250YWluZXIsXG4gICAgICAgIHB1YmxpYyB1cmk6c3RyaW5nKSB7XG4gICAgICAgIHN1cGVyKHVyaSk7XG5cbiAgICAgICAgZnVuY3Rpb24gZ2V0RmxhZ0ZvcktleUNvZGUoa2V5Q29kZSkge1xuICAgICAgICAgICAgc3dpdGNoIChrZXlDb2RlKSB7XG4gICAgICAgICAgICBjYXNlICdXJy5jaGFyQ29kZUF0KDApOlxuICAgICAgICAgICAgICAgIHJldHVybiAnbW92ZUZvcndhcmQnO1xuICAgICAgICAgICAgY2FzZSAnUycuY2hhckNvZGVBdCgwKTpcbiAgICAgICAgICAgICAgICByZXR1cm4gJ21vdmVCYWNrd2FyZCc7XG4gICAgICAgICAgICBjYXNlICdFJy5jaGFyQ29kZUF0KDApOlxuICAgICAgICAgICAgICAgIHJldHVybiAnbW92ZVVwJztcbiAgICAgICAgICAgIGNhc2UgJ1InLmNoYXJDb2RlQXQoMCk6XG4gICAgICAgICAgICAgICAgcmV0dXJuICdtb3ZlRG93bic7XG4gICAgICAgICAgICBjYXNlICdEJy5jaGFyQ29kZUF0KDApOlxuICAgICAgICAgICAgICAgIHJldHVybiAnbW92ZVJpZ2h0JztcbiAgICAgICAgICAgIGNhc2UgJ0EnLmNoYXJDb2RlQXQoMCk6XG4gICAgICAgICAgICAgICAgcmV0dXJuICdtb3ZlTGVmdCc7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGNvbnN0IGtleWRvd25MaXN0ZW5lciA9IChlKSA9PiB7XG4gICAgICAgICAgICB2YXIgZmxhZ05hbWUgPSBnZXRGbGFnRm9yS2V5Q29kZShlLmtleUNvZGUpO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBmbGFnTmFtZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9tb3ZlRmxhZ3NbZmxhZ05hbWVdID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGtleXVwTGlzdGVuZXIgPSAoZSkgPT4ge1xuICAgICAgICAgICAgdmFyIGZsYWdOYW1lID0gZ2V0RmxhZ0ZvcktleUNvZGUoZS5rZXlDb2RlKTtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZmxhZ05hbWUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fbW92ZUZsYWdzW2ZsYWdOYW1lXSA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHRoaXMucHJlc2VudENoYW5nZUV2ZW50LmFkZEV2ZW50TGlzdGVuZXIoKCk9PntcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5pc1ByZXNlbnRpbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy52aWV3U2VydmljZS5lbGVtZW50LnN0eWxlLmJhY2tncm91bmRDb2xvciA9ICd3aGl0ZSc7XG4gICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5fYWdncmVnYXRvciAmJiB0aGlzLnZpZXdTZXJ2aWNlLmVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudmlld1NlcnZpY2UuZWxlbWVudFsnZGlzYWJsZVJvb3RFdmVudHMnXSA9IHRydWU7IFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fYWdncmVnYXRvciA9IG5ldyBDYW1lcmFFdmVudEFnZ3JlZ2F0b3IoPGFueT50aGlzLnZpZXdTZXJ2aWNlLmVsZW1lbnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIGtleWRvd25MaXN0ZW5lciwgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQgJiYgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigna2V5dXAnLCBrZXl1cExpc3RlbmVyLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy52aWV3U2VydmljZS5lbGVtZW50LnN0eWxlLmJhY2tncm91bmRDb2xvcjtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fYWdncmVnYXRvciAmJiB0aGlzLl9hZ2dyZWdhdG9yLmRlc3Ryb3koKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fYWdncmVnYXRvciA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQgJiYgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIGtleWRvd25MaXN0ZW5lcik7XG4gICAgICAgICAgICAgICAgICAgIGRvY3VtZW50ICYmIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2tleXVwJywga2V5dXBMaXN0ZW5lcik7XG4gICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgayBpbiB0aGlzLl9tb3ZlRmxhZ3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX21vdmVGbGFnc1trXSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIF9zY3JhdGNoTWF0cml4MyA9IG5ldyBNYXRyaXgzO1xuICAgIHByaXZhdGUgX3NjcmF0Y2hNYXRyaXg0ID0gbmV3IE1hdHJpeDQ7XG5cbiAgICBwdWJsaWMgbG9hZCgpOiB2b2lkIHtcbiAgICAgICAgLy8gQ3JlYXRlIGEgY2hpbGQgY29udGFpbmVyIHNvIHRoYXQgd2UgY2FuIGNvbnZlbmllbnRseSBzZXR1cCBhbGwgdGhlIHNlcnZpY2VzXG4gICAgICAgIC8vIHRoYXQgd291bGQgZXhpc3QgaW4gYSBub3JtYWwgaG9zdGVkIHJlYWxpdHkgdmlld2VyIFxuICAgICAgICBjb25zdCBjaGlsZCA9IHRoaXMuY29udGFpbmVyLmNyZWF0ZUNoaWxkKCk7XG5cbiAgICAgICAgLy8gQ3JlYXRlIHRoZSBzZXNzaW9uIGluc3RhbmNlIHRoYXQgd2lsbCBiZSB1c2VkIGJ5IHRoZSBtYW5hZ2VywqB0byB0YWxrIHRvIHRoZSByZWFsaXR5IFxuICAgICAgICBjb25zdCBzZXNzaW9uID0gdGhpcy5zZXNzaW9uU2VydmljZS5hZGRNYW5hZ2VkU2Vzc2lvblBvcnQodGhpcy51cmkpO1xuICAgICAgICBzZXNzaW9uLmNvbm5lY3RFdmVudC5hZGRFdmVudExpc3RlbmVyKCgpPT57XG4gICAgICAgICAgICB0aGlzLmNvbm5lY3RFdmVudC5yYWlzZUV2ZW50KHNlc3Npb24pOyAvLyBsZXQgdGhlIG1hbmFnZXIga25vdyB0aGUgc2Vzc2lvbiBpcyByZWFkeVxuICAgICAgICB9KTtcblxuICAgICAgICAvLyB1c2UgYSBTZXNzaW9uQ29ubmVjdFNlcnZpY2UgdG8gY3JlYXRlIGEgY29ubmVjdGlvbiB2aWEgdGhlIHNlc3Npb24gaW5zdGFuY2Ugd2UgY3JlYXRlZFxuICAgICAgICBjaGlsZC5yZWdpc3Rlckluc3RhbmNlKENvbm5lY3RTZXJ2aWNlLCBcbiAgICAgICAgICAgIG5ldyBTZXNzaW9uQ29ubmVjdFNlcnZpY2Uoc2Vzc2lvbiwgdGhpcy5zZXNzaW9uU2VydmljZS5jb25maWd1cmF0aW9uKVxuICAgICAgICApO1xuXG4gICAgICAgIC8vIHNldHVwIHRoZSBjb25maWd1cmF0aW9uIGZvciBvdXIgZW1wdHkgcmVhbGl0eVxuICAgICAgICBjaGlsZC5yZWdpc3Rlckluc3RhbmNlKENvbmZpZ3VyYXRpb24sIHsgXG4gICAgICAgICAgICByb2xlOiBSb2xlLlJFQUxJVFlfVklFV0VSLCBcbiAgICAgICAgICAgIHVyaTogdGhpcy51cmksXG4gICAgICAgICAgICB0aXRsZTogJ0VtcHR5JyxcbiAgICAgICAgICAgIHZlcnNpb246IHRoaXMuc2Vzc2lvblNlcnZpY2UuY29uZmlndXJhdGlvbi52ZXJzaW9uLFxuICAgICAgICAgICAgc3VwcG9ydHNDdXN0b21Qcm90b2NvbHM6IHRydWUsXG4gICAgICAgICAgICBwcm90b2NvbHM6IFsnYXIuY29uZmlndXJlU3RhZ2VAdjEnXVxuICAgICAgICB9KTtcblxuICAgICAgICAvLyBDcmVhdGUgdGhlIGJhc2ljIHNlcnZpY2VzIHRoYXQgd2UgbmVlZCB0byB1c2UuXG4gICAgICAgIGNoaWxkLmF1dG9SZWdpc3RlckFsbChbU2Vzc2lvblNlcnZpY2UsIEVudGl0eVNlcnZpY2UsIFZpc2liaWxpdHlTZXJ2aWNlLCBDb250ZXh0U2VydmljZSwgRGV2aWNlU2VydmljZSwgUmVhbGl0eVNlcnZpY2VdKTtcbiAgICAgICAgY29uc3QgY2hpbGRDb250ZXh0U2VydmljZSA9IGNoaWxkLmdldChDb250ZXh0U2VydmljZSkgYXMgQ29udGV4dFNlcnZpY2U7XG4gICAgICAgIGNvbnN0IGNoaWxkRGV2aWNlU2VydmljZSA9IGNoaWxkLmdldChEZXZpY2VTZXJ2aWNlKSBhcyBEZXZpY2VTZXJ2aWNlO1xuICAgICAgICBjb25zdCBjaGlsZFNlc3Npb25TZXJ2aWNlID0gY2hpbGQuZ2V0KFNlc3Npb25TZXJ2aWNlKSBhcyBTZXNzaW9uU2VydmljZTtcbiAgICAgICAgY29uc3QgY2hpbGRSZWFsaXR5U2VydmljZSA9IGNoaWxkLmdldChSZWFsaXR5U2VydmljZSkgYXMgUmVhbGl0eVNlcnZpY2U7XG4gICAgICAgIGNvbnN0IGNoaWxkVmlld1NlcnZpY2UgPSBjaGlsZC5nZXQoVmlld1NlcnZpY2UpIGFzIFZpZXdTZXJ2aWNlO1xuXG4gICAgICAgIC8vIHRoZSBjaGlsZCBkZXZpY2Ugc2VydmljZSBzaG91bGQgKm5vdCogc3VibWl0IGZyYW1lcyB0byB0aGUgdnJkaXNwbGF5LiBcbiAgICAgICAgY2hpbGREZXZpY2VTZXJ2aWNlLmF1dG9TdWJtaXRGcmFtZSA9IGZhbHNlO1xuICAgICAgICBcbiAgICAgICAgbGV0IGN1c3RvbVN0YWdlUG9zaXRpb246Q2FydGVzaWFuM3x1bmRlZmluZWQ7XG4gICAgICAgIGxldCBjdXN0b21TdGFnZU9yaWVudGF0aW9uOlF1YXRlcm5pb258dW5kZWZpbmVkO1xuXG4gICAgICAgIC8vIENyZWF0ZSBwcm90b2NvbCBoYW5kbGVycyBmb3IgYGFyLmNvbmZpZ3VyZVN0YWdlYCBwcm90b2NvbFxuICAgICAgICBjaGlsZFJlYWxpdHlTZXJ2aWNlLmNvbm5lY3RFdmVudC5hZGRFdmVudExpc3RlbmVyKChzZXNzaW9uKT0+e1xuXG4gICAgICAgICAgICBzZXNzaW9uLm9uWydhci5jb25maWd1cmVTdGFnZS5zZXRTdGFnZUdlb2xvY2F0aW9uJ10gPSAoe2dlb2xvY2F0aW9ufTp7Z2VvbG9jYXRpb246Q2FydG9ncmFwaGljfSkgPT4ge1xuICAgICAgICAgICAgICAgIGN1c3RvbVN0YWdlUG9zaXRpb24gPSBDYXJ0ZXNpYW4zLmZyb21SYWRpYW5zKGdlb2xvY2F0aW9uLmxvbmdpdHVkZSwgZ2VvbG9jYXRpb24ubGF0aXR1ZGUsIGdlb2xvY2F0aW9uLmhlaWdodCwgdW5kZWZpbmVkLCBjdXN0b21TdGFnZVBvc2l0aW9uKTtcbiAgICAgICAgICAgICAgICBjb25zdCB0cmFuc2Zvcm1NYXRyaXggPSBlYXN0VXBTb3V0aFRvRml4ZWRGcmFtZShjdXN0b21TdGFnZVBvc2l0aW9uLCB1bmRlZmluZWQsIHRoaXMuX3NjcmF0Y2hNYXRyaXg0KTtcbiAgICAgICAgICAgICAgICBjb25zdCByb3RhdGlvbk1hdHJpeCA9IE1hdHJpeDQuZ2V0Um90YXRpb24odHJhbnNmb3JtTWF0cml4LCB0aGlzLl9zY3JhdGNoTWF0cml4Myk7XG4gICAgICAgICAgICAgICAgY3VzdG9tU3RhZ2VPcmllbnRhdGlvbiA9IFF1YXRlcm5pb24uZnJvbVJvdGF0aW9uTWF0cml4KHJvdGF0aW9uTWF0cml4LCBjdXN0b21TdGFnZU9yaWVudGF0aW9uKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgc2Vzc2lvbi5vblsnYXIuY29uZmlndXJlU3RhZ2UucmVzZXRTdGFnZUdlb2xvY2F0aW9uJ10gPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgY3VzdG9tU3RhZ2VQb3NpdGlvbiA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICBjdXN0b21TdGFnZU9yaWVudGF0aW9uID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIFNldHVwIGV2ZXJ5dGhpbmcgYWZ0ZXIgY29ubmVjdGVkIHRvIHRoZSBtYW5hZ2VyLiBUaGUgbWFuYWdlciBvbmx5IGNvbm5lY3RzIG9uY2UuXG4gICAgICAgIGNoaWxkU2Vzc2lvblNlcnZpY2UubWFuYWdlci5jb25uZWN0RXZlbnQuYWRkRXZlbnRMaXN0ZW5lcigoKT0+e1xuXG4gICAgICAgICAgICAvLyBzdXBwcmVzcyBhbnkgZXJyb3JzIGZyb20gbm90IGhhbmRsaW5nIHNvbWUgbWVzc2FnZXNcbiAgICAgICAgICAgIGNoaWxkU2Vzc2lvblNlcnZpY2UubWFuYWdlci5zdXBwcmVzc0Vycm9yT25Vbmtub3duVG9waWMgPSB0cnVlO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICB2YXIgaGVhZGluZyA9IDA7XG4gICAgICAgICAgICB2YXIgcGl0Y2ggPSAwO1xuICAgICAgICAgICAgY29uc3Qgc2NyYXRjaFF1YXRlcm5pb24gPSBuZXcgUXVhdGVybmlvbjtcbiAgICAgICAgICAgIGNvbnN0IHNjcmF0Y2hRdWF0ZXJuaW9uUGl0Y2ggPSBuZXcgUXVhdGVybmlvbjtcbiAgICAgICAgICAgIGNvbnN0IHNjcmF0Y2hRdWF0ZXJuaW9uSGVhZGluZyA9IG5ldyBRdWF0ZXJuaW9uO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBjb25zdCBwb3NpdGlvblNjcmF0Y2hDYXJ0ZXNpYW4gPSBuZXcgQ2FydGVzaWFuMztcbiAgICAgICAgICAgIGNvbnN0IG1vdmVtZW50U2NyYXRjaENhcnRlc2lhbiA9IG5ldyBDYXJ0ZXNpYW4zO1xuICAgICAgICAgICAgY29uc3Qgb3JpZW50YXRpb25NYXRyaXggPSBuZXcgTWF0cml4MztcbiAgICAgICAgICAgIGNvbnN0IHVwID0gbmV3IENhcnRlc2lhbjMoMCwwLDEpO1xuICAgICAgICAgICAgY29uc3QgcmlnaHQgPSBuZXcgQ2FydGVzaWFuMygxLDAsMCk7XG4gICAgICAgICAgICBjb25zdCBmb3J3YXJkID0gbmV3IENhcnRlc2lhbjMoMCwtMSwwKTtcbiAgICAgICAgICAgIGNvbnN0IGZydXN0dW0gPSBuZXcgUGVyc3BlY3RpdmVGcnVzdHVtKCk7XG4gICAgICAgICAgICBjb25zdCBORUdBVElWRV9VTklUX1ogPSBuZXcgQ2FydGVzaWFuMygwLDAsLTEpO1xuXG4gICAgICAgICAgICBjb25zdCBkZXZpY2VTdGFnZSA9IGNoaWxkRGV2aWNlU2VydmljZS5zdGFnZTtcbiAgICAgICAgICAgIGNvbnN0IGRldmljZVVzZXIgPSBjaGlsZERldmljZVNlcnZpY2UudXNlcjtcbiAgICAgICAgICAgIGNvbnN0IHN1YnZpZXdzOlNlcmlhbGl6ZWRTdWJ2aWV3TGlzdCA9IFtdO1xuXG4gICAgICAgICAgICBjb25zdCBkZXZpY2VVc2VyUG9zZSA9IGNoaWxkQ29udGV4dFNlcnZpY2UuY3JlYXRlRW50aXR5UG9zZShkZXZpY2VVc2VyLCBkZXZpY2VTdGFnZSk7XG5cblxuICAgICAgICAgICAgY29uc3QgY2hlY2tTdWdnZXN0ZWRHZW9sb2NhdGlvblN1YnNjcmlwdGlvbiA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoY2hpbGREZXZpY2VTZXJ2aWNlLnN1Z2dlc3RlZEdlb2xvY2F0aW9uU3Vic2NyaXB0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIGNoaWxkRGV2aWNlU2VydmljZS5zdWJzY3JpYmVHZW9sb2NhdGlvbihjaGlsZERldmljZVNlcnZpY2Uuc3VnZ2VzdGVkR2VvbG9jYXRpb25TdWJzY3JpcHRpb24pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNoaWxkRGV2aWNlU2VydmljZS51bnN1YnNjcmliZUdlb2xvY2F0aW9uKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjaGVja1N1Z2dlc3RlZEdlb2xvY2F0aW9uU3Vic2NyaXB0aW9uKCk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGNvbnN0IHJlbW92ZTEgPSBjaGlsZERldmljZVNlcnZpY2Uuc3VnZ2VzdGVkR2VvbG9jYXRpb25TdWJzY3JpcHRpb25DaGFuZ2VFdmVudC5hZGRFdmVudExpc3RlbmVyKGNoZWNrU3VnZ2VzdGVkR2VvbG9jYXRpb25TdWJzY3JpcHRpb24pO1xuXG4gICAgICAgICAgICBjb25zdCByZW1vdmUyID0gY2hpbGREZXZpY2VTZXJ2aWNlLmZyYW1lU3RhdGVFdmVudC5hZGRFdmVudExpc3RlbmVyKChmcmFtZVN0YXRlKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGNoaWxkU2Vzc2lvblNlcnZpY2UubWFuYWdlci5pc0Nsb3NlZCkgcmV0dXJuO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGNvbnN0IGFnZ3JlZ2F0b3IgPSB0aGlzLl9hZ2dyZWdhdG9yO1xuICAgICAgICAgICAgICAgIGNvbnN0IGZsYWdzID0gdGhpcy5fbW92ZUZsYWdzO1xuXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLmlzUHJlc2VudGluZykge1xuICAgICAgICAgICAgICAgICAgICBhZ2dyZWdhdG9yICYmIGFnZ3JlZ2F0b3IucmVzZXQoKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIFNlcmlhbGl6ZWRTdWJ2aWV3TGlzdC5jbG9uZShmcmFtZVN0YXRlLnN1YnZpZXdzLCBzdWJ2aWV3cyk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgLy8gcHJvdmlkZSBmb3YgY29udHJvbHNcbiAgICAgICAgICAgICAgICBpZiAoIWNoaWxkRGV2aWNlU2VydmljZS5zdHJpY3QpIHsgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBkZWNvbXBvc2VQZXJzcGVjdGl2ZVByb2plY3Rpb25NYXRyaXgoc3Vidmlld3NbMF0ucHJvamVjdGlvbk1hdHJpeCwgZnJ1c3R1bSk7XG4gICAgICAgICAgICAgICAgICAgIGZydXN0dW0uZm92ID0gY2hpbGRWaWV3U2VydmljZS5zdWJ2aWV3c1swXSAmJiBjaGlsZFZpZXdTZXJ2aWNlLnN1YnZpZXdzWzBdLmZydXN0dW0uZm92IHx8IENlc2l1bU1hdGguUElfT1ZFUl9USFJFRTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoYWdncmVnYXRvciAmJiBhZ2dyZWdhdG9yLmlzTW92aW5nKENhbWVyYUV2ZW50VHlwZS5XSEVFTCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHdoZWVsTW92ZW1lbnQgPSBhZ2dyZWdhdG9yLmdldE1vdmVtZW50KENhbWVyYUV2ZW50VHlwZS5XSEVFTCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBkaWZmID0gd2hlZWxNb3ZlbWVudC5lbmRQb3NpdGlvbi55O1xuICAgICAgICAgICAgICAgICAgICAgICAgZnJ1c3R1bS5mb3YgPSBNYXRoLm1pbihNYXRoLm1heChmcnVzdHVtLmZvdiAtIGRpZmYgKiAwLjAyLCBNYXRoLlBJLzgpLCBNYXRoLlBJLU1hdGguUEkvOCk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZiAoYWdncmVnYXRvciAmJiBhZ2dyZWdhdG9yLmlzTW92aW5nKENhbWVyYUV2ZW50VHlwZS5QSU5DSCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHBpbmNoTW92ZW1lbnQ6UGluY2hNb3ZlbWVudCA9IGFnZ3JlZ2F0b3IuZ2V0TW92ZW1lbnQoQ2FtZXJhRXZlbnRUeXBlLlBJTkNIKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGRpZmYgPSBwaW5jaE1vdmVtZW50LmRpc3RhbmNlLmVuZFBvc2l0aW9uLnkgLSBwaW5jaE1vdmVtZW50LmRpc3RhbmNlLnN0YXJ0UG9zaXRpb24ueTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZydXN0dW0uZm92ID0gTWF0aC5taW4oTWF0aC5tYXgoZnJ1c3R1bS5mb3YgLSBkaWZmICogMC4wMiwgTWF0aC5QSS84KSwgTWF0aC5QSS1NYXRoLlBJLzgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBzdWJ2aWV3cy5mb3JFYWNoKChzKT0+eyAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBhc3BlY3QgPSBzLnZpZXdwb3J0LndpZHRoIC8gcy52aWV3cG9ydC5oZWlnaHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBmcnVzdHVtLmFzcGVjdFJhdGlvID0gaXNGaW5pdGUoYXNwZWN0KSA/IGFzcGVjdCA6IDE7XG4gICAgICAgICAgICAgICAgICAgICAgICBNYXRyaXg0LmNsb25lKGZydXN0dW0ucHJvamVjdGlvbk1hdHJpeCwgcy5wcm9qZWN0aW9uTWF0cml4KTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgY29uc3QgdGltZSA9IGZyYW1lU3RhdGUudGltZTtcblxuICAgICAgICAgICAgICAgIGRldmljZVVzZXJQb3NlLnVwZGF0ZSh0aW1lKTtcblxuICAgICAgICAgICAgICAgIGNvbnN0IG92ZXJyaWRlVXNlciA9ICEoZGV2aWNlVXNlclBvc2Uuc3RhdHVzICYgUG9zZVN0YXR1cy5LTk9XTik7XG4gICAgICAgICAgICAgICAgY29uc3QgdXNlclRyYWNraW5nID0gb3ZlcnJpZGVVc2VyID8gXG4gICAgICAgICAgICAgICAgICAgIChpc0lPUyB8fCBpc0FuZHJvaWQgPyAnM0RPRicgOiAnNkRPRicpIDogIC8vIHdlIG9ubHkgaGF2ZSBrZXlib2FyZCBvbiBkZXNrdG9wLCBzbyByZXBvcnQgM0RPRiBvbiBtb2JpbGVcbiAgICAgICAgICAgICAgICAgICAgY2hpbGREZXZpY2VTZXJ2aWNlLnVzZXJUcmFja2luZztcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAvLyBwcm92aWRlIGNvbnRyb2xzIGlmIHRoZSBkZXZpY2UgZG9lcyBub3QgaGF2ZSBhIHBoeXNpY2FsIHBvc2VcbiAgICAgICAgICAgICAgICBpZiAob3ZlcnJpZGVVc2VyKSB7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBjb25zdCBjb250ZXh0VXNlciA9IGNoaWxkQ29udGV4dFNlcnZpY2UudXNlcjtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY29udGV4dFN0YWdlID0gY2hpbGRDb250ZXh0U2VydmljZS5zdGFnZTtcblxuICAgICAgICAgICAgICAgICAgICBjb25zdCBwb3NpdGlvbiA9IFxuICAgICAgICAgICAgICAgICAgICAgICAgZ2V0RW50aXR5UG9zaXRpb25JblJlZmVyZW5jZUZyYW1lKGNvbnRleHRVc2VyLCB0aW1lLCBjb250ZXh0U3RhZ2UsIHBvc2l0aW9uU2NyYXRjaENhcnRlc2lhbikgfHwgXG4gICAgICAgICAgICAgICAgICAgICAgICBDYXJ0ZXNpYW4zLmZyb21FbGVtZW50cygwLCBjaGlsZERldmljZVNlcnZpY2UuZGlzcGxheU1vZGUgPT09ICdoYW5kJyA/IEFWRVJBR0VfRVlFX0hFSUdIVCAqIDAuNzUgOiBBVkVSQUdFX0VZRV9IRUlHSFQsIDAsIHBvc2l0aW9uU2NyYXRjaENhcnRlc2lhbik7XG5cbiAgICAgICAgICAgICAgICAgICAgbGV0IG9yaWVudGF0aW9uID0gZ2V0RW50aXR5T3JpZW50YXRpb25JblJlZmVyZW5jZUZyYW1lKGNvbnRleHRVc2VyLCB0aW1lLCBjb250ZXh0U3RhZ2UsIHNjcmF0Y2hRdWF0ZXJuaW9uKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgUXVhdGVybmlvbi5jbG9uZShRdWF0ZXJuaW9uLklERU5USVRZLCBzY3JhdGNoUXVhdGVybmlvbik7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBpZiAoYWdncmVnYXRvciAmJiBhZ2dyZWdhdG9yLmlzTW92aW5nKENhbWVyYUV2ZW50VHlwZS5MRUZUX0RSQUcpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBkcmFnTW92ZW1lbnQgPSBhZ2dyZWdhdG9yLmdldE1vdmVtZW50KENhbWVyYUV2ZW50VHlwZS5MRUZUX0RSQUcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9yaWVudGF0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgdmlld3BvcnQgPSBmcmFtZVN0YXRlLnZpZXdwb3J0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRpbmcgKz0gZnJ1c3R1bS5mb3YgKiAoZHJhZ01vdmVtZW50LmVuZFBvc2l0aW9uLnggLSBkcmFnTW92ZW1lbnQuc3RhcnRQb3NpdGlvbi54KSAvIHZpZXdwb3J0LndpZHRoO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBpdGNoICs9IGZydXN0dW0uZm92eSAqIChkcmFnTW92ZW1lbnQuZW5kUG9zaXRpb24ueSAtIGRyYWdNb3ZlbWVudC5zdGFydFBvc2l0aW9uLnkpIC8gdmlld3BvcnQuaGVpZ2h0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBpdGNoID0gTWF0aC5taW4oTWF0aC5tYXgoLUNlc2l1bU1hdGguUElfT1ZFUl9UV08sIHBpdGNoKSwgQ2VzaXVtTWF0aC5QSV9PVkVSX1RXTyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcGl0Y2hRdWF0ID0gUXVhdGVybmlvbi5mcm9tQXhpc0FuZ2xlKENhcnRlc2lhbjMuVU5JVF9YLCBwaXRjaCwgc2NyYXRjaFF1YXRlcm5pb25QaXRjaCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaGVhZGluZ1F1YXQgPSBRdWF0ZXJuaW9uLmZyb21BeGlzQW5nbGUoQ2FydGVzaWFuMy5VTklUX1ksIGhlYWRpbmcsIHNjcmF0Y2hRdWF0ZXJuaW9uSGVhZGluZyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgb3JpZW50YXRpb24gPSBRdWF0ZXJuaW9uLm11bHRpcGx5KGhlYWRpbmdRdWF0LCBwaXRjaFF1YXQsIHNjcmF0Y2hRdWF0ZXJuaW9uKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoPGFueT5jb250ZXh0VXNlci5vcmllbnRhdGlvbikuc2V0VmFsdWUob3JpZW50YXRpb24pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgTWF0cml4My5mcm9tUXVhdGVybmlvbihvcmllbnRhdGlvbiwgb3JpZW50YXRpb25NYXRyaXgpO1xuICAgICAgICAgICAgICAgICAgICBNYXRyaXgzLm11bHRpcGx5QnlWZWN0b3Iob3JpZW50YXRpb25NYXRyaXgsIENhcnRlc2lhbjMuVU5JVF9ZLCB1cCk7XG4gICAgICAgICAgICAgICAgICAgIE1hdHJpeDMubXVsdGlwbHlCeVZlY3RvcihvcmllbnRhdGlvbk1hdHJpeCwgQ2FydGVzaWFuMy5VTklUX1gsIHJpZ2h0KTtcbiAgICAgICAgICAgICAgICAgICAgTWF0cml4My5tdWx0aXBseUJ5VmVjdG9yKG9yaWVudGF0aW9uTWF0cml4LCBORUdBVElWRV9VTklUX1osIGZvcndhcmQpO1xuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1vdmVSYXRlID0gMC4wMjtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZsYWdzLm1vdmVGb3J3YXJkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBDYXJ0ZXNpYW4zLm11bHRpcGx5QnlTY2FsYXIoZm9yd2FyZCwgbW92ZVJhdGUsIG1vdmVtZW50U2NyYXRjaENhcnRlc2lhbik7XG4gICAgICAgICAgICAgICAgICAgICAgICBDYXJ0ZXNpYW4zLmFkZChwb3NpdGlvbiwgbW92ZW1lbnRTY3JhdGNoQ2FydGVzaWFuLCBwb3NpdGlvbik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGZsYWdzLm1vdmVCYWNrd2FyZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgQ2FydGVzaWFuMy5tdWx0aXBseUJ5U2NhbGFyKGZvcndhcmQsIC1tb3ZlUmF0ZSwgbW92ZW1lbnRTY3JhdGNoQ2FydGVzaWFuKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIENhcnRlc2lhbjMuYWRkKHBvc2l0aW9uLCBtb3ZlbWVudFNjcmF0Y2hDYXJ0ZXNpYW4sIHBvc2l0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoZmxhZ3MubW92ZVVwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBDYXJ0ZXNpYW4zLm11bHRpcGx5QnlTY2FsYXIodXAsIG1vdmVSYXRlLCBtb3ZlbWVudFNjcmF0Y2hDYXJ0ZXNpYW4pO1xuICAgICAgICAgICAgICAgICAgICAgICAgQ2FydGVzaWFuMy5hZGQocG9zaXRpb24sIG1vdmVtZW50U2NyYXRjaENhcnRlc2lhbiwgcG9zaXRpb24pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChmbGFncy5tb3ZlRG93bikge1xuICAgICAgICAgICAgICAgICAgICAgICAgQ2FydGVzaWFuMy5tdWx0aXBseUJ5U2NhbGFyKHVwLCAtbW92ZVJhdGUsIG1vdmVtZW50U2NyYXRjaENhcnRlc2lhbik7XG4gICAgICAgICAgICAgICAgICAgICAgICBDYXJ0ZXNpYW4zLmFkZChwb3NpdGlvbiwgbW92ZW1lbnRTY3JhdGNoQ2FydGVzaWFuLCBwb3NpdGlvbik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGZsYWdzLm1vdmVMZWZ0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBDYXJ0ZXNpYW4zLm11bHRpcGx5QnlTY2FsYXIocmlnaHQsIC1tb3ZlUmF0ZSwgbW92ZW1lbnRTY3JhdGNoQ2FydGVzaWFuKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIENhcnRlc2lhbjMuYWRkKHBvc2l0aW9uLCBtb3ZlbWVudFNjcmF0Y2hDYXJ0ZXNpYW4sIHBvc2l0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoZmxhZ3MubW92ZVJpZ2h0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBDYXJ0ZXNpYW4zLm11bHRpcGx5QnlTY2FsYXIocmlnaHQsIG1vdmVSYXRlLCBtb3ZlbWVudFNjcmF0Y2hDYXJ0ZXNpYW4pO1xuICAgICAgICAgICAgICAgICAgICAgICAgQ2FydGVzaWFuMy5hZGQocG9zaXRpb24sIG1vdmVtZW50U2NyYXRjaENhcnRlc2lhbiwgcG9zaXRpb24pO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgKGNvbnRleHRVc2VyLnBvc2l0aW9uIGFzIENvbnN0YW50UG9zaXRpb25Qcm9wZXJ0eSkuc2V0VmFsdWUocG9zaXRpb24sIGNvbnRleHRTdGFnZSk7XG4gICAgICAgICAgICAgICAgICAgIChjb250ZXh0VXNlci5vcmllbnRhdGlvbiBhcyBDb25zdGFudFByb3BlcnR5KS5zZXRWYWx1ZShvcmllbnRhdGlvbik7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgY29uc3Qgb3ZlcnJpZGVTdGFnZSA9IGN1c3RvbVN0YWdlUG9zaXRpb27CoCYmIGN1c3RvbVN0YWdlT3JpZW50YXRpb24gPyB0cnVlIDogZmFsc2U7XG5cbiAgICAgICAgICAgICAgICBpZiAob3ZlcnJpZGVTdGFnZSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBjb250ZXh0U3RhZ2UgPSBjaGlsZENvbnRleHRTZXJ2aWNlLnN0YWdlO1xuICAgICAgICAgICAgICAgICAgICAoY29udGV4dFN0YWdlLnBvc2l0aW9uIGFzIENvbnN0YW50UG9zaXRpb25Qcm9wZXJ0eSkuc2V0VmFsdWUoY3VzdG9tU3RhZ2VQb3NpdGlvbiwgUmVmZXJlbmNlRnJhbWUuRklYRUQpO1xuICAgICAgICAgICAgICAgICAgICAoY29udGV4dFN0YWdlLm9yaWVudGF0aW9uIGFzIENvbnN0YW50UHJvcGVydHkpLnNldFZhbHVlKGN1c3RvbVN0YWdlT3JpZW50YXRpb24pO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGNvbnN0IGNvbnRleHRGcmFtZVN0YXRlID0gY2hpbGRDb250ZXh0U2VydmljZS5jcmVhdGVGcmFtZVN0YXRlKFxuICAgICAgICAgICAgICAgICAgICB0aW1lLFxuICAgICAgICAgICAgICAgICAgICBmcmFtZVN0YXRlLnZpZXdwb3J0LFxuICAgICAgICAgICAgICAgICAgICBzdWJ2aWV3cyxcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgb3ZlcnJpZGVVc2VyLFxuICAgICAgICAgICAgICAgICAgICAgICAgb3ZlcnJpZGVTdGFnZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHVzZXJUcmFja2luZyxcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgY2hpbGRDb250ZXh0U2VydmljZS5zdWJtaXRGcmFtZVN0YXRlKGNvbnRleHRGcmFtZVN0YXRlKTtcblxuICAgICAgICAgICAgICAgIGFnZ3JlZ2F0b3IgJiYgYWdncmVnYXRvci5yZXNldCgpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGNoaWxkU2Vzc2lvblNlcnZpY2UubWFuYWdlci5jbG9zZUV2ZW50LmFkZEV2ZW50TGlzdGVuZXIoKCk9PntcbiAgICAgICAgICAgICAgICByZW1vdmUxKCk7XG4gICAgICAgICAgICAgICAgcmVtb3ZlMigpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgfSlcblxuXG4gICAgICAgIGNoaWxkU2Vzc2lvblNlcnZpY2UuY29ubmVjdCgpO1xuICAgIH1cbn1cbiJdfQ==