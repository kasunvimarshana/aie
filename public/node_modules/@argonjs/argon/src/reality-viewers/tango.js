var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { inject, Container } from 'aurelia-dependency-injection';
import { ConstantPositionProperty, ConstantProperty, ReferenceFrame, Cartesian3, Quaternion, Matrix3, Matrix4, 
// CesiumMath
Entity } from '../cesium/cesium-imports';
import { Configuration, Role, SerializedSubviewList } from '../common';
import { SessionService, ConnectService, SessionConnectService } from '../session';
import { eastUpSouthToFixedFrame, getEntityPosition, getEntityOrientation } from '../utils';
import { EntityService } from '../entity';
import { ContextService } from '../context';
import { DeviceService } from '../device';
import { ViewService } from '../view';
// import { PoseStatus } from '../entity'
import { RealityViewer } from './base';
import { RealityService } from '../reality';
import { VisibilityService } from '../visibility';
var TangoRealityViewer = (function (_super) {
    __extends(TangoRealityViewer, _super);
    function TangoRealityViewer(sessionService, viewService, contextService, container, deviceService, uri, vrDisplay) {
        var _this = _super.call(this, uri) || this;
        _this.sessionService = sessionService;
        _this.viewService = viewService;
        _this.contextService = contextService;
        _this.container = container;
        _this.deviceService = deviceService;
        _this.uri = uri;
        _this.vrDisplay = vrDisplay;
        _this.type = 'tango';
        _this.userTracking = '6DOF';
        _this._pointsToSkip = 0;
        _this._frameData = new VRFrameData();
        _this._renderPointCloud = false;
        _this._usePointCloudForOcclusion = false;
        _this._initFinished = false;
        _this._sharedCanvasFinal = false;
        _this._vrDisplay = undefined;
        _this._lastGeoHorizontalAccuracy = 999;
        _this._lastGeoHeadingAccuracy = 999;
        _this._tangoOriginLost = true;
        _this._scratchMatrix3 = new Matrix3;
        _this._scratchMatrix4 = new Matrix4;
        _this._scratchCartesian = new Cartesian3;
        _this._scratchQuaternion = new Quaternion;
        _this.points_vertexShader = "attribute vec3 position;\nuniform float size;\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform vec4 plane;\nuniform float distance;\nuniform float cameraNear;\nuniform float cameraFar;\nvarying float v_discard;\nvarying vec3 color;\nvoid main(void) {\n    vec4 v4Position = vec4(position, 1.0);\n    float d = dot(plane, v4Position);\n    v_discard = 0.0;\n    if (abs(d) < distance) v_discard = 1.0;\n    gl_PointSize = size;\n    gl_Position = projectionMatrix * modelViewMatrix * v4Position;\n    float depth = 1.0 - ((gl_Position.z - cameraNear) / (cameraFar - cameraNear));\n    color = vec3(depth);\n}";
        _this.points_fragmentShader = "precision mediump float;\nvarying vec3 color;\nuniform float opacity;\nvarying float v_discard;\nvoid main(void) {\n    if (v_discard > 0.0) discard;\n    gl_FragColor = vec4( color, opacity );\n}";
        _this.viewService.viewportChangeEvent.addEventListener(function (viewport) {
            _this.updateViewport(viewport);
        });
        return _this;
    }
    TangoRealityViewer.prototype.load = function () {
        var _this = this;
        // Create a child container so that we can conveniently setup all the services
        // that would exist in a normal hosted reality viewer 
        var child = this.container.createChild();
        // Create the session instance that will be used by the managerÂ to talk to the reality 
        var session = this.sessionService.addManagedSessionPort(this.uri);
        session.connectEvent.addEventListener(function () {
            _this.connectEvent.raiseEvent(session); // let the manager know the session is ready
        });
        // use a SessionConnectService to create a connection via the session instance we created
        child.registerInstance(ConnectService, new SessionConnectService(session, this.sessionService.configuration));
        // setup the configuration for our tango reality
        child.registerInstance(Configuration, {
            role: Role.REALITY_VIEWER,
            uri: this.uri,
            title: 'Tango',
            version: this.sessionService.configuration.version,
            supportsCustomProtocols: true,
            protocols: ['ar.configureStage@v1', 'ar.tango'],
            sharedCanvas: true
        });
        // Create the basic services that we need to use. 
        child.autoRegisterAll([SessionService, EntityService, VisibilityService, ContextService, DeviceService, RealityService]);
        var childContextService = child.get(ContextService);
        var childDeviceService = child.get(DeviceService);
        var childSessionService = child.get(SessionService);
        var childRealityService = child.get(RealityService);
        // const childEntityService = child.get(EntityService) as EntityService;
        // const childViewService = child.get(ViewService) as ViewService;
        var tangoOrigin = new Entity({
            id: 'tango',
            position: new ConstantPositionProperty(undefined, childContextService.stage),
            orientation: new ConstantProperty(Quaternion.IDENTITY)
        });
        // the child device service should *not* submit frames to the vrdisplay. 
        childDeviceService.autoSubmitFrame = false;
        var customStagePosition;
        var customStageOrientation;
        // Create protocol handlers for `ar.configureStage` protocol
        childRealityService.connectEvent.addEventListener(function (session) {
            session.on['ar.configureStage.setStageGeolocation'] = function (_a) {
                var geolocation = _a.geolocation;
                customStagePosition = Cartesian3.fromRadians(geolocation.longitude, geolocation.latitude, geolocation.height, undefined, customStagePosition);
                var transformMatrix = eastUpSouthToFixedFrame(customStagePosition, undefined, _this._scratchMatrix4);
                var rotationMatrix = Matrix4.getRotation(transformMatrix, _this._scratchMatrix3);
                customStageOrientation = Quaternion.fromRotationMatrix(rotationMatrix, customStageOrientation);
            };
            session.on['ar.configureStage.resetStageGeolocation'] = function () {
                customStagePosition = undefined;
                customStageOrientation = undefined;
            };
            session.on['ar.tango.togglePointCloud'] = function () {
                _this._renderPointCloud = !_this._renderPointCloud;
                // if (this._renderPointCloud) this._scene.add(this._points); else this._scene.remove(this._points);
                return Promise.resolve({ result: _this._renderPointCloud });
            };
            session.on['ar.tango.getPickingPointAndPlaneInPointCloud'] = function (_a) {
                var x = _a.x, y = _a.y;
                if (_this._vrDisplay) {
                    // console.log("Get p&p on"+x +"," + y)
                    var pointAndPlane = _this._vrDisplay.getPickingPointAndPlaneInPointCloud(x, y);
                    if (pointAndPlane) {
                        return Promise.resolve({ point: pointAndPlane.point, plane: pointAndPlane.plane });
                    }
                    else {
                        return Promise.reject(new Error("Tango reality could not find a point and plane"));
                    }
                }
                else {
                    return Promise.reject(new Error("vrDisplay not configured yet"));
                }
            };
            session.on['ar.tango.toggleOcclusion'] = function () {
                _this._usePointCloudForOcclusion = !_this._usePointCloudForOcclusion;
                // if (this._usePointCloudForOcclusion) this._scene.add(this._points); else this._scene.remove(this._points);
                return Promise.resolve({ result: _this._usePointCloudForOcclusion });
            };
            // TODO: handle marker tracking for Tango
            session.on['ar.tango.addMarker'] = function (msg) {
                return new Promise(function (resolve, reject) {
                    // this._arController.loadMarker(msg.url, (markerId) => {
                    //     // TODO: handle size of markers
                    //     var id = this._getIdForMarker(markerId);
                    //     var entity = new Entity({id});
                    //     this.contextService.entities.add(entity);
                    //     this._markerEntities.set(id, entity);
                    //     resolve({id: id});
                    // }, (error) => {
                    //     console.log(error);
                    //     reject(error);
                    // });
                    console.log(_this.contextService); //dummy
                });
            };
        });
        // Setup everything after connected to the manager. The manager only connects once.
        childSessionService.manager.connectEvent.addEventListener(function () {
            // since we aren't create a child view service and viewport service, 
            // suppress any errors from not handling these messages
            childSessionService.manager.suppressErrorOnUnknownTopic = true;
            var subviews = [];
            var checkSuggestedGeolocationSubscription = function () {
                if (childDeviceService.suggestedGeolocationSubscription) {
                    childDeviceService.subscribeGeolocation(childDeviceService.suggestedGeolocationSubscription);
                }
                else {
                    childDeviceService.unsubscribeGeolocation();
                }
            };
            checkSuggestedGeolocationSubscription();
            var remove1 = childDeviceService.suggestedGeolocationSubscriptionChangeEvent.addEventListener(checkSuggestedGeolocationSubscription);
            var remove2 = childDeviceService.frameStateEvent.addEventListener(function (frameState) {
                if (childSessionService.manager.isClosed)
                    return;
                SerializedSubviewList.clone(frameState.subviews, subviews);
                var time = frameState.time;
                // override user pos to tango pos
                // Was originally used to provide control over userpose if the device does not have a physical pose
                var overrideUser = true; //!(deviceUserPose.status & PoseStatus.KNOWN);
                var contextUser = childContextService.user;
                var contextStage = childContextService.stage;
                var tangoUserPosition;
                var tangoUserOrientation;
                // Override user
                _this._vrDisplay['getFrameData'](_this._frameData);
                var tangoPos = _this._frameData.pose.position;
                tangoUserPosition = new Cartesian3(tangoPos[0], tangoPos[1], tangoPos[2]);
                // Check if tango tracking is lost
                _this._tangoOriginLostPreviousFrame = _this._tangoOriginLost;
                _this._tangoOriginLost = tangoUserPosition.equals(Cartesian3.ZERO) || tangoUserPosition.x === NaN;
                // If tango tracking is lost, set userPosition to undefined -> results in user pose status LOST
                if (_this._tangoOriginLost) {
                    tangoUserPosition = undefined;
                    tangoUserOrientation = undefined;
                }
                else {
                    var tangoRot = _this._frameData.pose.orientation;
                    tangoUserOrientation = new Quaternion(tangoRot[0], tangoRot[1], tangoRot[2], tangoRot[3]);
                }
                contextUser.position.setValue(tangoUserPosition, tangoOrigin);
                contextUser.orientation.setValue(tangoUserOrientation);
                // Update stage geopose when GPS accuracy improves or Tango origin is repositioned
                var currentGeoHorizontalAccuracy = _this.deviceService.geoHorizontalAccuracy || 999;
                var currentGeoHeadingAccuracy = _this.deviceService.geoHeadingAccuracy || 999;
                var gpsAccuracyHasImproved = _this._lastGeoHorizontalAccuracy > currentGeoHorizontalAccuracy;
                var compassAccuracyHasImproved = _this._lastGeoHeadingAccuracy > currentGeoHeadingAccuracy;
                var tangoOriginRepositioned = _this._tangoOriginLostPreviousFrame && !_this._tangoOriginLost;
                var tangoOriginNeedsUpdate = gpsAccuracyHasImproved || tangoOriginRepositioned || compassAccuracyHasImproved;
                var overrideStage = true;
                if (tangoUserPosition && tangoUserOrientation && tangoOriginNeedsUpdate) {
                    if (tangoOriginRepositioned) {
                        console.log("Tango origin has been reset.");
                        _this._lastGeoHeadingAccuracy = _this._lastGeoHorizontalAccuracy = 999;
                        _this._tangoOriginLost = false;
                    }
                    else if (gpsAccuracyHasImproved) {
                        console.log("Current horizontal accuracy has been inproved to:" + _this.deviceService.geoHorizontalAccuracy);
                        _this._lastGeoHorizontalAccuracy = currentGeoHorizontalAccuracy;
                    }
                    else if (compassAccuracyHasImproved) {
                        console.log("Current heading accuracy has been inproved to:" + _this.deviceService.geoHeadingAccuracy);
                        _this._lastGeoHeadingAccuracy = currentGeoHeadingAccuracy;
                    }
                    // Get tango origin relative to context user.
                    // First two lines should be removed after bugfix of not being able to get transform of an entity with an undefined position|orientation relative to one of it's children
                    tangoOrigin.position.setValue(Cartesian3.ZERO, ReferenceFrame.FIXED);
                    tangoOrigin.orientation.setValue(Quaternion.IDENTITY);
                    var tangoOriginPosition = getEntityPosition(tangoOrigin, time, contextUser, _this._scratchCartesian);
                    var tangoOriginOrientation = getEntityOrientation(tangoOrigin, time, contextUser, _this._scratchQuaternion);
                    // Set tango origin relative to device user (which has geopose)
                    tangoOrigin.position.setValue(tangoOriginPosition, _this.deviceService.user);
                    tangoOrigin.orientation.setValue(tangoOriginOrientation);
                    // Redefine tango origin relative to fixed
                    var tangoOriginPositionFixed = getEntityPosition(tangoOrigin, time, ReferenceFrame.FIXED, _this._scratchCartesian);
                    var tangoOriginOrientationFixed = getEntityOrientation(tangoOrigin, time, ReferenceFrame.FIXED, _this._scratchQuaternion);
                    tangoOrigin.position.setValue(tangoOriginPositionFixed, ReferenceFrame.FIXED);
                    tangoOrigin.orientation.setValue(tangoOriginOrientationFixed);
                    // convertEntityReferenceFrame(tangoOrigin, time, ReferenceFrame.FIXED);
                }
                // Set stage at floor of tango origin using user height assumption
                contextStage.position.setValue(Cartesian3.fromElements(0, -_this.deviceService.suggestedUserHeight, 0, _this._scratchCartesian), tangoOrigin);
                contextStage.orientation.setValue(Quaternion.IDENTITY);
                if (_this._initFinished && _this._vrDisplay) {
                    //update cameraPersp
                    var pose = _this._frameData.pose;
                    if (pose.orientation) {
                        _this._cameraPersp.quaternion.fromArray(pose.orientation);
                    }
                    if (pose.position) {
                        _this._cameraPersp.position.fromArray(pose.position);
                    }
                    else {
                        _this._cameraPersp.position.set(0, 0, 0);
                    }
                    _this._pointCloud.update(_this._renderPointCloud || _this._usePointCloudForOcclusion, _this._pointsToSkip, true);
                    // Make sure that the camera is correctly displayed depending on the
                    // device and camera orientations.
                    THREE.WebAR.updateCameraMeshOrientation(_this._vrDisplay, _this._cameraMesh);
                    // RENDER
                    _this._renderer.resetGLState();
                    _this._renderer.autoClear = false;
                    _this._renderer.clear();
                    _this._renderer.render(_this._cameraScene, _this._cameraOrtho);
                    _this._renderer.clearDepth();
                    if (!_this._renderPointCloud && _this._usePointCloudForOcclusion)
                        _this._renderer.context.colorMask(false, false, false, false);
                    if (_this._renderPointCloud || _this._usePointCloudForOcclusion) {
                        _this._renderer.render(_this._scene, _this._cameraPersp);
                        _this._renderer.context.colorMask(true, true, true, true);
                    }
                }
                var contextFrameState = childContextService.createFrameState(time, frameState.viewport, subviews, {
                    overrideUser: overrideUser,
                    overrideStage: overrideStage,
                    userTracking: _this.userTracking
                });
                childContextService.submitFrameState(contextFrameState);
            });
            childSessionService.manager.closeEvent.addEventListener(function () {
                remove1();
                remove2();
            });
        });
        // Check if the browser supports Tango    
        var remove = childDeviceService.vrDisplaysUpdatedEvent.addEventListener(function () {
            var vrDisplays = childDeviceService.vrDisplays;
            if (vrDisplays && vrDisplays.length > 0) {
                for (var i = 0; !_this._vrDisplay && i < vrDisplays.length; i++) {
                    _this._vrDisplay = vrDisplays[i];
                    if (_this._vrDisplay.displayName !== "Tango VR Device") {
                        _this._vrDisplay = undefined;
                    }
                }
            }
            if (!_this._vrDisplay) {
                console.error("This browser does not support Tango.");
                return;
            }
            else {
                remove();
                _this.initTango();
            }
        });
        childSessionService.connect();
    };
    TangoRealityViewer.prototype.initTango = function () {
        var _this = this;
        this.loadScripts().then(function () {
            _this.initCameraAndPointcloud();
            _this.initViewportAndCanvas();
            // alert("scripts loaded");
            _this._initFinished = true;
        });
    };
    TangoRealityViewer.prototype.loadScripts = function () {
        return new Promise(function (resolve, reject) {
            // for now we're dynamically loading these scripts
            var script = document.createElement('script');
            script.src = 'https://bionictk.github.io/website/resources/three.js';
            script.onload = function () {
                console.log("*** custom three.js loaded ***");
                var script2 = document.createElement('script');
                script2.src = 'https://bionictk.github.io/website/resources/THREE.WebAR.js';
                script2.onload = function () {
                    console.log("*** THREE.WebAR.js loaded ***");
                    resolve();
                };
                document.head.appendChild(script2);
            };
            document.head.appendChild(script);
        });
    };
    TangoRealityViewer.prototype.initCameraAndPointcloud = function () {
        this._scene = new THREE.Scene();
        this._cameraScene = new THREE.Scene();
        // Use an orthographic camera to render the video quad
        this._cameraOrtho = new THREE.OrthographicCamera(-1, 1, 1, -1, 0, 100);
        // Use the THREE.WebAR helper function to create a quad mesh for the
        // camera with the right geometry and material.
        this._cameraMesh = THREE.WebAR.createVRSeeThroughCameraMesh(this._vrDisplay);
        this._cameraScene.add(this._cameraMesh);
        this._cameraPersp = THREE.WebAR.createVRSeeThroughCamera(this._vrDisplay, 0.1, 100);
        var pointsMaterial = new THREE.RawShaderMaterial({
            uniforms: {
                size: { value: 30 },
                opacity: { value: 0.1 },
                // color: { value: new THREE.Color(0xffffff) },
                plane: { value: new THREE.Vector4() },
                distance: { value: 0.05 },
                cameraNear: { value: this._cameraPersp.near },
                cameraFar: { value: 3 }
            },
            vertexShader: this.points_vertexShader,
            fragmentShader: this.points_fragmentShader
        });
        // new THREE.PointsMaterial(
        //     { size: 0.01, vertexColors: THREE.VertexColors });
        // pointsMaterial.depthWrite = false;
        this._pointCloud = new THREE.WebAR.VRPointCloud(this._vrDisplay, true);
        this._points = new THREE.Points(this._pointCloud.getBufferGeometry(), pointsMaterial);
        // Points are changing all the time so calculating the frustum culling
        // volume is not very convenient.
        this._points.frustumCulled = false;
        // this._points.renderDepth = 0;
        this._scene.add(this._points);
    };
    TangoRealityViewer.prototype.initViewportAndCanvas = function () {
        this.updateViewport(this.viewService.viewport);
        var argonCanvas;
        if (this.viewService.layers) {
            for (var _i = 0, _a = this.viewService.layers; _i < _a.length; _i++) {
                var layer = _a[_i];
                if (layer.source instanceof HTMLCanvasElement) {
                    argonCanvas = layer.source;
                }
            }
        }
        if (this.isSharedCanvas && !argonCanvas) {
            console.log("sharedCanvas is true but no canvas registered with setLayers");
            //this._sharedCanvas = false; // currently the RealityServiceProvider overwrites this each frame
        }
        if (this.isSharedCanvas && argonCanvas) {
            // found an existing canvas, use it
            console.log("Found argon canvas, video background is sharing its context");
            this._renderer = new THREE.WebGLRenderer({ canvas: argonCanvas, antialias: false, alpha: true, logarithmicDepthBuffer: false });
            this._sharedCanvasFinal = true;
        }
        else {
            // no canvas, create a new one
            console.log("No argon shared canvas, creating one for video background");
            var renderer = new THREE.WebGLRenderer({ antialias: false });
            renderer.setSize(this.viewService.renderWidth, this.viewService.renderHeight, true);
            this.viewService.element.insertBefore(renderer.domElement, this.viewService.element.firstChild);
            renderer.domElement.style.zIndex = '0';
            this._renderer = renderer;
            this._sharedCanvasFinal = false;
        }
    };
    TangoRealityViewer.prototype.updateViewport = function (viewport) {
        if (!this._sharedCanvasFinal && this._renderer) {
            THREE.WebAR.resizeVRSeeThroughCamera(this._vrDisplay, this._cameraPersp);
            this._renderer.setSize(this.viewService.renderWidth, this.viewService.renderHeight, true);
        }
    };
    TangoRealityViewer = __decorate([
        inject(SessionService, ViewService, ContextService, Container, DeviceService),
        __metadata("design:paramtypes", [SessionService,
            ViewService,
            ContextService,
            Container,
            DeviceService, String, Object])
    ], TangoRealityViewer);
    return TangoRealityViewer;
}(RealityViewer));
export { TangoRealityViewer };
//# sourceMappingURL=data:application/json;base64,