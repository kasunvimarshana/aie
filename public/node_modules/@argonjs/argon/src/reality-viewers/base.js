import { Event } from '../utils';
/**
 * Abstract class for a RealityViewer
 */
var RealityViewer = (function () {
    function RealityViewer(uri) {
        var _this = this;
        this.uri = uri;
        this.providedReferenceFrames = [];
        this.connectEvent = new Event();
        this.presentChangeEvent = new Event();
        this._isPresenting = false;
        this.connectEvent.addEventListener(function (session) {
            if (_this._session)
                _this._session.close();
            _this._session = session;
            session.closeEvent.addEventListener(function () {
                if (_this._session === session)
                    _this._session = undefined;
            });
        });
    }
    Object.defineProperty(RealityViewer.prototype, "isPresenting", {
        get: function () {
            return this._isPresenting;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RealityViewer.prototype, "session", {
        get: function () {
            return this._session;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RealityViewer.prototype, "isSharedCanvas", {
        get: function () {
            return this._sharedCanvas;
        },
        enumerable: true,
        configurable: true
    });
    RealityViewer.prototype.destroy = function () {
        this.setPresenting(false);
        if (this.session) {
            this.session.close();
        }
    };
    ;
    RealityViewer.prototype.setPresenting = function (flag) {
        if (this._isPresenting !== flag) {
            this._isPresenting = flag;
            this.presentChangeEvent.raiseEvent(undefined);
        }
    };
    RealityViewer.getType = function (uri) {
        if (uri === undefined)
            return undefined;
        if (uri.split(':')[0] === 'reality') {
            return uri;
        }
        return 'hosted';
    };
    RealityViewer.DEFAULT = 'reality:default';
    RealityViewer.EMPTY = 'reality:empty';
    RealityViewer.LIVE = 'reality:live';
    RealityViewer.WEBRTC = 'reality:webrtc';
    RealityViewer.TANGO = 'reality:tango';
    return RealityViewer;
}());
export { RealityViewer };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImJhc2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFDLEtBQUssRUFBQyxNQUFNLFVBQVUsQ0FBQTtBQUU5Qjs7R0FFRztBQUNIO0lBc0JJLHVCQUNXLEdBQVU7UUFEckIsaUJBVUM7UUFUVSxRQUFHLEdBQUgsR0FBRyxDQUFPO1FBckJkLDRCQUF1QixHQUFnQyxFQUFFLENBQUM7UUFFMUQsaUJBQVksR0FBRyxJQUFJLEtBQUssRUFBZSxDQUFDO1FBQ3hDLHVCQUFrQixHQUFHLElBQUksS0FBSyxFQUFRLENBQUM7UUFFdEMsa0JBQWEsR0FBRyxLQUFLLENBQUM7UUFrQjFCLElBQUksQ0FBQyxZQUFZLENBQUMsZ0JBQWdCLENBQUMsVUFBQyxPQUFPO1lBQ3ZDLEVBQUUsQ0FBQyxDQUFDLEtBQUksQ0FBQyxRQUFRLENBQUM7Z0JBQUMsS0FBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsQ0FBQztZQUN6QyxLQUFJLENBQUMsUUFBUSxHQUFHLE9BQU8sQ0FBQztZQUN4QixPQUFPLENBQUMsVUFBVSxDQUFDLGdCQUFnQixDQUFDO2dCQUNoQyxFQUFFLENBQUMsQ0FBQyxLQUFJLENBQUMsUUFBUSxLQUFLLE9BQU8sQ0FBQztvQkFBQyxLQUFJLENBQUMsUUFBUSxHQUFHLFNBQVMsQ0FBQztZQUM3RCxDQUFDLENBQUMsQ0FBQztRQUNQLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQXhCRCxzQkFBVyx1Q0FBWTthQUF2QjtZQUNJLE1BQU0sQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDO1FBQzlCLENBQUM7OztPQUFBO0lBR0Qsc0JBQVcsa0NBQU87YUFBbEI7WUFDSSxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQztRQUN6QixDQUFDOzs7T0FBQTtJQUdELHNCQUFXLHlDQUFjO2FBQXpCO1lBQ0ksTUFBTSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUE7UUFDN0IsQ0FBQzs7O09BQUE7SUFjTSwrQkFBTyxHQUFkO1FBQ0ksSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUMxQixFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztZQUNmLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDekIsQ0FBQztJQUNMLENBQUM7SUFBQSxDQUFDO0lBRUsscUNBQWEsR0FBcEIsVUFBcUIsSUFBWTtRQUM3QixFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsYUFBYSxLQUFLLElBQUksQ0FBQyxDQUFDLENBQUM7WUFDOUIsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUM7WUFDMUIsSUFBSSxDQUFDLGtCQUFrQixDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUNsRCxDQUFDO0lBQ0wsQ0FBQztJQVVNLHFCQUFPLEdBQWQsVUFBZSxHQUFZO1FBQ3ZCLEVBQUUsQ0FBQyxDQUFDLEdBQUcsS0FBSyxTQUFTLENBQUM7WUFBQyxNQUFNLENBQUMsU0FBUyxDQUFDO1FBQ3hDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQztZQUNsQyxNQUFNLENBQUMsR0FBRyxDQUFDO1FBQ2YsQ0FBQztRQUNELE1BQU0sQ0FBQyxRQUFRLENBQUM7SUFDcEIsQ0FBQztJQVpNLHFCQUFPLEdBQUcsaUJBQWlCLENBQUM7SUFDNUIsbUJBQUssR0FBRyxlQUFlLENBQUM7SUFDeEIsa0JBQUksR0FBRyxjQUFjLENBQUM7SUFDdEIsb0JBQU0sR0FBRyxnQkFBZ0IsQ0FBQztJQUMxQixtQkFBSyxHQUFHLGVBQWUsQ0FBQztJQVNuQyxvQkFBQztDQUFBLEFBL0RELElBK0RDO1NBL0RxQixhQUFhIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtSZWZlcmVuY2VGcmFtZX0gZnJvbSAnLi4vY2VzaXVtL2Nlc2l1bS1pbXBvcnRzJ1xuaW1wb3J0IHtTZXNzaW9uUG9ydH0gZnJvbSAnLi4vc2Vzc2lvbidcbmltcG9ydCB7RXZlbnR9IGZyb20gJy4uL3V0aWxzJ1xuXG4vKipcbiAqIEFic3RyYWN0IGNsYXNzIGZvciBhIFJlYWxpdHlWaWV3ZXJcbiAqL1xuZXhwb3J0IGFic3RyYWN0IGNsYXNzIFJlYWxpdHlWaWV3ZXIge1xuXG4gICAgcHVibGljIHByb3ZpZGVkUmVmZXJlbmNlRnJhbWVzOkFycmF5PFJlZmVyZW5jZUZyYW1lfHN0cmluZz4gPSBbXTtcblxuICAgIHB1YmxpYyBjb25uZWN0RXZlbnQgPSBuZXcgRXZlbnQ8U2Vzc2lvblBvcnQ+KCk7XG4gICAgcHVibGljIHByZXNlbnRDaGFuZ2VFdmVudCA9IG5ldyBFdmVudDx2b2lkPigpO1xuXG4gICAgcHJpdmF0ZSBfaXNQcmVzZW50aW5nID0gZmFsc2U7XG4gICAgcHVibGljIGdldCBpc1ByZXNlbnRpbmcoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pc1ByZXNlbnRpbmc7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBfc2Vzc2lvbj86U2Vzc2lvblBvcnQ7XG4gICAgcHVibGljIGdldCBzZXNzaW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fc2Vzc2lvbjtcbiAgICB9XG5cbiAgICBwdWJsaWMgX3NoYXJlZENhbnZhczogYm9vbGVhbjtcbiAgICBwdWJsaWMgZ2V0IGlzU2hhcmVkQ2FudmFzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fc2hhcmVkQ2FudmFzXG4gICAgfVxuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHB1YmxpYyB1cmk6c3RyaW5nXG4gICAgKXtcbiAgICAgICAgdGhpcy5jb25uZWN0RXZlbnQuYWRkRXZlbnRMaXN0ZW5lcigoc2Vzc2lvbik9PntcbiAgICAgICAgICAgIGlmICh0aGlzLl9zZXNzaW9uKSB0aGlzLl9zZXNzaW9uLmNsb3NlKCk7XG4gICAgICAgICAgICB0aGlzLl9zZXNzaW9uID0gc2Vzc2lvbjtcbiAgICAgICAgICAgIHNlc3Npb24uY2xvc2VFdmVudC5hZGRFdmVudExpc3RlbmVyKCgpPT57XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX3Nlc3Npb24gPT09IHNlc3Npb24pIHRoaXMuX3Nlc3Npb24gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHVibGljIGRlc3Ryb3koKSB7XG4gICAgICAgIHRoaXMuc2V0UHJlc2VudGluZyhmYWxzZSk7XG4gICAgICAgIGlmICh0aGlzLnNlc3Npb24pIHtcbiAgICAgICAgICAgIHRoaXMuc2Vzc2lvbi5jbG9zZSgpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIHB1YmxpYyBzZXRQcmVzZW50aW5nKGZsYWc6Ym9vbGVhbikge1xuICAgICAgICBpZiAodGhpcy5faXNQcmVzZW50aW5nICE9PSBmbGFnKSB7XG4gICAgICAgICAgICB0aGlzLl9pc1ByZXNlbnRpbmcgPSBmbGFnO1xuICAgICAgICAgICAgdGhpcy5wcmVzZW50Q2hhbmdlRXZlbnQucmFpc2VFdmVudCh1bmRlZmluZWQpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIGFic3RyYWN0IGxvYWQoKTtcbiAgICBcbiAgICBzdGF0aWMgREVGQVVMVCA9ICdyZWFsaXR5OmRlZmF1bHQnO1xuICAgIHN0YXRpYyBFTVBUWSA9ICdyZWFsaXR5OmVtcHR5JztcbiAgICBzdGF0aWMgTElWRSA9ICdyZWFsaXR5OmxpdmUnO1xuICAgIHN0YXRpYyBXRUJSVEMgPSAncmVhbGl0eTp3ZWJydGMnO1xuICAgIHN0YXRpYyBUQU5HTyA9ICdyZWFsaXR5OnRhbmdvJztcbiAgICBcbiAgICBzdGF0aWMgZ2V0VHlwZSh1cmk/OiBzdHJpbmcpIHtcbiAgICAgICAgaWYgKHVyaSA9PT0gdW5kZWZpbmVkKSByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICBpZiAodXJpLnNwbGl0KCc6JylbMF0gPT09ICdyZWFsaXR5Jykge1xuICAgICAgICAgICAgcmV0dXJuIHVyaTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gJ2hvc3RlZCc7XG4gICAgfVxufSJdfQ==