var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { inject } from 'aurelia-dependency-injection';
import { createGuid } from '../cesium/cesium-imports';
import { SessionService } from '../session';
import { ViewService } from '../view';
import { RealityViewer } from './base';
var HostedRealityViewer = (function (_super) {
    __extends(HostedRealityViewer, _super);
    function HostedRealityViewer(sessionService, viewService, uri) {
        var _this = _super.call(this, uri) || this;
        _this.sessionService = sessionService;
        _this.viewService = viewService;
        _this.uri = uri;
        _this.type = 'hosted';
        if (typeof document !== 'undefined' && document.createElement) {
            var iframeElement = _this.iframeElement = document.createElement('iframe');
            iframeElement.name = createGuid();
            iframeElement.style.border = '0';
            iframeElement.width = '100%';
            iframeElement.height = '100%';
            iframeElement.style.position = 'absolute';
            iframeElement.style.opacity = '0';
            iframeElement.style.pointerEvents = 'none';
            var viewElement = _this.viewService.element;
            viewElement.insertBefore(iframeElement, viewElement.firstChild);
            _this.presentChangeEvent.addEventListener(function () {
                _this.iframeElement.style.opacity = _this.isPresenting ? '1' : '0';
            });
        }
        return _this;
    }
    HostedRealityViewer.prototype.destroy = function () {
        _super.prototype.destroy.call(this);
        if (this.iframeElement) {
            this.iframeElement.remove();
        }
    };
    HostedRealityViewer.prototype.load = function () {
        var _this = this;
        if (typeof document !== 'undefined' && document.createElement) {
            var session_1 = this.sessionService.addManagedSessionPort(this.uri);
            session_1.connectEvent.addEventListener(function () {
                if (_this.sessionService.manager.isClosed)
                    return;
                _this.connectEvent.raiseEvent(session_1);
            });
            var handleConnectMessage_1 = function (ev) {
                if (ev.data.type !== 'ARGON_SESSION')
                    return;
                var name = ev.data.name;
                var messagePort = ev.ports && ev.ports[0];
                if (!messagePort)
                    throw new Error('Received an ARGON_SESSION message without a MessagePort object');
                if (name !== _this.iframeElement.name)
                    return;
                window.removeEventListener('message', handleConnectMessage_1);
                session_1.open(messagePort, _this.sessionService.configuration);
            };
            window.addEventListener('message', handleConnectMessage_1);
            this.iframeElement.src = '';
            this.iframeElement.src = this.uri;
        }
    };
    HostedRealityViewer = __decorate([
        inject(SessionService, ViewService),
        __metadata("design:paramtypes", [SessionService,
            ViewService, String])
    ], HostedRealityViewer);
    return HostedRealityViewer;
}(RealityViewer));
export { HostedRealityViewer };
// @singleton()
// @inject(SessionFactory)
// export class DOMSessionListenerService {
// 	public sessionEvent = new Event<Session>();
// 	constructor(sessionFactory:SessionFactory) {
// 		window.addEventListener('message', ev => {
// 			if (ev.data.type != 'ARGON_SESSION') return;
// 			const messagePort:MessagePortLike = ev.ports && ev.ports[0];
// 			if (!messagePort) 
// 				throw new Error('Received an ARGON_SESSION message without a MessagePort object');
// 			// get the event.source iframe
// 			let i = 0;
// 			let frame:HTMLIFrameElement = null;
// 			while (i < window.frames.length && frame != null) {
// 				if (window.frames[i] == ev.source)
// 					frame = document.getElementsByTagName( 'iframe' )[i];
// 			}			
// 			const session = sessionFactory.create();
// 			session.frame = frame;
// 			if (frame) frame.addEventListener('load', function close() {
// 				frame.removeEventListener('load', close);
// 				console.log('IFrameSessionHandler: frame load detected, closing current session.', frame, session)
// 				session.close()
// 			});
// 			this.sessionEvent.raiseEvent(session);
// 		});
// 	}
// }
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaG9zdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiaG9zdGVkLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFDQSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sOEJBQThCLENBQUE7QUFDckQsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLDBCQUEwQixDQUFBO0FBQ3JELE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxZQUFZLENBQUE7QUFDM0MsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLFNBQVMsQ0FBQTtBQUNyQyxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sUUFBUSxDQUFBO0FBR3RDO0lBQXlDLHVDQUFhO0lBTWxELDZCQUNZLGNBQThCLEVBQzlCLFdBQXdCLEVBQ3pCLEdBQVU7UUFIckIsWUFJSSxrQkFBTSxHQUFHLENBQUMsU0FrQmI7UUFyQlcsb0JBQWMsR0FBZCxjQUFjLENBQWdCO1FBQzlCLGlCQUFXLEdBQVgsV0FBVyxDQUFhO1FBQ3pCLFNBQUcsR0FBSCxHQUFHLENBQU87UUFQZCxVQUFJLEdBQUcsUUFBUSxDQUFDO1FBVW5CLEVBQUUsQ0FBQyxDQUFDLE9BQU8sUUFBUSxLQUFLLFdBQVcsSUFBSSxRQUFRLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQztZQUM1RCxJQUFNLGFBQWEsR0FBRyxLQUFJLENBQUMsYUFBYSxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDNUUsYUFBYSxDQUFDLElBQUksR0FBRyxVQUFVLEVBQUUsQ0FBQztZQUNsQyxhQUFhLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBRyxHQUFHLENBQUM7WUFDakMsYUFBYSxDQUFDLEtBQUssR0FBRyxNQUFNLENBQUM7WUFDN0IsYUFBYSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7WUFDOUIsYUFBYSxDQUFDLEtBQUssQ0FBQyxRQUFRLEdBQUcsVUFBVSxDQUFDO1lBQzFDLGFBQWEsQ0FBQyxLQUFLLENB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RDtBQUNoRCwrQ0FBK0M7QUFDL0Msa0RBQWtEO0FBRWxELGtFQUFrRTtBQUNsRSx3QkFBd0I7QUFDeEIseUZBQXlGO0FBRXpGLG9DQUFvQztBQUNwQyxnQkFBZ0I7QUFDaEIseUNBQXlDO0FBQ3pDLHlEQUF5RDtBQUN6RCx5Q0FBeUM7QUFDekMsNkRBQTZEO0FBQzdELFVBQVU7QUFFViw4Q0FBOEM7QUFDOUMsNEJBQTRCO0FBRTVCLGtFQUFrRTtBQUNsRSxnREFBZ0Q7QUFDaEQseUdBQXlHO0FBQ3pHLHNCQUFzQjtBQUN0QixTQUFTO0FBRVQsNENBQTRDO0FBQzVDLFFBQVE7QUFDUixLQUFLO0FBQ0wsSUFBSSIsInNvdXJjZXNDb250ZW50IjpbIlxuaW1wb3J0IHsgaW5qZWN0IH0gZnJvbSAnYXVyZWxpYS1kZXBlbmRlbmN5LWluamVjdGlvbidcbmltcG9ydCB7IGNyZWF0ZUd1aWQgfSBmcm9tICcuLi9jZXNpdW0vY2VzaXVtLWltcG9ydHMnXG5pbXBvcnQgeyBTZXNzaW9uU2VydmljZSB9IGZyb20gJy4uL3Nlc3Npb24nXG5pbXBvcnQgeyBWaWV3U2VydmljZSB9IGZyb20gJy4uL3ZpZXcnXG5pbXBvcnQgeyBSZWFsaXR5Vmlld2VyIH0gZnJvbSAnLi9iYXNlJ1xuXG5AaW5qZWN0KFNlc3Npb25TZXJ2aWNlLCBWaWV3U2VydmljZSlcbmV4cG9ydCBjbGFzcyBIb3N0ZWRSZWFsaXR5Vmlld2VyIGV4dGVuZHMgUmVhbGl0eVZpZXdlciB7XG5cbiAgICBwdWJsaWMgdHlwZSA9ICdob3N0ZWQnO1xuXG4gICAgcHVibGljIGlmcmFtZUVsZW1lbnQ6SFRNTElGcmFtZUVsZW1lbnQ7XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHJpdmF0ZSBzZXNzaW9uU2VydmljZTogU2Vzc2lvblNlcnZpY2UsXG4gICAgICAgIHByaXZhdGUgdmlld1NlcnZpY2U6IFZpZXdTZXJ2aWNlLFxuICAgICAgICBwdWJsaWMgdXJpOnN0cmluZykge1xuICAgICAgICBzdXBlcih1cmkpO1xuXG4gICAgICAgIGlmICh0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnICYmIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpIHtcbiAgICAgICAgICAgIGNvbnN0IGlmcmFtZUVsZW1lbnQgPSB0aGlzLmlmcmFtZUVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpZnJhbWUnKTtcbiAgICAgICAgICAgIGlmcmFtZUVsZW1lbnQubmFtZSA9IGNyZWF0ZUd1aWQoKTtcbiAgICAgICAgICAgIGlmcmFtZUVsZW1lbnQuc3R5bGUuYm9yZGVyID0gJzAnO1xuICAgICAgICAgICAgaWZyYW1lRWxlbWVudC53aWR0aCA9ICcxMDAlJztcbiAgICAgICAgICAgIGlmcmFtZUVsZW1lbnQuaGVpZ2h0ID0gJzEwMCUnO1xuICAgICAgICAgICAgaWZyYW1lRWxlbWVudC5zdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7XG4gICAgICAgICAgICBpZnJhbWVFbGVtZW50LnN0eWxlLm9wYWNpdHkgPSAnMCc7XG4gICAgICAgICAgICBpZnJhbWVFbGVtZW50LnN0eWxlLnBvaW50ZXJFdmVudHMgPSAnbm9uZSc7XG4gICAgICAgICAgICBjb25zdCB2aWV3RWxlbWVudCA9IHRoaXMudmlld1NlcnZpY2UuZWxlbWVudDtcbiAgICAgICAgICAgIHZpZXdFbGVtZW50Lmluc2VydEJlZm9yZShpZnJhbWVFbGVtZW50ISwgdmlld0VsZW1lbnQuZmlyc3RDaGlsZCk7XG5cbiAgICAgICAgICAgIHRoaXMucHJlc2VudENoYW5nZUV2ZW50LmFkZEV2ZW50TGlzdGVuZXIoKCk9PntcbiAgICAgICAgICAgICAgICB0aGlzLmlmcmFtZUVsZW1lbnQuc3R5bGUub3BhY2l0eSA9IHRoaXMuaXNQcmVzZW50aW5nID8gJzEnIDogJzAnO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgZGVzdHJveSgpIHtcbiAgICAgICAgc3VwZXIuZGVzdHJveSgpO1xuICAgICAgICBpZiAodGhpcy5pZnJhbWVFbGVtZW50KSB7XG4gICAgICAgICAgICB0aGlzLmlmcmFtZUVsZW1lbnQucmVtb3ZlKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgbG9hZCgpOiB2b2lkIHtcbiAgICAgICAgaWYgKHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCkge1xuICAgICAgICAgICAgY29uc3Qgc2Vzc2lvbiA9IHRoaXMuc2Vzc2lvblNlcnZpY2UuYWRkTWFuYWdlZFNlc3Npb25Qb3J0KHRoaXMudXJpKTtcbiAgICAgICAgICAgIHNlc3Npb24uY29ubmVjdEV2ZW50LmFkZEV2ZW50TGlzdGVuZXIoKCk9PntcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5zZXNzaW9uU2VydmljZS5tYW5hZ2VyLmlzQ2xvc2VkKSByZXR1cm47XG4gICAgICAgICAgICAgICAgdGhpcy5jb25uZWN0RXZlbnQucmFpc2VFdmVudChzZXNzaW9uKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBsZXQgaGFuZGxlQ29ubmVjdE1lc3NhZ2UgPSAoZXY6TWVzc2FnZUV2ZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGV2LmRhdGEudHlwZSAhPT0gJ0FSR09OX1NFU1NJT04nKSByZXR1cm47XG4gICAgICAgICAgICAgICAgY29uc3QgbmFtZSA9IGV2LmRhdGEubmFtZTtcbiAgICAgICAgICAgICAgICBjb25zdCBtZXNzYWdlUG9ydDogTWVzc2FnZVBvcnQgPSBldi5wb3J0cyAmJiBldi5wb3J0c1swXTtcblxuICAgICAgICAgICAgICAgIGlmICghbWVzc2FnZVBvcnQpXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignUmVjZWl2ZWQgYW4gQVJHT05fU0VTU0lPTiBtZXNzYWdlIHdpdGhvdXQgYSBNZXNzYWdlUG9ydCBvYmplY3QnKTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBpZiAobmFtZSAhPT0gdGhpcy5pZnJhbWVFbGVtZW50Lm5hbWUpIHJldHVybjtcblxuICAgICAgICAgICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgaGFuZGxlQ29ubmVjdE1lc3NhZ2UpO1xuXG4gICAgICAgICAgICAgICAgc2Vzc2lvbi5vcGVuKG1lc3NhZ2VQb3J0LCB0aGlzLnNlc3Npb25TZXJ2aWNlLmNvbmZpZ3VyYXRpb24pO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgaGFuZGxlQ29ubmVjdE1lc3NhZ2UpO1xuXG4gICAgICAgICAgICB0aGlzLmlmcmFtZUVsZW1lbnQuc3JjID0gJyc7XG4gICAgICAgICAgICB0aGlzLmlmcmFtZUVsZW1lbnQuc3JjID0gdGhpcy51cmk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbi8vIEBzaW5nbGV0b24oKVxuLy8gQGluamVjdChTZXNzaW9uRmFjdG9yeSlcbi8vIGV4cG9ydCBjbGFzcyBET01TZXNzaW9uTGlzdGVuZXJTZXJ2aWNlIHtcblxuLy8gXHRwdWJsaWMgc2Vzc2lvbkV2ZW50ID0gbmV3IEV2ZW50PFNlc3Npb24+KCk7XG5cbi8vIFx0Y29uc3RydWN0b3Ioc2Vzc2lvbkZhY3Rvcnk6U2Vzc2lvbkZhY3RvcnkpIHtcbi8vIFx0XHR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbWVzc2FnZScsIGV2ID0+IHtcbi8vIFx0XHRcdGlmIChldi5kYXRhLnR5cGUgIT0gJ0FSR09OX1NFU1NJT04nKSByZXR1cm47XG5cbi8vIFx0XHRcdGNvbnN0IG1lc3NhZ2VQb3J0Ok1lc3NhZ2VQb3J0TGlrZSA9IGV2LnBvcnRzICYmIGV2LnBvcnRzWzBdO1xuLy8gXHRcdFx0aWYgKCFtZXNzYWdlUG9ydCkgXG4vLyBcdFx0XHRcdHRocm93IG5ldyBFcnJvcignUmVjZWl2ZWQgYW4gQVJHT05fU0VTU0lPTiBtZXNzYWdlIHdpdGhvdXQgYSBNZXNzYWdlUG9ydCBvYmplY3QnKTtcblxuLy8gXHRcdFx0Ly8gZ2V0IHRoZSBldmVudC5zb3VyY2UgaWZyYW1lXG4vLyBcdFx0XHRsZXQgaSA9IDA7XG4vLyBcdFx0XHRsZXQgZnJhbWU6SFRNTElGcmFtZUVsZW1lbnQgPSBudWxsO1xuLy8gXHRcdFx0d2hpbGUgKGkgPCB3aW5kb3cuZnJhbWVzLmxlbmd0aCAmJiBmcmFtZSAhPSBudWxsKSB7XG4vLyBcdFx0XHRcdGlmICh3aW5kb3cuZnJhbWVzW2ldID09IGV2LnNvdXJjZSlcbi8vIFx0XHRcdFx0XHRmcmFtZSA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCAnaWZyYW1lJyApW2ldO1xuLy8gXHRcdFx0fVx0XHRcdFxuXG4vLyBcdFx0XHRjb25zdCBzZXNzaW9uID0gc2Vzc2lvbkZhY3RvcnkuY3JlYXRlKCk7XG4vLyBcdFx0XHRzZXNzaW9uLmZyYW1lID0gZnJhbWU7XG5cbi8vIFx0XHRcdGlmIChmcmFtZSkgZnJhbWUuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsIGZ1bmN0aW9uIGNsb3NlKCkge1xuLy8gXHRcdFx0XHRmcmFtZS5yZW1vdmVFdmVudExpc3RlbmVyKCdsb2FkJywgY2xvc2UpO1xuLy8gXHRcdFx0XHRjb25zb2xlLmxvZygnSUZyYW1lU2Vzc2lvbkhhbmRsZXI6IGZyYW1lIGxvYWQgZGV0ZWN0ZWQsIGNsb3NpbmcgY3VycmVudCBzZXNzaW9uLicsIGZyYW1lLCBzZXNzaW9uKVxuLy8gXHRcdFx0XHRzZXNzaW9uLmNsb3NlKClcbi8vIFx0XHRcdH0pO1xuXG4vLyBcdFx0XHR0aGlzLnNlc3Npb25FdmVudC5yYWlzZUV2ZW50KHNlc3Npb24pO1xuLy8gXHRcdH0pO1xuLy8gXHR9XG4vLyB9XG4iXX0=