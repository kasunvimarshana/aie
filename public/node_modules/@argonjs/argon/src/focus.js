var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { inject } from 'aurelia-dependency-injection';
import { SessionService } from './session';
import { Event } from './utils';
/**
 * Access focus state
 */
var FocusService = (function () {
    function FocusService(sessionService) {
        var _this = this;
        /**
         * An event that is raised when this app has gained focus
         */
        this.focusEvent = new Event();
        /**
         * An event that is raised when this app has lost focus
         */
        this.blurEvent = new Event();
        this._hasFocus = false;
        sessionService.manager.on['ar.focus.state'] = function (_a) {
            var state = _a.state;
            if (_this._hasFocus !== state) {
                _this._hasFocus = state;
                if (state) {
                    _this.focusEvent.raiseEvent(undefined);
                }
                else {
                    _this.blurEvent.raiseEvent(undefined);
                }
            }
        };
    }
    Object.defineProperty(FocusService.prototype, "hasFocus", {
        /**
         * True if this app has focus
         */
        get: function () { return this._hasFocus; },
        enumerable: true,
        configurable: true
    });
    FocusService = __decorate([
        inject(SessionService),
        __metadata("design:paramtypes", [SessionService])
    ], FocusService);
    return FocusService;
}());
export { FocusService };
/**
 * Manage focus state
 */
var FocusServiceProvider = (function () {
    function FocusServiceProvider(sessionService) {
        var _this = this;
        this.sessionService = sessionService;
        this.sessionFocusEvent = new Event();
        sessionService.ensureIsRealityManager();
        sessionService.manager.connectEvent.addEventListener(function () {
            setTimeout(function () {
                if (!_this._session && _this.sessionService.manager.isConnected)
                    _this.session = _this.sessionService.manager;
            });
        });
    }
    Object.defineProperty(FocusServiceProvider.prototype, "session", {
        get: function () { return this._session; },
        set: function (session) {
            if (session && !session.isConnected)
                throw new Error('Only a connected session can be granted focus');
            var previousFocussedSession = this._session;
            if (previousFocussedSession !== session) {
                if (previousFocussedSession)
                    previousFocussedSession.send('ar.focus.state', { state: false });
                if (session)
                    session.send('ar.focus.state', { state: true });
                this._session = session;
                this.sessionFocusEvent.raiseEvent({
                    previous: previousFocussedSession,
                    current: session
                });
            }
        },
        enumerable: true,
        configurable: true
    });
    ;
    FocusServiceProvider = __decorate([
        inject(SessionService, FocusService),
        __metadata("design:paramtypes", [SessionService])
    ], FocusServiceProvider);
    return FocusServiceProvider;
}());
export { FocusServiceProvider };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9jdXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJmb2N1cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFDdEQsT0FBTyxFQUFFLGNBQWMsRUFBZSxNQUFNLFdBQVcsQ0FBQztBQUN4RCxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBRWhDOztHQUVHO0FBRUg7SUFrQkksc0JBQVksY0FBOEI7UUFBMUMsaUJBV0M7UUEzQkQ7O1dBRUc7UUFDSSxlQUFVLEdBQUcsSUFBSSxLQUFLLEVBQVEsQ0FBQztRQUV0Qzs7V0FFRztRQUNJLGNBQVMsR0FBRyxJQUFJLEtBQUssRUFBUSxDQUFDO1FBTTdCLGNBQVMsR0FBRyxLQUFLLENBQUM7UUFHdEIsY0FBYyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxVQUFDLEVBQTJCO2dCQUExQixnQkFBSztZQUNqRCxFQUFFLENBQUMsQ0FBQyxLQUFJLENBQUMsU0FBUyxLQUFLLEtBQUssQ0FBQyxDQUFDLENBQUM7Z0JBQzNCLEtBQUksQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDO2dCQUN2QixFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO29CQUNSLEtBQUksQ0FBQyxVQUFVLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxDQUFDO2dCQUMxQyxDQUFDO2dCQUFDLElBQUksQ0FBQyxDQUFDO29CQUNKLEtBQUksQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxDQUFDO2dCQUN6QyxDQUFDO1lBQ0wsQ0FBQztRQUNMLENBQUMsQ0FBQTtJQUNMLENBQUM7SUFkRCxzQkFBVyxrQ0FBUTtRQUhuQjs7V0FFRzthQUNILGNBQXdCLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFBLENBQUMsQ0FBQzs7O09BQUE7SUFmdEMsWUFBWTtRQUR4QixNQUFNLENBQUMsY0FBYyxDQUFDO3lDQW1CUyxjQUFjO09BbEJqQyxZQUFZLENBOEJ4QjtJQUFELG1CQUFDO0NBQUEsQUE5QkQsSUE4QkM7U0E5QlksWUFBWTtBQWlDekI7O0dBRUc7QUFFSDtJQUlJLDhCQUFvQixjQUE2QjtRQUFqRCxpQkFRQztRQVJtQixtQkFBYyxHQUFkLGNBQWMsQ0FBZTtRQUYxQyxzQkFBaUIsR0FBRyxJQUFJLEtBQUssRUFBcUQsQ0FBQztRQUd0RixjQUFjLENBQUMsc0JBQXNCLEVBQUUsQ0FBQztRQUN4QyxjQUFjLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxnQkFBZ0IsQ0FBQztZQUNqRCxVQUFVLENBQUM7Z0JBQ1AsRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFJLENBQUMsUUFBUSxJQUFJLEtBQUksQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQztvQkFDMUQsS0FBSSxDQUFDLE9BQU8sR0FBRyxLQUFJLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQztZQUNuRCxDQUFDLENBQUMsQ0FBQTtRQUNOLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUlELHNCQUFXLHlDQUFPO2FBQWxCLGNBQXVCLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFBLENBQUMsQ0FBQzthQUM3QyxVQUFtQixPQUE4QjtZQUM3QyxFQUFFLENBQUMsQ0FBQyxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDO2dCQUNoQyxNQUFNLElBQUksS0FBSyxDQUFDLCtDQUErQyxDQUFDLENBQUE7WUFDcEUsSUFBTSx1QkFBdUIsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDO1lBQzlDLEVBQUUsQ0FBQyxDQUFDLHVCQUF1QixLQUFLLE9BQU8sQ0FBQyxDQUFDLENBQUM7Z0JBQ3RDLEVBQUUsQ0FBQyxDQUFDLHVCQUF1QixDQUFDO29CQUN4Qix1QkFBdUIsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztnQkFDckUsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDO29CQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztnQkFDN0QsSUFBSSxDQUFDLFFBQVEsR0FBRyxPQUFPLENBQUM7Z0JBQ3hCLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxVQUFVLENBQUM7b0JBQzlCLFFBQVEsRUFBRSx1QkFBdUI7b0JBQ2pDLE9BQU8sRUFBRSxPQUFPO2lCQUNuQixDQUFDLENBQUM7WUFDUCxDQUFDO1FBQ0wsQ0FBQzs7O09BZjRDO0lBQUEsQ0FBQztJQWhCckMsb0JBQW9CO1FBRGhDLE1BQU0sQ0FBQyxjQUFjLEVBQUUsWUFBWSxDQUFDO3lDQUtFLGNBQWM7T0FKeEMsb0JBQW9CLENBZ0NoQztJQUFELDJCQUFDO0NBQUEsQUFoQ0QsSUFnQ0M7U0FoQ1ksb0JBQW9CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaW5qZWN0IH0gZnJvbSAnYXVyZWxpYS1kZXBlbmRlbmN5LWluamVjdGlvbic7XG5pbXBvcnQgeyBTZXNzaW9uU2VydmljZSwgU2Vzc2lvblBvcnQgfSBmcm9tICcuL3Nlc3Npb24nO1xuaW1wb3J0IHsgRXZlbnQgfSBmcm9tICcuL3V0aWxzJztcblxuLyoqXG4gKiBBY2Nlc3MgZm9jdXMgc3RhdGVcbiAqL1xuQGluamVjdChTZXNzaW9uU2VydmljZSlcbmV4cG9ydCBjbGFzcyBGb2N1c1NlcnZpY2Uge1xuXG4gICAgLyoqXG4gICAgICogQW4gZXZlbnQgdGhhdCBpcyByYWlzZWQgd2hlbiB0aGlzIGFwcCBoYXMgZ2FpbmVkIGZvY3VzXG4gICAgICovXG4gICAgcHVibGljIGZvY3VzRXZlbnQgPSBuZXcgRXZlbnQ8dm9pZD4oKTtcblxuICAgIC8qKlxuICAgICAqIEFuIGV2ZW50IHRoYXQgaXMgcmFpc2VkIHdoZW4gdGhpcyBhcHAgaGFzIGxvc3QgZm9jdXNcbiAgICAgKi9cbiAgICBwdWJsaWMgYmx1ckV2ZW50ID0gbmV3IEV2ZW50PHZvaWQ+KCk7XG5cbiAgICAvKipcbiAgICAgKiBUcnVlIGlmIHRoaXMgYXBwIGhhcyBmb2N1c1xuICAgICAqL1xuICAgIHB1YmxpYyBnZXQgaGFzRm9jdXMoKSB7IHJldHVybiB0aGlzLl9oYXNGb2N1cyB9XG4gICAgcHJpdmF0ZSBfaGFzRm9jdXMgPSBmYWxzZTtcblxuICAgIGNvbnN0cnVjdG9yKHNlc3Npb25TZXJ2aWNlOiBTZXNzaW9uU2VydmljZSkge1xuICAgICAgICBzZXNzaW9uU2VydmljZS5tYW5hZ2VyLm9uWydhci5mb2N1cy5zdGF0ZSddID0gKHtzdGF0ZX06IHsgc3RhdGU6IGJvb2xlYW4gfSkgPT4ge1xuICAgICAgICAgICAgaWYgKHRoaXMuX2hhc0ZvY3VzICE9PSBzdGF0ZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2hhc0ZvY3VzID0gc3RhdGU7XG4gICAgICAgICAgICAgICAgaWYgKHN0YXRlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZm9jdXNFdmVudC5yYWlzZUV2ZW50KHVuZGVmaW5lZCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5ibHVyRXZlbnQucmFpc2VFdmVudCh1bmRlZmluZWQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cblxuXG4vKipcbiAqIE1hbmFnZSBmb2N1cyBzdGF0ZVxuICovXG5AaW5qZWN0KFNlc3Npb25TZXJ2aWNlLCBGb2N1c1NlcnZpY2UpXG5leHBvcnQgY2xhc3MgRm9jdXNTZXJ2aWNlUHJvdmlkZXIge1xuXG4gICAgcHVibGljIHNlc3Npb25Gb2N1c0V2ZW50ID0gbmV3IEV2ZW50PHsgcHJldmlvdXM/OiBTZXNzaW9uUG9ydCwgY3VycmVudD86IFNlc3Npb25Qb3J0IH0+KCk7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIHNlc3Npb25TZXJ2aWNlOlNlc3Npb25TZXJ2aWNlKSB7XG4gICAgICAgIHNlc3Npb25TZXJ2aWNlLmVuc3VyZUlzUmVhbGl0eU1hbmFnZXIoKTtcbiAgICAgICAgc2Vzc2lvblNlcnZpY2UubWFuYWdlci5jb25uZWN0RXZlbnQuYWRkRXZlbnRMaXN0ZW5lcigoKSA9PiB7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuX3Nlc3Npb24gJiYgdGhpcy5zZXNzaW9uU2VydmljZS5tYW5hZ2VyLmlzQ29ubmVjdGVkKVxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNlc3Npb24gPSB0aGlzLnNlc3Npb25TZXJ2aWNlLm1hbmFnZXI7XG4gICAgICAgICAgICB9KVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwcml2YXRlIF9zZXNzaW9uPzpTZXNzaW9uUG9ydDtcblxuICAgIHB1YmxpYyBnZXQgc2Vzc2lvbigpIHsgcmV0dXJuIHRoaXMuX3Nlc3Npb24gfTtcbiAgICBwdWJsaWMgc2V0IHNlc3Npb24oc2Vzc2lvbjogU2Vzc2lvblBvcnR8dW5kZWZpbmVkKSB7XG4gICAgICAgIGlmIChzZXNzaW9uICYmICFzZXNzaW9uLmlzQ29ubmVjdGVkKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdPbmx5IGEgY29ubmVjdGVkIHNlc3Npb24gY2FuIGJlIGdyYW50ZWQgZm9jdXMnKVxuICAgICAgICBjb25zdCBwcmV2aW91c0ZvY3Vzc2VkU2Vzc2lvbiA9IHRoaXMuX3Nlc3Npb247XG4gICAgICAgIGlmIChwcmV2aW91c0ZvY3Vzc2VkU2Vzc2lvbiAhPT0gc2Vzc2lvbikge1xuICAgICAgICAgICAgaWYgKHByZXZpb3VzRm9jdXNzZWRTZXNzaW9uKVxuICAgICAgICAgICAgICAgIHByZXZpb3VzRm9jdXNzZWRTZXNzaW9uLnNlbmQoJ2FyLmZvY3VzLnN0YXRlJywgeyBzdGF0ZTogZmFsc2UgfSk7XG4gICAgICAgICAgICBpZiAoc2Vzc2lvbikgc2Vzc2lvbi5zZW5kKCdhci5mb2N1cy5zdGF0ZScsIHsgc3RhdGU6IHRydWUgfSk7XG4gICAgICAgICAgICB0aGlzLl9zZXNzaW9uID0gc2Vzc2lvbjtcbiAgICAgICAgICAgIHRoaXMuc2Vzc2lvbkZvY3VzRXZlbnQucmFpc2VFdmVudCh7XG4gICAgICAgICAgICAgICAgcHJldmlvdXM6IHByZXZpb3VzRm9jdXNzZWRTZXNzaW9uLFxuICAgICAgICAgICAgICAgIGN1cnJlbnQ6IHNlc3Npb25cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxufSJdfQ==